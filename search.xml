<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HDCTF enc</title>
      <link href="/2023/04/25/63/"/>
      <url>/2023/04/25/63/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="HDCTF-enc"><a href="#HDCTF-enc" class="headerlink" title="HDCTF enc"></a>HDCTF enc</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>进入IDA发现三个函数</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425211602197.png" alt="image-20230425211602197"></p><p>先进入第一个函数sub_411523</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425211647677.png" alt="image-20230425211647677"></p><p>一个简单的tea加密</p><p>key<img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425211722605.png" alt="image-20230425211722605"></p><p>加密内容<img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425211811895.png" alt="image-20230425211811895"></p><h4 id="Tea解密脚本"><a href="#Tea解密脚本" class="headerlink" title="Tea解密脚本"></a>Tea解密脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span>  <span class="comment">// 使用uint32_t数据类型需要包含此头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 定义加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="keyword">uint32_t</span> *v, <span class="keyword">uint32_t</span> *k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0xC6EF3720</span>, i;  <span class="comment">// 根据TEA算法，解密轮次的计算需要初始化sum</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> enc[<span class="number">2</span>]=&#123;<span class="number">0x60FCDEF7</span>,<span class="number">0x236DBEC</span>&#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[]=&#123;<span class="number">0x12</span>,<span class="number">0x34</span>,<span class="number">0x56</span>,<span class="number">0x78</span>&#125;;</span><br><span class="line">    tea_decrypt(enc,key);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;enc[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>得到3，然后看第二个函数sub_4113DE</p><p>第二个函数是把刚刚得到的3当做参数输入了进去</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425212141617.png" alt="image-20230425212141617"></p><p>看到数据段，知道是SMC加密</p><p>加密部分</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425212217021.png" alt="image-20230425212217021"></p><p>发现这里就是将加密段与3进行了简单的异或处理</p><p>找到加密段（shift+F7）</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425212453146.png" alt="image-20230425212453146"></p><p>然后去用IDAPython写脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> idc_bc695 <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">0x0041D000</span></span><br><span class="line">b = <span class="number">0x0041E600</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5632</span>):</span><br><span class="line">    PatchByte((a+i),Byte(a+i)^<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>得到新的函数部分</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425212647986.png" alt="image-20230425212647986"></p><p>发现这是一个RC4的加密，直接写解密脚本</p><h4 id="RC4脚本"><a href="#RC4脚本" class="headerlink" title="RC4脚本"></a>RC4脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> selemtype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0xD4</span>, <span class="number">0x16</span>, <span class="number">0x87</span>, <span class="number">0xD6</span>, <span class="number">0x54</span>, <span class="number">0x68</span>, <span class="number">0xBC</span>, <span class="number">0x02</span>, <span class="number">0x15</span>, <span class="number">0x6D</span>, </span><br><span class="line"><span class="number">0x30</span>, <span class="number">0x08</span>, <span class="number">0x4B</span>, <span class="number">0x61</span>, <span class="number">0x4C</span>, <span class="number">0x5E</span>, <span class="number">0x42</span>, <span class="number">0xFD</span>, <span class="number">0x55</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0xB9</span>, <span class="number">0x27</span>, <span class="number">0x6F</span>, <span class="number">0xF5</span>, <span class="number">0xB6</span>, <span class="number">0x86</span>, <span class="number">0x23</span>, <span class="number">0xA9</span>, <span class="number">0xEF</span>, <span class="number">0x1C</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0x9F</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> longULONG;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*初始化函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*加解密*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;Len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">&quot;you_are_master&quot;</span> &#125;;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> pData[<span class="number">512</span>] = &#123;</span><br><span class="line"><span class="number">0xf</span>,<span class="number">0x94</span>,<span class="number">0xae</span>,<span class="number">0xf2</span>,<span class="number">0xc0</span>,<span class="number">0x57</span>,<span class="number">0xc2</span>,<span class="number">0xe0</span>,<span class="number">0x9a</span>,<span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x37</span>,<span class="number">0x50</span>,<span class="number">0xf5</span>,<span class="number">0xa0</span>,<span class="number">0x5e</span>,<span class="number">0xcb</span>,<span class="number">0x2c</span>,<span class="number">0x16</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,</span><br><span class="line"><span class="number">0xfe</span>,<span class="number">0xff</span>,<span class="number">0x33</span>,<span class="number">0x46</span>,<span class="number">0xe</span>,<span class="number">0x57</span>,<span class="number">0x82</span>,<span class="number">0x22</span>,<span class="number">0x52</span>,<span class="number">0x26</span>,</span><br><span class="line"><span class="number">0x2b</span>,<span class="number">0x6e</span>,<span class="number">0xe4</span>,<span class="number">0x82</span>,<span class="number">0x24</span></span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n&quot;</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;key=%s,length=%d\n\n&quot;</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key));<span class="comment">//已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;完成对S[i]的初始化，如下：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)<span class="comment">//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在解密:\n\n&quot;</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    <span class="comment">//rc4_crypt(s2, (unsigned char*)pData, len);//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pData=%s\n\n&quot;</span>, pData);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HDCTF&#123;y0u_ar3_rc4_t3a_smc_m4ster!!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF double_code</title>
      <link href="/2023/04/25/62/"/>
      <url>/2023/04/25/62/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="HDCTF-double-code"><a href="#HDCTF-double-code" class="headerlink" title="HDCTF double_code"></a>HDCTF double_code</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先放入IDA看不出是干什么，然后去看有些什么字符串，看到写入进程然后交叉进去看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425194235242.png" alt="image-20230425194235242"></p><p>这里写入进程前就一定是加载进程模块，于是点进去看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425194627898.png" alt="image-20230425194627898"></p><p>进去这个sub_14001F000函数，可能是shellcode，就想办法dump出来</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425195318609.png" alt="image-20230425195318609"></p><p>然后进去HEX界面，将其复制到010或winhex中保存下来就能看到了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425195523576.png" alt="image-20230425195523576"></p><p>dump内容</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230425195843032.png" alt="image-20230425195843032"></p><p>就是简单的switch-case结构，写脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> opcode[]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[]=&#123;</span><br><span class="line"><span class="number">0x48</span>,<span class="number">0x67</span>,<span class="number">0x45</span>,<span class="number">0x51</span>,<span class="number">0x42</span>,<span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6a</span>,<span class="number">0x30</span>,<span class="number">0x68</span>,</span><br><span class="line"><span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x32</span>,<span class="number">0x61</span>,<span class="number">0x61</span>,<span class="number">0x5f</span>,<span class="number">0x42</span>,<span class="number">0x70</span>,<span class="number">0x61</span>,<span class="number">0x5b</span>,</span><br><span class="line"><span class="number">0x30</span>,<span class="number">0x53</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x60</span>,<span class="number">0x65</span>,<span class="number">0x7c</span>,<span class="number">0x63</span>,<span class="number">0x69</span>,<span class="number">0x2d</span>,</span><br><span class="line"><span class="number">0x5f</span>,<span class="number">0x46</span>,<span class="number">0x35</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x7d</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">strlen</span>((<span class="keyword">char</span> *)flag) ; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = i%<span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] ^= <span class="number">0x23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] +=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] +=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]+=<span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//HDCTF&#123;Sh3llC0de_and_0pcode_al1_e3sy&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF doublegame</title>
      <link href="/2023/04/18/61/"/>
      <url>/2023/04/18/61/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GDOUCTF-doublegame"><a href="#GDOUCTF-doublegame" class="headerlink" title="GDOUCTF doublegame"></a>GDOUCTF doublegame</h1><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>打开程序，发现是一个贪吃蛇游戏，直接上CE</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418142236635.png" alt="image-20230418142236635"></p><p>看来是要达到多少分才行，那么去找得分的基址</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418142407000.png" alt="image-20230418142407000"></p><p>这个出题人也是牛，直接是静态地址，都不带一点偏移的，一下子就知道了，然后就直接改就行了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418142530540.png" alt="image-20230418142530540"></p><p>直接进入第二关，第二关一看就是个迷宫，先去IDA看一下移动的按键和哪个是猫哪个是终点</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418142733604.png" alt="image-20230418142733604"></p><p>然后开始走迷宫</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418142857233.png" alt="image-20230418142857233"></p><p>走完迷宫后让我们输入key，去IDA中看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418143534668.png" alt="image-20230418143534668"></p><p>看来是需要知道第一关到底要达到多少分才能知道key了。这里游戏是过了第一关就直接进入第二关，说明函数可能存在调用关系</p><p>那么直接找一下是谁调用的第二关</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418143132125.png" alt="image-20230418143132125"></p><p>这里可以看到是这里调用了刚刚的迷宫函数，接着去看看他是哪里的</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418143232531.png" alt="image-20230418143232531"></p><p>继续查看是谁调用了它</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418143310651.png" alt="image-20230418143310651"></p><p>这里看到了GAME OVER就知道这里应该是第一个游戏的函数，然后这个&gt;13371337应该就是要达到的分数才会进去那个找猫的函数，所以key就是13371337</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418143724843.png" alt="image-20230418143724843"></p><p>然后就是最后一个走迷宫了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418144009833.png" alt="image-20230418144009833"></p><p>走出迷宫后md5一下再加上刚刚的分数就是flag了</p><p>HZCTF{811173b05afff098b4e0757962127eac13371337}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF Tea</title>
      <link href="/2023/04/18/60/"/>
      <url>/2023/04/18/60/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="GDOUCTF-Tea"><a href="#GDOUCTF-Tea" class="headerlink" title="GDOUCTF Tea"></a>GDOUCTF Tea</h3><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418134429736.png" alt="image-20230418134429736"></p><h6 id="sub-140011339"><a href="#sub-140011339" class="headerlink" title="sub_140011339"></a>sub_140011339</h6><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418134738052.png" alt="image-20230418134738052"></p><h6 id="sub-1400112B7"><a href="#sub-1400112B7" class="headerlink" title="sub_1400112B7"></a>sub_1400112B7</h6><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418141058952.png" alt="image-20230418141058952"></p><p>可以看到这是对xtea进行了魔改</p><p>1.这里的v6的第一轮先是0<del>32×0xF462900，一直到最后一轮是8×0xF462900</del>40×0xF462900，那么逆向写脚本的时候就要从最后一轮一直往前走</p><p>2.然后就是这里有一个v6的异或是多的记得填上</p><p>3.这里的加密不是两两一组加密完就结束，而是第一个和第二个加密完后，再用第二个与第三个进行加密如此往复</p><h6 id="sub-140011352"><a href="#sub-140011352" class="headerlink" title="sub_140011352"></a>sub_140011352</h6><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230418134826112.png" alt="image-20230418134826112"></p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* a1, <span class="keyword">unsigned</span> <span class="keyword">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__int64 result; <span class="comment">// rax</span></span><br><span class="line"><span class="keyword">int</span> v3; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [rsp+C4h] [rbp+A4h]</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">8</span>; i &gt;=<span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0xF462900</span> * i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">0x20</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v6 += <span class="number">0xF462900</span>;</span><br><span class="line">&#125;</span><br><span class="line">v3 = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">++v5;</span><br><span class="line">v6 -= <span class="number">0xF462900</span>;</span><br><span class="line">a1[v3] -= (v6 + a2[(v6 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ (a1[i] + ((a1[i] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * a1[i])));</span><br><span class="line">a1[i] -= v6 ^ (a1[v3] + ((a1[v3] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * a1[v3]))) ^ (v6 + a2[(v6 &amp; <span class="number">3</span>)]);</span><br><span class="line">&#125; <span class="keyword">while</span> (v5 &lt;= <span class="number">0x20</span>);</span><br><span class="line">result = (i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v7[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v8[<span class="number">10</span>];</span><br><span class="line">v7[<span class="number">0</span>] = <span class="number">2233</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="number">4455</span>;</span><br><span class="line">v7[<span class="number">2</span>] = <span class="number">6677</span>;</span><br><span class="line">v7[<span class="number">3</span>] = <span class="number">8899</span>;</span><br><span class="line"></span><br><span class="line">v8[<span class="number">0</span>] = <span class="number">0x1A800BDA</span>;</span><br><span class="line">v8[<span class="number">1</span>] = <span class="number">0xF7A6219B</span>;</span><br><span class="line">v8[<span class="number">2</span>] = <span class="number">0x491811D8</span>;</span><br><span class="line">v8[<span class="number">3</span>] = <span class="number">0xF2013328</span>;</span><br><span class="line">v8[<span class="number">4</span>] = <span class="number">0x156C365B</span>;</span><br><span class="line">v8[<span class="number">5</span>] = <span class="number">0x3C6EAAD8</span>;</span><br><span class="line">v8[<span class="number">6</span>] = <span class="number">0x84D4BF28</span>;</span><br><span class="line">v8[<span class="number">7</span>] = <span class="number">0xF11A7EE7</span>;</span><br><span class="line">v8[<span class="number">8</span>] = <span class="number">0x3313B252</span>;</span><br><span class="line">v8[<span class="number">9</span>] = <span class="number">0xDD9FE279</span>;</span><br><span class="line"></span><br><span class="line">decode(v8, v7);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">3</span>; l &gt;= <span class="number">0</span>; --l)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v8[k] &gt;&gt; (<span class="number">8</span> * l)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HZCTF&#123;hzCtf_94_re666fingcry5641qq&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UNCTF- 2019 EasyVm</title>
      <link href="/2023/04/09/59/"/>
      <url>/2023/04/09/59/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="UNCTF-2019-EasyVm"><a href="#UNCTF-2019-EasyVm" class="headerlink" title="UNCTF- 2019 EasyVm"></a>UNCTF- 2019 EasyVm</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193452899.png" alt="image-20230409193452899"></p><p>先看两个参数</p><h5 id="2080"><a href="#2080" class="headerlink" title="2080"></a>2080</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193532329.png" alt="image-20230409193532329"></p><h5 id="20A0"><a href="#20A0" class="headerlink" title="20A0"></a>20A0</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193606133.png" alt="image-20230409193606133"></p><p>然后进去关键函数</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193703428.png" alt="image-20230409193703428"></p><p>发现这里是许多的a1的偏移，然后这里有一个10A8可以跟进去，注意这里的存储类型，后面分析有用</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193810173.png" alt="image-20230409193810173"></p><p>可以看到这里调用了很多的函数，然后进去第一个函数看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409193915019.png" alt="image-20230409193915019"></p><p>这里能够看到是通过switch和case语句进行很多的不同的偏移，这里并不知道他运行的顺序，需要虚拟机远程调试</p><h4 id="动调"><a href="#动调" class="headerlink" title="动调"></a>动调</h4><p>我的断点下在了这里</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409200734907.png" alt="image-20230409200734907"></p><p>这里动态调试记得输入32位，防止最外面的if语句判断错误</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409200959470.png" alt="image-20230409200959470"></p><p>然后进去看一下基本的数据存放</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409200800404.png" alt="image-20230409200800404"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409200808361.png" alt="image-20230409200808361"></p><p>a1存放的东西：</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409201652742.png" alt="image-20230409201652742"></p><p>看到这里，它的存储是4010A8，然后a1+8就是4010B0。然后看到下面</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409202651574.png" alt="image-20230409202651574"></p><p>知道A0对应的是这里，再结合外面能推测出4010B0应该是地址</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409202736465.png" alt="image-20230409202736465"></p><p>这里10B0<del>1118能与A0</del>AF进行对应</p><p>从中知道（a1+24）调用的是20A0，（a1+32）调用的是我们所输入的东西，a2调用的是2080</p><p>也就是说a2+9是用来传输给switch进行判断的</p><p>然后通过不断的调试得出顺序是：A9,A3,A5,A6,A4,AB,A7,AE</p><p>接着找对应函数在干嘛</p><h5 id="A9"><a href="#A9" class="headerlink" title="A9"></a>A9</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409203112133.png" alt="image-20230409203112133"></p><p>这里并不知道a1+16和a1+18于是从10B0开始看一下都是干嘛的</p><p>10B0:</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409203234121.png" alt="image-20230409203234121"></p><p>进行自增，然后根据上面byte的数据类型能推测a1+16应该是一个寄存器，所以这个我设为a16寄存器自增</p><p>然后往后面看能知道有a17和a18总共三个寄存器</p><p>所以A9为a16 = input[a18]</p><h5 id="A3"><a href="#A3" class="headerlink" title="A3"></a>A3</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409203700729.png" alt="image-20230409203700729"></p><p>a16 -= a18</p><h5 id="A5"><a href="#A5" class="headerlink" title="A5"></a>A5</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409203814027.png" alt="image-20230409203814027"></p><p>a17 = a16 ^ a17</p><h5 id="A6"><a href="#A6" class="headerlink" title="A6"></a>A6</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409204024551.png" alt="image-20230409204024551"></p><p>a16 = 0XCD</p><h5 id="A4"><a href="#A4" class="headerlink" title="A4"></a>A4</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409204105009.png" alt="image-20230409204105009"></p><p>a16 = a16 ^ a17</p><h5 id="AB"><a href="#AB" class="headerlink" title="AB"></a>AB</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409204244864.png" alt="image-20230409204244864"></p><h5 id="A7"><a href="#A7" class="headerlink" title="A7"></a>A7</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409204341320.png" alt="image-20230409204341320"></p><p>a17 = a16</p><h5 id="AE"><a href="#AE" class="headerlink" title="AE"></a>AE</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230409204438048.png" alt="image-20230409204438048"></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>接下来只需要逆向这些算法就行了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a16 = input[a18];</span></span><br><span class="line"><span class="comment">a16 -= a18;</span></span><br><span class="line"><span class="comment">a17 = a16 ^ a17;</span></span><br><span class="line"><span class="comment">a16 = 0XCD;</span></span><br><span class="line"><span class="comment">a16 = a16 ^ a17;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func1： </span></span><br><span class="line"><span class="comment">if ( *(a1 + 16) == *(*(a1 + 24) + *(a1 + 18)) )</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    result = a1;</span></span><br><span class="line"><span class="comment">    *(a1 + 20) = 0;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">//从func1得知a16其实放的是20A0的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a17 = a16; </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">func2：   </span></span><br><span class="line"><span class="comment">if ( *(a1 + 17) &gt;= *(*(a1 + 24) + *(a1 + 18)) )</span></span><br><span class="line"><span class="comment">      *(a1 + 20) = 1;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">      *(a1 + 20) = -1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a16 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a17 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> input;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0xF4</span>,<span class="number">0x0A</span>,<span class="number">0xF7</span>,<span class="number">0x64</span>,<span class="number">0x99</span>,<span class="number">0x78</span>,<span class="number">0x9E</span>,<span class="number">0x7D</span>,<span class="number">0xEA</span>,<span class="number">0X7B</span>,</span><br><span class="line"><span class="number">0X9E</span>,<span class="number">0X7B</span>,<span class="number">0X9F</span>,<span class="number">0X7E</span>,<span class="number">0XEB</span>,<span class="number">0X71</span>,<span class="number">0XE8</span>,<span class="number">0X00</span>,<span class="number">0XE8</span>,<span class="number">0X07</span>,</span><br><span class="line"><span class="number">0X98</span>,<span class="number">0X19</span>,<span class="number">0XF4</span>,<span class="number">0X25</span>,<span class="number">0XF3</span>,<span class="number">0X21</span>,<span class="number">0XA4</span>,<span class="number">0X2F</span>,<span class="number">0XF4</span>,<span class="number">0X2F</span>,</span><br><span class="line"><span class="number">0XA6</span>,<span class="number">0X7C</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    input = (s[i]^(<span class="number">0xCD</span>)^s[i<span class="number">-1</span>])+i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//942a4115be2359ffd675fa6338ba23b6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HZNUCTF flower</title>
      <link href="/2023/03/28/58/"/>
      <url>/2023/03/28/58/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="HZNUCTF-flower"><a href="#HZNUCTF-flower" class="headerlink" title="HZNUCTF flower"></a>HZNUCTF flower</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>32位无壳 然后放入IDA中分析</p><p>根据题目，flower大胆擦测是个花指令的题目，然后往下翻就看到了db 0E8h，一般的汇编代码不会这么单独搞出来，还有就是一大堆的dd数据，那么本题考的就是花了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328214801042.png" alt="image-20230328214801042"></p><p>然后往下继续看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328214918941.png" alt="image-20230328214918941"></p><p>这里句话，但是F5居然找不到</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328214953641.png" alt="image-20230328214953641"></p><p>这里我猜测是将这个程序分开了，那么我需要将他们分成两部分，一个主函数和另一个函数，这里去花就不给演示了，想要了解去花可以去看我的总结文章</p><p>去完花之后就是这样的</p><h5 id="主函数："><a href="#主函数：" class="headerlink" title="主函数："></a>主函数：</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328215157991.png" alt="image-20230328215157991"></p><h5 id="另一个函数："><a href="#另一个函数：" class="headerlink" title="另一个函数："></a>另一个函数：</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328215241638.png" alt="image-20230328215241638"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230328215254878.png" alt="image-20230328215254878"></p><p>可以从上述两个函数中能知道，这就是一个魔改的RC4加密，改的地方在交换的那里。主函数中也给出了key和Data，那么我们直接写脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> k[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint8_t</span> tmp;</span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp ^ <span class="number">0x37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rc4_Init</span><span class="params">(<span class="keyword">char</span>* key, <span class="keyword">uint32_t</span> klen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">t[i] = key[i % klen];</span><br><span class="line">&#125;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = (j + s[i] + t[i]) % <span class="number">256</span>;</span><br><span class="line">swap(&amp;s[i], &amp;s[j]);</span><br><span class="line">                             <span class="comment">//交换的函数(可以套用这个模板)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401619</span><span class="params">(<span class="keyword">char</span> v11[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">22</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        v11[k]^=s[t];<span class="comment">//密文=明文^密匙流</span></span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v10[<span class="number">22</span>];</span><br><span class="line"><span class="keyword">char</span> ket[<span class="number">10</span>] = <span class="string">&quot;tellmewhy&quot;</span>;</span><br><span class="line">Rc4_Init(ket, <span class="built_in">strlen</span>(ket));</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">57</span>;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">43</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">-84</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">-44</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">120</span>;</span><br><span class="line">  v10[<span class="number">5</span>] = <span class="number">-82</span>;</span><br><span class="line">  v10[<span class="number">6</span>] = <span class="number">-93</span>;</span><br><span class="line">  v10[<span class="number">7</span>] = <span class="number">66</span>;</span><br><span class="line">  v10[<span class="number">8</span>] = <span class="number">58</span>;</span><br><span class="line">  v10[<span class="number">9</span>] = <span class="number">17</span>;</span><br><span class="line">  v10[<span class="number">10</span>] = <span class="number">-7</span>;</span><br><span class="line">  v10[<span class="number">11</span>] = <span class="number">90</span>;</span><br><span class="line">  v10[<span class="number">12</span>] = <span class="number">-55</span>;</span><br><span class="line">  v10[<span class="number">13</span>] = <span class="number">-68</span>;</span><br><span class="line">  v10[<span class="number">14</span>] = <span class="number">-84</span>;</span><br><span class="line">  v10[<span class="number">15</span>] = <span class="number">22</span>;</span><br><span class="line">  v10[<span class="number">16</span>] = <span class="number">-80</span>;</span><br><span class="line">  v10[<span class="number">17</span>] = <span class="number">-57</span>;</span><br><span class="line">  v10[<span class="number">18</span>] = <span class="number">85</span>;</span><br><span class="line">  v10[<span class="number">19</span>] = <span class="number">-72</span>;</span><br><span class="line">  v10[<span class="number">20</span>] = <span class="number">99</span>;</span><br><span class="line">  v10[<span class="number">21</span>] = <span class="number">0x80</span>;</span><br><span class="line">  <span class="keyword">char</span> v11[<span class="number">25</span>]=&#123;<span class="number">2</span>&#125;; </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">23</span>; i++ )</span><br><span class="line">  &#123;</span><br><span class="line">  v11[i+<span class="number">1</span>]=v10[i];</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401619(v11);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,v11[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line"><span class="comment">//flag&#123;D1d_y0u_g3t_7h3_$l0w3rs&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-RoundX easy_z3</title>
      <link href="/2023/03/26/57/"/>
      <url>/2023/03/26/57/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="NSSCTF-RoundX-easy-z3"><a href="#NSSCTF-RoundX-easy-z3" class="headerlink" title="NSSCTF-RoundX easy_z3"></a>NSSCTF-RoundX easy_z3</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，发现是UPX，但是直接手动去壳不行，发现是魔改的UPX，更改一下三个值再去脱壳就行了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230326212203067.png" alt="image-20230326212203067"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230326212246392.png" alt="image-20230326212246392"></p><p>然后放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230326212435881.png" alt="image-20230326212435881"></p><p>根据每个函数分析出了大致的解题过程，那么先用z3解出我们要的吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">&quot;num[%d]&quot;</span> % i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">+ <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">- <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">- <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">- <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">+ <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">- <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">- <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">- <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2582239</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    - (<span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">       + <span class="number">17</span> * a1[<span class="number">16</span>]) == <span class="number">2602741</span>)</span><br><span class="line">s.add(<span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>] * <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>] * <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>] * <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">2668123</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + (<span class="number">13</span> * a1[<span class="number">12</span>] + <span class="number">11</span> * a1[<span class="number">10</span>] - <span class="number">12</span> * a1[<span class="number">11</span>]) * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2520193</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    + <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">    + <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>] * <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    - <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">    - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">    - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">8904587</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>] * <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">- <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">- <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">- <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">- <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">- <span class="number">16</span> * a1[<span class="number">15</span>] * (<span class="number">13</span> * a1[<span class="number">12</span>] + <span class="number">12</span> * a1[<span class="number">11</span>] - <span class="number">14</span> * a1[<span class="number">13</span>] - <span class="number">15</span> * a1[<span class="number">14</span>])</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">- <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">1227620874</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>] * <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">1836606059</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">    + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    - <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">    - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">    - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">8720560</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * (<span class="number">10</span> * a1[<span class="number">9</span>] + <span class="number">30</span> * a1[<span class="number">5</span>] + <span class="number">5</span> * a1[<span class="number">4</span>] + <span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">7</span> * a1[<span class="number">6</span>] + <span class="number">8</span> * a1[<span class="number">7</span>] - <span class="number">9</span> * a1[<span class="number">8</span>])</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - (<span class="number">16</span> * a1[<span class="number">15</span>] - <span class="number">17</span> * a1[<span class="number">16</span>] - <span class="number">18</span> * a1[<span class="number">17</span>]) * <span class="number">15</span> * a1[<span class="number">14</span>] == <span class="number">11387045</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    + <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">    + <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    + a1[<span class="number">0</span>]</span><br><span class="line">- <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">+ <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">- <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">- <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">- <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">+ <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">- <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">- <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">- <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">- <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">7660269</span>)</span><br><span class="line">s.add(<span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - (<span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">      - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">      - <span class="number">30</span> * a1[<span class="number">5</span>])</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">2461883</span>)</span><br><span class="line">s.add(</span><br><span class="line">    <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">    + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">    + <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">    + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">    + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">    - <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">    - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">    - <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">    - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">    - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">    - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">    - <span class="number">17</span> * a1[<span class="number">16</span>] * <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">    - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">    - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">    - <span class="number">20</span> * a1[<span class="number">19</span>] == -<span class="number">966296</span>)</span><br><span class="line"></span><br><span class="line">s.add(</span><br><span class="line"><span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + (<span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>] + <span class="number">30</span> * a1[<span class="number">5</span>] + <span class="number">5</span> * a1[<span class="number">4</span>] + <span class="number">3</span> * a1[<span class="number">2</span>] + <span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">7</span> * a1[<span class="number">6</span>] + <span class="number">8</span> * a1[<span class="number">7</span>] - <span class="number">9</span> * a1[<span class="number">8</span>])</span><br><span class="line">     * <span class="number">2</span></span><br><span class="line">     * a1[<span class="number">1</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>] == <span class="number">254500223</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>] * <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == <span class="number">6022286</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>] * <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] == -<span class="number">636956022</span></span><br><span class="line">    )</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">10631829</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">15</span> * a1[<span class="number">14</span>] * <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>] * <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + (<span class="number">4</span> * a1[<span class="number">3</span>] - <span class="number">5</span> * a1[<span class="number">4</span>] - <span class="number">30</span> * a1[<span class="number">5</span>]) * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>] == <span class="number">6191333</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>] * <span class="number">9</span> * a1[<span class="number">8</span>] * <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * a1[<span class="number">1</span>] * a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>] * <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] * <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>] == <span class="number">890415359</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>]</span><br><span class="line">     + <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * a1[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * a1[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">4</span> * a1[<span class="number">3</span>] * <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">7</span> * a1[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * a1[<span class="number">14</span>] == <span class="number">23493664</span></span><br><span class="line">)</span><br><span class="line">s.add(</span><br><span class="line"><span class="number">20</span> * a1[<span class="number">19</span>] * <span class="number">19</span> * a1[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * a1[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * a1[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * a1[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">3</span> * a1[<span class="number">2</span>] * <span class="number">2</span> * a1[<span class="number">1</span>]</span><br><span class="line">     + a1[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * a1[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * a1[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * a1[<span class="number">7</span>] * <span class="number">7</span> * a1[<span class="number">6</span>] * <span class="number">30</span> * a1[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">9</span> * a1[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * a1[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * a1[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * a1[<span class="number">15</span>] * <span class="number">15</span> * a1[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * a1[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * a1[<span class="number">17</span>] == <span class="number">1967260144</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a1:</span><br><span class="line">    <span class="built_in">print</span>(s.model()[i].as_long(), end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#跑出来的结果是[104,97,104,97,104,97,116,104,105,115,105,115,102,97,99,107,102,108,97,103]</span></span><br><span class="line"><span class="comment">#有点丑，将就用    </span></span><br></pre></td></tr></table></figure><p>既然所以参数都能求出来，那么就可以直接写一个脚本跑flag了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">Get_254D0</span><span class="params">(DWORD d254D0[<span class="number">20</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">DWORD d25050[<span class="number">20</span>] = &#123;<span class="number">0X1207</span>,<span class="number">0X4CA0</span>,<span class="number">0X4F21</span>,<span class="number">0X39</span>,<span class="number">0X1A523</span>,<span class="number">0X23A</span>,<span class="number">0X926</span>,<span class="number">0X4CA7</span>,</span><br><span class="line"><span class="number">0X6560</span>,<span class="number">0X36</span>,<span class="number">0X1A99B</span>,<span class="number">0X4CA8</span>,<span class="number">0X1BBE0</span>,<span class="number">0X3705</span>,<span class="number">0X926</span>,<span class="number">0X77D3</span>,</span><br><span class="line"><span class="number">0X9A98</span>,<span class="number">0X657B</span>,<span class="number">0X18</span>,<span class="number">0X0B11</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>( i ; i &lt; <span class="number">20</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">d254D0[i] = d25050[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">Get_25520</span><span class="params">(DWORD d25520[<span class="number">20</span>], DWORD d254D0[<span class="number">20</span>],DWORD a[<span class="number">20</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">int</span> v2 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">20</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">int</span> v3 = i;</span><br><span class="line">    d25520[v3] = *(a + <span class="number">20</span> - i - <span class="number">1</span>) ^ d254D0[i]; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">sub_1124E</span><span class="params">(DWORD a1, DWORD a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v3; </span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v3 *= a1;</span><br><span class="line">    a1 = a1 * a1 % <span class="number">1000</span>;</span><br><span class="line">    a2 &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD a[<span class="number">20</span>] = &#123;<span class="number">104</span>,<span class="number">97</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">102</span>,<span class="number">97</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>&#125;;</span><br><span class="line">DWORD d254D0[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD d25520[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD d25000[<span class="number">20</span>] = &#123; <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, </span><br><span class="line"> <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x07</span>,</span><br><span class="line"> <span class="number">0x09</span>, <span class="number">0x07</span>&#125;;</span><br><span class="line">DWORD Str[<span class="number">20</span>];</span><br><span class="line">DWORD v3;</span><br><span class="line"></span><br><span class="line">Get_254D0(d254D0);</span><br><span class="line">Get_25520(d25520,d254D0,a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里用的是爆破的方法</span></span><br><span class="line"><span class="keyword">for</span>(DWORD p = <span class="number">0</span> ; p &lt; <span class="number">20</span> ; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( DWORD k = <span class="number">0</span> ; k &lt; <span class="number">127</span> ; k++)</span><br><span class="line">&#123;</span><br><span class="line">Str[p] = k;</span><br><span class="line"><span class="keyword">if</span>( d25520[p] == sub_1124E(Str[p], d25000[p]) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,k);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T1e_z3_1s_v1r9_3asy!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 数字网络安全人才挑战赛 game</title>
      <link href="/2023/03/11/56/"/>
      <url>/2023/03/11/56/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="2023-数字网络安全人才挑战赛-game"><a href="#2023-数字网络安全人才挑战赛-game" class="headerlink" title="2023 数字网络安全人才挑战赛 game"></a>2023 数字网络安全人才挑战赛 game</h3><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>首先查壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324205429216.png" alt="image-20230324205429216"></p><p>32位无壳，然后放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324205933325.png" alt="image-20230324205933325"></p><p>可以看到这个exe进行了许多的随机数的处理，本来想着这道题会不会是跟随机数有关，但是看到前面srand用的种子是随机的，也就是说，每次打开程序都会是得到新的不一样的东西。那么本题跟这些与随机数相关的东西无关，这些部分是游戏所需要的参数</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324210313812.png" alt="image-20230324210313812"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324210419576.png" alt="image-20230324210419576"></p><p>然后接着往下看，通过动调明白了一些函数到底是在干什么，能知道 “Sleep(0x64u);” 以前的都是游戏的部分。</p><p>看到 “sub_403810(v30, “flag.png”, 0, 0, 0);” 猜测这道题的flag可能是需要动调出图片得到的，那么也就是说首先得需要if语句能够成立才可以运行到下面</p><p>首先想到的是可不可以通过前面的累加进行成立</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324211332293.png" alt="image-20230324211332293"></p><p>但是动调发现，这根本到不了这个语句，所以行不通，那么只能改值了。我们知道这种未初始化的部分无法在静态编译中更改值，那么只能边动调边改了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324211518498.png" alt="image-20230324211518498"></p><p>这里将值修改成0x280（640）</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324211747178.png" alt="image-20230324211747178"></p><p>然后一直f8来跑，接着会弹出一个Done</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324211846536.png" alt="image-20230324211846536"></p><p>然后去文件夹中看看是否生成png图</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230324211936866.png" alt="image-20230324211936866"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepnepxCATCTF ——The cat did it</title>
      <link href="/2023/01/04/55/"/>
      <url>/2023/01/04/55/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="NepnepxCATCTF-——The-cat-did-it"><a href="#NepnepxCATCTF-——The-cat-did-it" class="headerlink" title="NepnepxCATCTF ——The cat did it"></a>NepnepxCATCTF ——The cat did it</h3><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>解压之后得到一个网站，然后进去发现是一个求概率的题，给了很多的条件和要求的东西</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230104162504509.png" alt="image-20230104162504509"></p><p>一开始没有头绪，一直往下面翻看到这个，点击一下就出现了猫猫的图案</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230104162413522.png" alt="image-20230104162413522"></p><p>发现“我”无论怎么运动都在猫猫里面，那么我离开猫猫的概率也就是0%，然后结合题目给的提示</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230104162654872.png" alt="image-20230104162654872"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20230104162756365.png" alt="image-20230104162756365"></p><p>flag：CatCTF{9f1ef07877f9d85a82bd500f408b4814}</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>感觉跟逆向没有半毛钱关系(´・ω・`)</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年春秋杯 easy_python</title>
      <link href="/2022/12/25/54/"/>
      <url>/2022/12/25/54/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2022年春秋杯-easy-python"><a href="#2022年春秋杯-easy-python" class="headerlink" title="2022年春秋杯 easy_python"></a>2022年春秋杯 easy_python</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先打开发现是一个txt的文本，把文本打开，发现这是一道python字节码到源码的逆向</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3           0 LOAD_CONST               1 (204)</span><br><span class="line">            3 LOAD_CONST               2 (141)</span><br><span class="line">            6 LOAD_CONST               3 (44)</span><br><span class="line">            9 LOAD_CONST               4 (236)</span><br><span class="line">           12 LOAD_CONST               5 (111)</span><br><span class="line">           15 LOAD_CONST               6 (140)</span><br><span class="line">           18 LOAD_CONST               6 (140)</span><br><span class="line">           21 LOAD_CONST               7 (76)</span><br><span class="line">           24 LOAD_CONST               3 (44)</span><br><span class="line">           27 LOAD_CONST               8 (172)</span><br><span class="line">           30 LOAD_CONST               9 (7)</span><br><span class="line">           33 LOAD_CONST               9 (7)</span><br><span class="line">           36 LOAD_CONST              10 (39)</span><br><span class="line">           39 LOAD_CONST              11 (165)</span><br><span class="line">           42 LOAD_CONST              12 (70)</span><br><span class="line">           45 LOAD_CONST               9 (7)</span><br><span class="line">           48 LOAD_CONST              10 (39)</span><br><span class="line">           51 LOAD_CONST              13 (166)</span><br><span class="line">           54 LOAD_CONST              11 (165)</span><br><span class="line">           57 LOAD_CONST              14 (134)</span><br><span class="line">           60 LOAD_CONST              14 (134)</span><br><span class="line">           63 LOAD_CONST               6 (140)</span><br><span class="line">           66 LOAD_CONST               1 (204)</span><br><span class="line">           69 LOAD_CONST              11 (165)</span><br><span class="line">           72 LOAD_CONST               9 (7)</span><br><span class="line">           75 LOAD_CONST              10 (39)</span><br><span class="line">           78 LOAD_CONST              15 (230)</span><br><span class="line">           81 LOAD_CONST               6 (140)</span><br><span class="line">           84 LOAD_CONST              11 (165)</span><br><span class="line">           87 LOAD_CONST              12 (70)</span><br><span class="line">           90 LOAD_CONST               3 (44)</span><br><span class="line">           93 LOAD_CONST               8 (172)</span><br><span class="line">           96 LOAD_CONST              16 (102)</span><br><span class="line">           99 LOAD_CONST              17 (6)</span><br><span class="line">          102 LOAD_CONST               6 (140)</span><br><span class="line">          105 LOAD_CONST               1 (204)</span><br><span class="line">          108 LOAD_CONST              15 (230)</span><br><span class="line">          111 LOAD_CONST              15 (230)</span><br><span class="line">          114 LOAD_CONST               7 (76)</span><br><span class="line">          117 LOAD_CONST              18 (198)</span><br><span class="line">          120 LOAD_CONST              19 (38)</span><br><span class="line">          123 LOAD_CONST              20 (175)</span><br><span class="line">          126 BUILD_LIST              42</span><br><span class="line">          129 STORE_FAST               0 (flag)</span><br><span class="line"></span><br><span class="line">4         132 SETUP_LOOP              54 (to 189)</span><br><span class="line">          135 LOAD_GLOBAL              0 (range)</span><br><span class="line">          138 LOAD_CONST              21 (42)</span><br><span class="line">          141 CALL_FUNCTION            1</span><br><span class="line">          144 GET_ITER            </span><br><span class="line">      &gt;&gt;  145 FOR_ITER                40 (to 188)</span><br><span class="line">          148 STORE_FAST               1 (i)</span><br><span class="line"></span><br><span class="line">5         151 LOAD_FAST                0 (flag)</span><br><span class="line">          154 LOAD_FAST                1 (i)</span><br><span class="line">          157 BINARY_SUBSCR       </span><br><span class="line">          158 LOAD_CONST              22 (5)</span><br><span class="line">          161 BINARY_RSHIFT       </span><br><span class="line">          162 LOAD_FAST                0 (flag)</span><br><span class="line">          165 LOAD_FAST                1 (i)</span><br><span class="line">          168 BINARY_SUBSCR       </span><br><span class="line">          169 LOAD_CONST              23 (3)</span><br><span class="line">          172 BINARY_LSHIFT       </span><br><span class="line">          173 BINARY_OR           </span><br><span class="line">          174 LOAD_CONST              24 (255)</span><br><span class="line">          177 BINARY_AND          </span><br><span class="line">          178 LOAD_FAST                0 (flag)</span><br><span class="line">          181 LOAD_FAST                1 (i)</span><br><span class="line">          184 STORE_SUBSCR        </span><br><span class="line">          185 JUMP_ABSOLUTE          145</span><br><span class="line">      &gt;&gt;  188 POP_BLOCK           </span><br><span class="line">      &gt;&gt;  189 LOAD_CONST               0 (None)</span><br><span class="line">          192 RETURN_VALUE        </span><br></pre></td></tr></table></figure><p>首先了解一下python字节码结构是什么:</p><p>源码行号   指令在函数中的偏移   指令符号   指令参数   实际参数值</p><p>(Ps:一般来说指令在函数中的偏移和指令参数在做题中都不是很重要可以忽略不管)</p><p>很容易看出本题是分为了3 4 5行这三个部分，这里逐一分析</p><h5 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h5><p>这里有三个不同的指令符号</p><p>LOAD_CONST 加载常量，通常为整数值</p><p>BUILD_LIST 创建一个列表</p><p>STORE_FAST 一般用于保存值到局部变量</p><p>这里来分析第一个</p><p>3           0 LOAD_CONST               1 (204)</p><p>这个表示第一个元素204，以此类推这里存了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">204, 141, 44, 236, 111, 140, 140, 76, 44, 172, 7, 7, 39, 165, 70, 7, 39, 166, 165, 134, 134, 140, 204, 165, 7, 39, 230, 140, 165, 70, 44, 172, 102, 6, 140, 204, 230, 230, 76, 198, 38, 175</span><br></pre></td></tr></table></figure><p>然后看到 126 BUILD_LIST              42</p><p>创建一个长度为42的列表</p><p> 129 STORE_FAST               0 (flag)</p><p>将前面的数据保存在flag中</p><h5 id="第四行"><a href="#第四行" class="headerlink" title="第四行"></a>第四行</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221225205007201.png" alt="image-20221225205007201"></p><p>这里有五个不同的指令符号</p><p>SETUP_LOOP，用于开始循环，括号里的189表示循环退出点</p><p>LOAD_GLOBAL，用来加载全局变量，包括指定函数名，类名，模块名等全局符号</p><p>CALL_FUNCTION，用来表示前面加载全局变量的参数个数</p><p>GET_ITER，FOR_ITER ，获取参数，开始迭代。这两个不需要过多理解，属于for-in结构特有的，它们通常同时出现。</p><p>整体分析一下第四行就是</p><p>for i in range(42):</p><h5 id="第五行"><a href="#第五行" class="headerlink" title="第五行"></a>第五行</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221225205022756.png" alt="image-20221225205022756"></p><p>这里出现的指令符号</p><p>BINARY_SUBSCR ，读取迭代器中某个下标的值</p><p>BINARY_RSHIFT，进行右移运算</p><p>BINARY_LSHIFT ，左移运算</p><p>BINARY_OR，或运算</p><p>BINARY_AND ，与运算</p><p>STORE_SUBSCR ，修改迭代器中某个下标的值</p><p>JUMP_ABSOLUTE ，回到循环起点</p><p>RETURN_VALUE ，函数结束标志</p><p>POP_BLOCK，特有的，通常和LOAD_CONST        0 (None)一起出现。</p><p>可以得出首先进行右移5，然后左移3再或运算为</p><p>(flag[i] &gt;&gt; 5) | (flag[i] &lt;&lt; 3)</p><p>然后与上了255最后存入flag[i]中，然后整体为</p><p>flag[i] = (flag[i] &gt;&gt; 5) | (flag[i] &lt;&lt; 3) &amp; 255</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">204</span>, <span class="number">141</span>, <span class="number">44</span>, <span class="number">236</span>, <span class="number">111</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">76</span>, <span class="number">44</span>, <span class="number">172</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">39</span>, <span class="number">165</span>, <span class="number">70</span>, <span class="number">7</span>, <span class="number">39</span>, <span class="number">166</span>, <span class="number">165</span>, <span class="number">134</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">204</span>, <span class="number">165</span>, <span class="number">7</span>, <span class="number">39</span>, <span class="number">230</span>, <span class="number">140</span>, <span class="number">165</span>, <span class="number">70</span>, <span class="number">44</span>, <span class="number">172</span>, <span class="number">102</span>, <span class="number">6</span>, <span class="number">140</span>, <span class="number">204</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">76</span>, <span class="number">198</span>, <span class="number">38</span>, <span class="number">175</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    flag[i] = (flag[i] &gt;&gt; <span class="number">5</span>) | (flag[i] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">255</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    flag1 += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;flag&#123;ddbae889-2895-44df-897d-2ae30df77b61&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些函数的使用</title>
      <link href="/2022/11/24/53/"/>
      <url>/2022/11/24/53/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一些函数的使用"><a href="#一些函数的使用" class="headerlink" title="一些函数的使用"></a>一些函数的使用</h3><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BOOL a;</span><br><span class="line"><span class="keyword">char</span> Path_File[] = <span class="string">&quot;C:\\Users\\政政真厉害\\Desktop\\111.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">a = DeleteFileA(Path_File);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回值:%d\n扩展错误信息%d\n&quot;</span>, a, GetLastError());</span><br><span class="line"></span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="这里的DeleteFileA函数"><a href="#这里的DeleteFileA函数" class="headerlink" title="这里的DeleteFileA函数"></a>这里的DeleteFileA函数</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124151936488.png" alt="image-20221124151936488"></p><p>BOOL类型的返回值</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124152036336.png" alt="image-20221124152036336"></p><p>PS：这里写路径的时候不是”/“，这里要用”//“</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124152247299.png" alt="image-20221124152247299"></p><p>PS:GetLastError函数没有参数，所以括号内不填</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124152522523.png" alt="image-20221124152522523"></p><h4 id="DLL程序1"><a href="#DLL程序1" class="headerlink" title="DLL程序1"></a>DLL程序1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ccc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;导出函数被调用成功！&quot;</span>, <span class="string">&quot;信息：&quot;</span>, MB_YESNO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;加载成功！&quot;</span>, <span class="string">&quot;信息：&quot;</span>, MB_YESNO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jiewei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;卸载成功！&quot;</span>, <span class="string">&quot;信息：&quot;</span>, MB_YESNO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="comment">//加载时要做的事</span></span><br><span class="line">        aaa();</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="comment">//结尾是要做的事</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="MessageBox函数"><a href="#MessageBox函数" class="headerlink" title="MessageBox函数"></a>MessageBox函数</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124152950137.png" alt="image-20221124152950137"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124153212220.png" alt="image-20221124153212220"></p><p>第一个参数一般是NULL</p><p>第二个参数为对话框要显示的内容</p><p>第三个是对话框的标题</p><p>第四个相当于取消和确定（一般选用画圈的）</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124154209458.png" alt="image-20221124154209458"></p><h4 id="DLL程序2"><a href="#DLL程序2" class="headerlink" title="DLL程序2"></a>DLL程序2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明导出函数-&gt;把这个ccc函数导出去</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">ccc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用作导出函数：接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ccc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;导出函数调用成功！&quot;</span>, <span class="string">&quot;信息：&quot;</span>, MB_YESNO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们用c++写代码的时候，有时需要用到c的格式，并且这个工程要作为一个动态库输出，这是后就要用到<a href="https://so.csdn.net/so/search?q=extern&spm=1001.2101.3001.7020">extern</a> “C” __declspec(dllexport)，这里也就是用C的形式声明导出函数-&gt;把这个ccc函数导出去</p><h4 id="DLL程序3"><a href="#DLL程序3" class="headerlink" title="DLL程序3"></a>DLL程序3</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本程序是DLL导出函数和应用程序通讯的例子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用静态库，从本目录调用 例如：D:\删除文件\Project1\x64\Debug</span></span><br><span class="line"><span class="comment">//#pragma comment(lib,&quot;FirstDll&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extern &quot;C&quot; void ccc();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PMessage_Box)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将指定的模块加载到调用进程的地址空间中</span></span><br><span class="line">HMODULE hModule = LoadLibrary(<span class="string">&quot;FirstDll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断句柄是否为空</span></span><br><span class="line"><span class="keyword">if</span>(hModule == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;句柄出错！&quot;</span>, <span class="string">&quot;标题：&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GetProcAddress从指定的动态链接库 (DLL) 检索导出函数ccc的地址</span></span><br><span class="line">PMessage_Box pMsg = (PMessage_Box)GetProcAddress(hModule, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//这里的(PMessage_Box)时进行类型的强制转换</span></span><br><span class="line"><span class="comment">//执行函数</span></span><br><span class="line">pMsg();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="GetProcAddress函数"><a href="#GetProcAddress函数" class="headerlink" title="GetProcAddress函数"></a>GetProcAddress函数</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124154710022.png" alt="image-20221124154710022"></p><p>第一个参数是HMODULE类型的DLL模块中的句柄</p><p>第二个参数是函数或变量名称</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124154906969.png" alt="image-20221124154906969"></p><h5 id="LoadLibrary函数"><a href="#LoadLibrary函数" class="headerlink" title="LoadLibrary函数"></a>LoadLibrary函数</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124155916799.png" alt="image-20221124155916799"></p><p>返回值类型为HMODULE</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124160009475.png" alt="image-20221124160009475"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124160725236.png" alt="image-20221124160725236"></p><h5 id="关于通讯"><a href="#关于通讯" class="headerlink" title="关于通讯"></a>关于通讯</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124160814982.png" alt="image-20221124160814982"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124160848357.png" alt="image-20221124160848357"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221124160907538.png" alt="image-20221124160907538"></p><h4 id="注入DLL"><a href="#注入DLL" class="headerlink" title="注入DLL"></a>注入DLL</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inject</span><span class="params">(<span class="keyword">int</span> pID, <span class="keyword">char</span>* Path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//LoadLibrary</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建在另一个进程的虚拟地址空间中运行的线程;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取进程句柄</span></span><br><span class="line"> HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pID);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//申请一块内存给DLL路径</span></span><br><span class="line"> <span class="comment">//指向要传递给线程函数的变量的指针</span></span><br><span class="line"> LPVOID pReturnAddress = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(Path) + <span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//写入路径到上一行代码申请的内存中</span></span><br><span class="line"> <span class="built_in">WriteProcessMemory</span>(hProcess, pReturnAddress, Path, <span class="built_in">strlen</span>(Path) + <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取LoadLibraryA函数的地址</span></span><br><span class="line"> HMODULE hModule = <span class="built_in">LoadLibrary</span>(<span class="string">&quot;Kernel32.dll&quot;</span>);<span class="comment">//Kernel32.dll是LoadLibraryA的库</span></span><br><span class="line"> LPTHREAD_START_ROUTINE lpStartAddress = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建远程线程并获取线程句柄</span></span><br><span class="line"> HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, lpStartAddress, pReturnAddress, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//等待线程事件</span></span><br><span class="line"> <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//防止内存泄漏</span></span><br><span class="line"> <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"> <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">const</span> <span class="keyword">char</span>* a = <span class="string">&quot;D:\\删除文件\\SecondDll\\x64\\Debug\\SecondDll.dll&quot;</span>;</span><br><span class="line"> <span class="built_in">Inject</span>(<span class="number">19604</span>, (<span class="keyword">char</span>*)a);<span class="comment">//第一个参数是进程ID</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弱口令安全实验室2022招新赛</title>
      <link href="/2022/11/10/52/"/>
      <url>/2022/11/10/52/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="弱口令安全实验室2022招新赛"><a href="#弱口令安全实验室2022招新赛" class="headerlink" title="弱口令安全实验室2022招新赛"></a>弱口令安全实验室2022招新赛</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，知道是64位的的无壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221120133729442.png" alt="image-20221120133729442"></p><p>然后放入IDA中去看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221120133815080.png" alt="image-20221120133815080"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221120133856077.png" alt="image-20221120133856077"></p><p>看到这里有一个加密函数，进去看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221120133928938.png" alt="image-20221120133928938"></p><p>左右的移位和格式很容易推断出是一个TEA的魔改，然后再去看看外面的逻辑</p><p>从外头整个函数来看，可以知道这个是先加密v4然后再进行比对再移位来得到right，那么脚本反过来写就行了</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> str2[<span class="number">32</span>] =&#123;<span class="number">46</span>,<span class="number">162</span>,<span class="number">154</span>,<span class="number">93</span>,<span class="number">216</span>,<span class="number">119</span>,<span class="number">117</span>,<span class="number">77</span>,<span class="number">224</span>,<span class="number">124</span>,<span class="number">80</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">165</span>,<span class="number">248</span>,<span class="number">93</span>,<span class="number">109</span>,<span class="number">14</span>,<span class="number">98</span>,<span class="number">20</span>,<span class="number">102</span>,<span class="number">95</span>,<span class="number">216</span>,<span class="number">91</span>,<span class="number">138</span>,<span class="number">93</span>,<span class="number">196</span>,<span class="number">200</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">253</span>,<span class="number">101</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *A,<span class="keyword">unsigned</span> <span class="keyword">int</span> *B)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v0 = A[<span class="number">0</span>],v1 = A[<span class="number">1</span>],delta = <span class="number">221492336</span>,sum = delta &lt;&lt;<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">32</span>;j++)</span><br><span class="line">&#123;   </span><br><span class="line">v1 -= (v0 + sum) ^ (B[<span class="number">2</span>] + <span class="number">16</span> * v0) ^ ((v0 &gt;&gt; <span class="number">5</span>) + B[<span class="number">3</span>]);  </span><br><span class="line">v0 -= (v1 + sum) ^ (*B + <span class="number">16</span> * v1) ^ ((v1 &gt;&gt; <span class="number">5</span>) + B[<span class="number">1</span>]); </span><br><span class="line">sum -= delta; </span><br><span class="line">&#125; </span><br><span class="line">A[<span class="number">0</span>] = v0; A[<span class="number">1</span>] = v1; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v4[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">24</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">8</span> )</span><br><span class="line">&#123; </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j )</span><br><span class="line">&#123;      </span><br><span class="line">v4[j]=<span class="number">0</span>;<span class="comment">//看汇编知道最后的v4得到right！之后值为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">3</span>; k &gt;=<span class="number">0</span> ; --k )</span><br><span class="line">&#123;</span><br><span class="line">    v4[j] = v4[j] &lt;&lt; <span class="number">8</span>;<span class="comment">//交换大小端 </span></span><br><span class="line">v4[j] += str2[<span class="number">4</span> * j + i + k];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">decrypt(&amp;v4[<span class="number">0</span>],key);<span class="comment">//解密4次 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; ++k )</span><br><span class="line">&#123;</span><br><span class="line">    str2[<span class="number">4</span> * j + i + k]=v4[j] ;</span><br><span class="line">v4[j] = v4[j] &gt;&gt; <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str2[i]); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4fe6818d59b8c6ca7cf055b2f12f8d27</span></span><br></pre></td></tr></table></figure><h6 id="PS：脚本中i和第一次的k的循环为什么是做减法是因为前面做了一次移位进行了大小端的呼唤所以就从不同的位进行换值。最后的两个for循环是将它再一次交换大小端换回来得到flag值"><a href="#PS：脚本中i和第一次的k的循环为什么是做减法是因为前面做了一次移位进行了大小端的呼唤所以就从不同的位进行换值。最后的两个for循环是将它再一次交换大小端换回来得到flag值" class="headerlink" title="PS：脚本中i和第一次的k的循环为什么是做减法是因为前面做了一次移位进行了大小端的呼唤所以就从不同的位进行换值。最后的两个for循环是将它再一次交换大小端换回来得到flag值"></a>PS：脚本中i和第一次的k的循环为什么是做减法是因为前面做了一次移位进行了大小端的呼唤所以就从不同的位进行换值。最后的两个for循环是将它再一次交换大小端换回来得到flag值</h6>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[NPUCTF2020]Baby Obfuscation</title>
      <link href="/2022/11/06/51/"/>
      <url>/2022/11/06/51/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NPUCTF2020-Baby-Obfuscation"><a href="#NPUCTF2020-Baby-Obfuscation" class="headerlink" title="[NPUCTF2020]Baby Obfuscation"></a>[NPUCTF2020]Baby Obfuscation</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，64位无壳，放入IDA中看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106192308361.png" alt="image-20221106192308361"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106192552471.png" alt="image-20221106192552471"></p><p>看到十分的复杂，然后里头还有很多的函数调用，那么先一个个分析每个调用的函数在干嘛</p><h5 id="F0X1"><a href="#F0X1" class="headerlink" title="F0X1"></a>F0X1</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106192649528.png" alt="image-20221106192649528"></p><p>欧几里得算法也称为辗转相除法,用于计算两个数的最大公因数，一般用gcd(a,b)来表示a和b的最大公因数。设a、b均为正整数，则gcd(a,b)=gcd(b,a%b)</p><h5 id="F0X2和F0X3"><a href="#F0X2和F0X3" class="headerlink" title="F0X2和F0X3"></a>F0X2和F0X3</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106193901414.png" alt="image-20221106193901414"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106193914357.png" alt="image-20221106193914357"></p><h5 id="F0X4"><a href="#F0X4" class="headerlink" title="F0X4"></a>F0X4</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106193938069.png" alt="image-20221106193938069"></p><p>这个相当于a-b</p><h5 id="F0X5"><a href="#F0X5" class="headerlink" title="F0X5"></a>F0X5</h5><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221106194742540.png" alt="image-20221106194742540"></p><p>这个表示a的b次方(a^b)</p><p>几个重要的函数分析完了，那么接下来分析一下整个在做什么</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">bool</span> v18; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> A0X3[<span class="number">65</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> A0X2[<span class="number">1001</span>]; <span class="comment">// [rsp+130h] [rbp+B0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> A0X1[<span class="number">1001</span>]; <span class="comment">// [rsp+520h] [rbp+4A0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> A0X5[<span class="number">4</span>]; <span class="comment">// [rsp+14D0h] [rbp+1450h]</span></span><br><span class="line">  <span class="keyword">int</span> A0X4[<span class="number">4</span>]; <span class="comment">// [rsp+14E0h] [rbp+1460h]</span></span><br><span class="line">  <span class="keyword">int</span> V0X1; <span class="comment">// [rsp+14F0h] [rbp+1470h]</span></span><br><span class="line">  <span class="keyword">int</span> i_1; <span class="comment">// [rsp+14F4h] [rbp+1474h]</span></span><br><span class="line">  <span class="keyword">int</span> i_0; <span class="comment">// [rsp+14F8h] [rbp+1478h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14FCh] [rbp+147Ch]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">memset</span>(A0X1, <span class="number">0</span>, <span class="number">0xFA0</span>ui64);</span><br><span class="line">  A0X1[<span class="number">1000</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(A0X3, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  A0X3[<span class="number">64</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">64</span>; ++i )</span><br><span class="line">    A0X3[i] = i + <span class="number">1</span>;</span><br><span class="line">  A0X4[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  A0X4[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  A0X4[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">  A0X4[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  A0X5[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  A0X5[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  A0X5[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">  A0X5[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;WHERE IS MY KEY!?&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, A0X2);</span><br><span class="line">  V0X1 = <span class="built_in">strlen</span>(A0X2);</span><br><span class="line">  v3 = F0X1(A0X3[i_0], A0X3[i_0]);              <span class="comment">// v3=A0X3[i_0]</span></span><br><span class="line">  <span class="keyword">for</span> ( i_0 = v3 / A0X3[i_0]; i_0 &lt;= V0X1; ++i_0 )<span class="comment">// for(i_0=1;i_0&lt;=15;++i_0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (A0X3[i_0] + A0X3[i_0 + <span class="number">1</span>]) * (A0X3[i_0] + A0X3[i_0 + <span class="number">1</span>]);<span class="comment">// v4=(2(i_0)+3)^2</span></span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= F0X5(<span class="number">2</span>, <span class="number">2</span>) * A0X3[i_0] * A0X3[i_0 + <span class="number">1</span>] )<span class="comment">// v4&gt;=4*(i_0+1)*(i_0+2)恒满足</span></span><br><span class="line">    &#123;</span><br><span class="line">      v5 = ~A0X2[F0X4(i_0, <span class="number">1</span>)];                 <span class="comment">// v5=~A0X2[i_0-1]</span></span><br><span class="line">      v6 = F0X4(i_0, <span class="number">1</span>);                        <span class="comment">// v6=i_0-1</span></span><br><span class="line">      A0X1[i_0] = ~(v5 + A0X4[v6 % F0X5(<span class="number">2</span>, <span class="number">2</span>)]);<span class="comment">// A0x1[i_0]=~(~A0X2[i_0-1]+A0X4[i_0-1]%4)</span></span><br><span class="line">    &#125;</span><br><span class="line">    v7 = F0X1(A0X3[i_0], A0X3[i_0 + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt; F0X1(A0X3[i_0 + <span class="number">1</span>], ~(~A0X3[i_0 + <span class="number">1</span>] + A0X3[i_0])) )<span class="comment">// 不成立</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = A0X1[i_0];</span><br><span class="line">      v9 = F0X4(i_0, <span class="number">1</span>);</span><br><span class="line">      A0X1[i_0] = ~(~v8 + A0X3[v9 % F0X5(<span class="number">2</span>, <span class="number">2</span>)]) * v8;</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = A0X3[i_0 + <span class="number">1</span>];                        <span class="comment">// v10=i_0+2</span></span><br><span class="line">    v11 = F0X5(<span class="number">2</span>, <span class="number">1</span>) * v10;                     <span class="comment">// v11=2*(i_0)+2</span></span><br><span class="line">    v12 = A0X3[i_0];                            <span class="comment">// v12=i_0+1</span></span><br><span class="line">    v13 = F0X5(<span class="number">2</span>, <span class="number">1</span>);                           <span class="comment">// v13=2</span></span><br><span class="line">    v14 = F0X1(v12 * v13, v11);                 <span class="comment">// v14=gcd(2*(i_0+1),2*(i_0)+2) ps:gcd表示求最大公因数</span></span><br><span class="line">    v15 = F0X5(<span class="number">2</span>, <span class="number">1</span>);                           <span class="comment">// v15=2</span></span><br><span class="line">    <span class="keyword">if</span> ( v14 == v15 * F0X1(A0X3[i_0], A0X3[i_0 + <span class="number">1</span>]) )<span class="comment">// 成立</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = F0X4(i_0, <span class="number">1</span>);                       <span class="comment">// v16=i_0-1</span></span><br><span class="line">      A0X1[i_0] ^= A0X4[v16 % F0X5(<span class="number">2</span>, <span class="number">2</span>)];      <span class="comment">// A0X1^=A0X4[(i_0-1)%4]</span></span><br><span class="line">    &#125;</span><br><span class="line">    v17 = F0X5(V0X3, A0X3[i_0]);</span><br><span class="line">    v18 = v17 &lt; A0X3[i_0] + <span class="number">1</span>;                  <span class="comment">// v18=0</span></span><br><span class="line">    v19 = F0X5(<span class="number">2</span>, <span class="number">4</span>);                           <span class="comment">// v19=16</span></span><br><span class="line">    <span class="keyword">if</span> ( F0X3(v19 &gt;= i_0, v18) )                <span class="comment">// 不成立</span></span><br><span class="line">    &#123;</span><br><span class="line">      v20 = ~A0X2[F0X4(i_0, <span class="number">1</span>)];</span><br><span class="line">      v21 = F0X4(i_0, <span class="number">1</span>);</span><br><span class="line">      A0X1[i_0] ^= ~(v20 + A0X4[v21 % F0X5(<span class="number">2</span>, <span class="number">2</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    v22 = F0X5(<span class="number">2</span>, <span class="number">3</span>);                           <span class="comment">// v22=8</span></span><br><span class="line">    v23 = F0X1(A0X3[i_0], A0X3[i_0]);</span><br><span class="line">    A0X1[i_0] *= v22 + F0X5(<span class="number">2</span>, v23 / A0X3[i_0]);<span class="comment">// A0X1[i_0]*=8+2^1</span></span><br><span class="line">  &#125;</span><br><span class="line">  v24 = F0X5(<span class="number">2</span>, <span class="number">4</span>);                             <span class="comment">// v24=16</span></span><br><span class="line">  <span class="keyword">if</span> ( F0X4(v24, <span class="number">1</span>) != V0X1 )                   <span class="comment">// strlen=15</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">  v25 = F0X1(A0X3[i_1], A0X3[i_1]);</span><br><span class="line">  <span class="keyword">for</span> ( i_1 = v25 / A0X3[i_1]; i_1 &lt;= V0X1; ++i_1 )<span class="comment">// if(i_1=1;i_1&lt;=15;++i_1)</span></span><br><span class="line">  &#123;</span><br><span class="line">    v26 = A0X1[i_1];</span><br><span class="line">    <span class="keyword">if</span> ( v26 == F0X4(A0X6[i_1], <span class="number">1</span>) / <span class="number">10</span> )</span><br><span class="line">      ++V0X2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( V0X2 == V0X1 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nPASS&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_23:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nDENIED&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PS-这些成立和不成立的语句，可以通过赋值进行判断"><a href="#PS-这些成立和不成立的语句，可以通过赋值进行判断" class="headerlink" title="PS:这些成立和不成立的语句，可以通过赋值进行判断"></a>PS:这些成立和不成立的语句，可以通过赋值进行判断</h6><p>分析完整段后可以知道要PASS的话就需要if ( v26 == F0X4(A0X6[i_1], 1) / 10 )这个语句成立，也就是说根A0X1数组有关，看了整个操作，能够成立的根A0X1有关的也就只有这三句</p><p>1.A0X1[i_0] <em>= v22 + F0X5(2, v23 / A0X3[i_0]);// A0X1[i_0]</em>=8+2^1</p><p>2.A0X1[i_0] ^= A0X4[v16 % F0X5(2, 2)];</p><p>3.A0X1[i_0] = ~(v5 + A0X4[v6 % F0X5(2, 2)]);</p><p>那么可以写脚本了</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> A0X6[]=&#123;<span class="number">0x0</span>, <span class="number">0x1E79</span>, <span class="number">0x1E79</span>, <span class="number">0x2135</span>, <span class="number">0x170D</span>, <span class="number">0x1F41</span>,<span class="number">0x1901</span>, <span class="number">0x2CED</span>,<span class="number">0x11F9</span>, <span class="number">0x2649</span>, <span class="number">0x2581</span>,<span class="number">0x2DB5</span>, <span class="number">0x14B5</span>, <span class="number">0x25E5</span>, <span class="number">0x2A31</span>, <span class="number">0x30D5</span>,<span class="number">0x0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> A0X4[<span class="number">4</span>];</span><br><span class="line">  A0X4[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  A0X4[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  A0X4[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">  A0X4[<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">a=(A0X6[i]<span class="number">-1</span>)/<span class="number">100</span>;<span class="comment">//将得到加密后的A0X1数组与A0X1[i_0] *= v22 + F0X5(2, v23 / A0X3[i_0]);合并就是÷100</span></span><br><span class="line">a^=A0X4[(i<span class="number">-1</span>)%<span class="number">4</span>];</span><br><span class="line">a+=A0X4[(i<span class="number">-1</span>)%<span class="number">4</span>];</span><br><span class="line">flag[i<span class="number">-1</span>]=a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NPUCTF&#123;0bfu5er&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC加密技术</title>
      <link href="/2022/10/30/50/"/>
      <url>/2022/10/30/50/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SMC加密技术"><a href="#SMC加密技术" class="headerlink" title="SMC加密技术"></a>SMC加密技术</h3><p>最近做了个关于SMC加密的题目，这里打算讲讲这个算法</p><h5 id="首先什么是SMC加密它又能干什么呢？"><a href="#首先什么是SMC加密它又能干什么呢？" class="headerlink" title="首先什么是SMC加密它又能干什么呢？"></a>首先什么是SMC加密它又能干什么呢？</h5><p>SMC技术可以在一段代码执行之前对它进行修改，通过这一特性它就能实现将代码以加密的形式保存在可执行文件中，并在运行程序时动态解密。也就是说它是针对静态分析的。如果想要解开加密一般只能动态的跟踪或者用静态去找到加密部分进行解析。</p><h5 id="分辨SMC的几个特点："><a href="#分辨SMC的几个特点：" class="headerlink" title="分辨SMC的几个特点："></a>分辨SMC的几个特点：</h5><p>1.#pragma code_seg(“.XXXX”) 是一条预编译指令，作用是告诉链接器下面的代码放入 .XXXX代码段中，对敏感代码进行保护</p><p>2.遍历找区段名字，然后进行先进行解密操作</p><p>3.最后进行异或和移位加密算法</p><h5 id="SMC加密的加密实现步骤："><a href="#SMC加密的加密实现步骤：" class="headerlink" title="SMC加密的加密实现步骤："></a>SMC加密的加密实现步骤：</h5><p>1.首先对函数代码进行解密</p><p>2.调用这个函数</p><p>3.对代码进行再加密</p><h6 id="PS：那么SMC就很容易去实现多层嵌套加密，也就是说需要解密第一个得到第二个函数再进行解密一直解密到最后一层"><a href="#PS：那么SMC就很容易去实现多层嵌套加密，也就是说需要解密第一个得到第二个函数再进行解密一直解密到最后一层" class="headerlink" title="PS：那么SMC就很容易去实现多层嵌套加密，也就是说需要解密第一个得到第二个函数再进行解密一直解密到最后一层"></a>PS：那么SMC就很容易去实现多层嵌套加密，也就是说需要解密第一个得到第二个函数再进行解密一直解密到最后一层</h6><h5 id="SMC解密方法："><a href="#SMC解密方法：" class="headerlink" title="SMC解密方法："></a>SMC解密方法：</h5><p>1.首先找到被做为敏感代码保护的区段进行自解密</p><p>2.得到新的加密函数，再一次解密直到解完所有层的加密</p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[BSidesSF2019]blink</title>
      <link href="/2022/10/30/49/"/>
      <url>/2022/10/30/49/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-SCTF2019-creakme"><a href="#BUU-SCTF2019-creakme" class="headerlink" title="BUU[SCTF2019]creakme"></a>BUU[SCTF2019]creakme</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>收先查壳，32位无壳，放入对应的IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030163047444.png" alt="image-20221030163047444"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030163115377.png" alt="image-20221030163115377"></p><p>首先看到第28行的函数直接进去看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030163213705.png" alt="image-20221030163213705"></p><p>是一个判断，还有一个退出调试，这里可能会涉及到反调试</p><p>这里看到了一个.SCTF，然后后面还有一个if的判断，这里可能回事SMC加密的遍历找区段名字</p><p>这里不太确定伪C具体想表达什么就去看了一下汇编代码</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030164054700.png" alt="image-20221030164054700"></p><p>发现这里有一部分完全不在伪C代码里头，然后去看看这里是干嘛的</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030164145749.png" alt="image-20221030164145749"></p><p>果然是反调试，然后看到后面的402424这里面娶了一个函数，点进去看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030164532301.png" alt="image-20221030164532301"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030164612096.png" alt="image-20221030164612096"></p><p>发现这是一个加密函数，这里就能够完全确认是SMC加密了，这一部调用的是异或的这一部分(根据SMC加密的原理可以推导出，加密函数也自带解密功能)</p><p>然后去到第二个函数sub_4024A0这里去看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030170021100.png" alt="image-20221030170021100"></p><p>这里有反调试，进去404000中去看看这个返回值是什么</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030170103285.png" alt="image-20221030170103285"></p><p>发现是一大段的数据，而且这里的数据都是.SCTF段的，那么这个返回值就很有可能是异或部分的返回值了，然后这里用IDAPython来直接获取数据进行解密</p><h3 id="脚本1"><a href="#脚本1" class="headerlink" title="脚本1"></a>脚本1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addstr = <span class="number">0x404000</span> </span><br><span class="line">addend = <span class="number">0x405000</span> </span><br><span class="line">key = [<span class="number">0x73</span>, <span class="number">0x79</span>, <span class="number">0x63</span>, <span class="number">0x6C</span>, <span class="number">0x6F</span>, <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x79</span>, <span class="number">0x63</span>, <span class="number">0x6C</span>, <span class="number">0x6F</span>, <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x72</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addend-addstr): </span><br><span class="line">  ida_bytes.patch_byte(addstr+i,~(get_wide_byte(addstr+i)^key[i%<span class="built_in">len</span>(key)]))</span><br></pre></td></tr></table></figure><p>转换后的内容</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030172518063.png" alt="image-20221030172518063"></p><p>将这些按C进行转换，转换成汇编语言，然后声明一下就得到新的内容</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030172639912.png" alt="image-20221030172639912"></p><p>这里就是SMC的移位的加密部分(很明显这里应该就是简单的逐个-1然后逆序存储)，解开差不多就出来了</p><h3 id="脚本2"><a href="#脚本2" class="headerlink" title="脚本2"></a>脚本2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,i;</span><br><span class="line"><span class="keyword">char</span> b[]=<span class="string">&quot;&gt;pvfqYc,4tTc2UxRmlJ,sB&#123;Fh4Ck2:CFOb4ErhtIcoLo&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">a=<span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a;++i)</span><br><span class="line">&#123;</span><br><span class="line">--b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)  <span class="comment">//由于数组是从0开始储存的，所以j=a-1</span></span><br><span class="line">    &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b[j]);</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=</span></span><br></pre></td></tr></table></figure><p>这里很明显能知道是一个加密，但是不知道是什么加密，然后用IDA插件去看看是什么加密</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030173858742.png" alt="image-20221030173858742"></p><p>可以看到是AES加密，但是不晓得偏移量和密钥是什么，然后看到后面还有个base64，去定位一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030173828082.png" alt="image-20221030173828082"></p><p>猜测这里会是偏移量和密钥，然后去解密一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221030174259786.png" alt="image-20221030174259786"></p><p>得到flag{Ae3_C8c_I28_pKcs79ad4}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[BSidesSF2019]blink</title>
      <link href="/2022/10/19/48/"/>
      <url>/2022/10/19/48/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-BSidesSF2019-blink"><a href="#BUU-BSidesSF2019-blink" class="headerlink" title="BUU[BSidesSF2019]blink"></a>BUU[BSidesSF2019]blink</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先拿到的是apk文件然后去查壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221019201001524.png" alt="image-20221019201001524"></p><p>接着放入jadx-gui中去分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221019201042858.png" alt="image-20221019201042858"></p><p>24行是说用base64解密22行的内容，24 26是将base64解密后的东西转换成图片</p><p>关于setImageBitmap函数：Android中高效的显示图片 - 加载大图(setImageBitmap)</p><p>接着用工具进行解码</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221019201448927.png" alt="image-20221019201448927"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221019201503921.png" alt="image-20221019201503921"></p><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[SUCTF2018]babyre</title>
      <link href="/2022/10/16/47/"/>
      <url>/2022/10/16/47/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-SUCTF2018-babyre"><a href="#BUU-SUCTF2018-babyre" class="headerlink" title="BUU[SUCTF2018]babyre"></a>BUU[SUCTF2018]babyre</h2><p>分析</p><p>首先查壳，64位无壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221016204933332.png" alt="image-20221016204933332"></p><p>然后放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221016205214352.png" alt="image-20221016205214352"></p><p>这里的加密部分就是简单的while语句里头的，最后的输出是v6也就是我们的flag</p><p>脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v4[<span class="number">300</span>];</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v9,v10;</span><br><span class="line">  v4[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  v4[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">  v4[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">  v4[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">  v4[<span class="number">5</span>] = <span class="number">7</span>;</span><br><span class="line">  v4[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v4[<span class="number">7</span>] = <span class="number">5</span>;</span><br><span class="line">  v4[<span class="number">8</span>] = <span class="number">10</span>;</span><br><span class="line">  v4[<span class="number">9</span>] = <span class="number">11</span>;</span><br><span class="line">  v4[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">  v4[<span class="number">11</span>] = <span class="number">9</span>;</span><br><span class="line">  v4[<span class="number">12</span>] = <span class="number">14</span>;</span><br><span class="line">  v4[<span class="number">13</span>] = <span class="number">15</span>;</span><br><span class="line">  v4[<span class="number">14</span>] = <span class="number">12</span>;</span><br><span class="line">  v4[<span class="number">15</span>] = <span class="number">13</span>;</span><br><span class="line">  v4[<span class="number">16</span>] = <span class="number">16</span>;</span><br><span class="line">  v4[<span class="number">17</span>] = <span class="number">19</span>;</span><br><span class="line">  v4[<span class="number">18</span>] = <span class="number">16</span>;</span><br><span class="line">  v4[<span class="number">19</span>] = <span class="number">17</span>;</span><br><span class="line">  v4[<span class="number">20</span>] = <span class="number">20</span>;</span><br><span class="line">  v4[<span class="number">21</span>] = <span class="number">23</span>;</span><br><span class="line">  v4[<span class="number">22</span>] = <span class="number">22</span>;</span><br><span class="line">  v4[<span class="number">23</span>] = <span class="number">19</span>;</span><br><span class="line">  v4[<span class="number">24</span>] = <span class="number">28</span>;</span><br><span class="line">  v4[<span class="number">25</span>] = <span class="number">25</span>;</span><br><span class="line">  v4[<span class="number">26</span>] = <span class="number">30</span>;</span><br><span class="line">  v4[<span class="number">27</span>] = <span class="number">31</span>;</span><br><span class="line">  v4[<span class="number">28</span>] = <span class="number">28</span>;</span><br><span class="line">  v4[<span class="number">29</span>] = <span class="number">25</span>;</span><br><span class="line">  v4[<span class="number">30</span>] = <span class="number">26</span>;</span><br><span class="line">  v4[<span class="number">31</span>] = <span class="number">31</span>;</span><br><span class="line"> <span class="built_in">memcpy</span>(&amp;v4[<span class="number">32</span>], <span class="string">&quot;$!\&quot;&#x27;$!\&quot;#().+$-&amp;/81:;4=&gt;7092;&lt;567HIBBDDFGHIJJMMONPPRSUTVWYYZ[\\]^^``ccdeggiikklmnnpprstuwwxy&#123;&#123;&#125;&#125;&quot;</span>, <span class="number">94</span>);</span><br><span class="line">    v4[<span class="number">126</span>] = <span class="number">0x7F</span>;</span><br><span class="line">    v4[<span class="number">127</span>] = <span class="number">0x7F</span>;</span><br><span class="line">    v4[<span class="number">128</span>] = <span class="number">0x81</span>;</span><br><span class="line">    v4[<span class="number">129</span>] = <span class="number">0x81</span>;</span><br><span class="line">    v4[<span class="number">130</span>] = <span class="number">0x83</span>;</span><br><span class="line">    v4[<span class="number">131</span>] = <span class="number">0x83</span>;</span><br><span class="line">    v4[<span class="number">132</span>] = <span class="number">0x8C</span>;</span><br><span class="line">    v4[<span class="number">133</span>] = <span class="number">0x8D</span>;</span><br><span class="line">    v4[<span class="number">134</span>] = <span class="number">0x8E</span>;</span><br><span class="line">    v4[<span class="number">135</span>] = <span class="number">0x8F</span>;</span><br><span class="line">    v4[<span class="number">136</span>] = <span class="number">0x88</span>;</span><br><span class="line">    v4[<span class="number">137</span>] = <span class="number">0x89</span>;</span><br><span class="line">    v4[<span class="number">138</span>] = <span class="number">0x8A</span>;</span><br><span class="line">    v4[<span class="number">139</span>] = <span class="number">0x8B</span>;</span><br><span class="line">    v4[<span class="number">140</span>] = <span class="number">0x8C</span>;</span><br><span class="line">    v4[<span class="number">141</span>] = <span class="number">0x8D</span>;</span><br><span class="line">    v4[<span class="number">142</span>] = <span class="number">0x8E</span>;</span><br><span class="line">    v4[<span class="number">143</span>] = <span class="number">0x87</span>;</span><br><span class="line">    v4[<span class="number">144</span>] = <span class="number">152</span>;</span><br><span class="line">    v4[<span class="number">145</span>] = <span class="number">-111</span>;</span><br><span class="line">    v4[<span class="number">146</span>] = <span class="number">0x92</span>;</span><br><span class="line">    v4[<span class="number">147</span>] = <span class="number">147</span>;</span><br><span class="line">    v4[<span class="number">148</span>] = <span class="number">0x94</span>;</span><br><span class="line">    v4[<span class="number">149</span>] = <span class="number">0x95</span>;</span><br><span class="line">    v4[<span class="number">150</span>] = <span class="number">0x96</span>;</span><br><span class="line">    v4[<span class="number">151</span>] = <span class="number">-105</span>;</span><br><span class="line">    v4[<span class="number">152</span>] = <span class="number">-104</span>;</span><br><span class="line">    v4[<span class="number">153</span>] = <span class="number">-103</span>;</span><br><span class="line">    v4[<span class="number">154</span>] = <span class="number">-102</span>;</span><br><span class="line">    v4[<span class="number">155</span>] = <span class="number">-102</span>;</span><br><span class="line">    v4[<span class="number">156</span>] = <span class="number">-100</span>;</span><br><span class="line">    v4[<span class="number">157</span>] = <span class="number">-100</span>;</span><br><span class="line">    v4[<span class="number">158</span>] = <span class="number">-98</span>;</span><br><span class="line">    v4[<span class="number">159</span>] = <span class="number">-98</span>;</span><br><span class="line">    v4[<span class="number">160</span>] = <span class="number">-96</span>;</span><br><span class="line">    v4[<span class="number">161</span>] = <span class="number">-96</span>;</span><br><span class="line">    v4[<span class="number">162</span>] = <span class="number">-94</span>;</span><br><span class="line">    v4[<span class="number">163</span>] = <span class="number">-94</span>;</span><br><span class="line">    v4[<span class="number">164</span>] = <span class="number">-92</span>;</span><br><span class="line">    v4[<span class="number">165</span>] = <span class="number">-92</span>;</span><br><span class="line">    v4[<span class="number">166</span>] = <span class="number">-90</span>;</span><br><span class="line">    v4[<span class="number">167</span>] = <span class="number">-90</span>;</span><br><span class="line">    v4[<span class="number">168</span>] = <span class="number">-88</span>;</span><br><span class="line">    v4[<span class="number">169</span>] = <span class="number">-88</span>;</span><br><span class="line">    v4[<span class="number">170</span>] = <span class="number">-86</span>;</span><br><span class="line">    v4[<span class="number">171</span>] = <span class="number">-86</span>;</span><br><span class="line">    v4[<span class="number">172</span>] = <span class="number">-84</span>;</span><br><span class="line">    v4[<span class="number">173</span>] = <span class="number">-84</span>;</span><br><span class="line">    v4[<span class="number">174</span>] = <span class="number">-82</span>;</span><br><span class="line">    v4[<span class="number">175</span>] = <span class="number">-82</span>;</span><br><span class="line">    v4[<span class="number">176</span>] = <span class="number">0xB0</span>;</span><br><span class="line">    v4[<span class="number">177</span>] = <span class="number">0xB1</span>;</span><br><span class="line">    v4[<span class="number">178</span>] = <span class="number">178</span>;</span><br><span class="line">    v4[<span class="number">179</span>] = <span class="number">179</span>;<span class="comment">//这里将v4与v5连起来，首先它们共处一个寄存器，其次我发现如果单独用一个v4或者v5是不可得到flag的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">0x10000</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="number">0x1F</span>);</span><br><span class="line">flag[<span class="number">30</span>]=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">30</span>])</span><br><span class="line">&#123;</span><br><span class="line">--flag[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">22</span>;i;flag[i]|=v10&lt;&lt;flag[<span class="number">30</span>])</span><br><span class="line">&#123;</span><br><span class="line">v9=v4[<span class="number">22</span>*flag[<span class="number">30</span>]+--i];</span><br><span class="line">v10=(v9&gt;&gt;((k&gt;&gt;(<span class="number">2</span>*flag[<span class="number">30</span>]))&amp;<span class="number">3</span>))&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; flag[<span class="number">1</span>] == <span class="string">&#x27;U&#x27;</span> &amp;&amp; flag[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; flag[<span class="number">3</span>] == <span class="string">&#x27;T&#x27;</span> &amp;&amp; flag[<span class="number">4</span>] == <span class="string">&#x27;F&#x27;</span>)<span class="comment">//这里根据 sub_140011159(std::cout, &quot;flag format: SUCTF&#123;xxxxxxxxxxxxxxx&#125;\n&quot;);得出的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">22</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SUCTF&#123;Flag_8i7244980f&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020华南师大CTF新生赛maze</title>
      <link href="/2022/10/08/9/"/>
      <url>/2022/10/08/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2020华南师大CTF新生赛maze"><a href="#2020华南师大CTF新生赛maze" class="headerlink" title="2020华南师大CTF新生赛maze"></a>2020华南师大CTF新生赛maze</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415193004979.png" alt="image-20220415193004979"></p><p>发现这是没有壳32位的，然后把它方如ida去分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415193101638.png" alt="image-20220415193101638"></p><p>很容易知道这个是找最短路径的迷宫，于是我们去CreateMap()这个函数去看看这个迷宫是怎样的</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415193340808.png" alt="image-20220415193340808"></p><p>我一开始不知道v2&amp;1然后再v2&gt;&gt;=1是干嘛的，然后去问了一下一个CAS的朋友，才知道这个v2&amp;1是奇数就是它本身，如果不是奇数就是0。这个v2&gt;&gt;=1是除2，向下取整数的意思，判断这个位置是不是1。这里大致就是将num的元素都转换位2进制的意思</p><p>那么下一步就是找到所有的v2然后将其转换成16*16的表，这里就直接IDA动态调试，在这里for循环这里下一个断点，然后去看值</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415194153985.png" alt="image-20220415194153985"></p><p>这是第一个的v2，每到一次这里</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415194245658.png" alt="image-20220415194245658"></p><p>就是一个新的v2的值（停在v1=1的时候，才会出现新v2）后将其转化成表格</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">0xffff</span>,<span class="number">0x83F7</span>,<span class="number">0xBBF7</span>,<span class="number">0xBB17</span>,<span class="number">0xBB57</span>,<span class="number">0xB857</span>,<span class="number">0xBF57</span>,<span class="number">0xBF17</span>,<span class="number">0xBFB7</span>,<span class="number">0xBFB7</span>,<span class="number">0x8611</span>,<span class="number">0xF7B5</span>,<span class="number">0xF7B5</span>,<span class="number">0x7B4</span>,<span class="number">0xFF87</span>,<span class="number">0xFFFF</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    a = <span class="built_in">bin</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>原本迷宫倒数第三行的0x7B4为<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415201720434.png" alt="image-20220415201720434"></p><p>然后根据二进制，填充一下得到下图</p><p>那么得到迷宫</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415200833555.png" alt="image-20220415200833555"></p><p>然后去check函数找找有没有操作的规则</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415201831928.png" alt="image-20220415201831928"></p><p>由v6和v7的初始值，以及增减容易得出</p><p>有四个方向k，h，j，l</p><p>v6控制行，v7控制列<br>l为右移一个<br>h左移一个<br>k上移一个<br>j下移一个</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>最后去走迷宫</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220415202049313.png" alt="image-20220415202049313"></p><p>然后得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;llllkkkhhhkkkkkkkkklllljjjjllljjljjjjjjjlllkkkklljjjl&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[HDCTF2019]Maze</title>
      <link href="/2022/10/08/8/"/>
      <url>/2022/10/08/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="BUU-HDCTF2019-Maze"><a href="#BUU-HDCTF2019-Maze" class="headerlink" title="BUU[HDCTF2019]Maze"></a>BUU[HDCTF2019]Maze</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳发现是upx的壳，然后去壳后放进IDA</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410165926336.png" alt="image-20220410165926336"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410162138682.png" alt="image-20220410162138682"></p><p>发现这里有报红，可以推测这里是有花指令使它出现错误的干扰</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410162246197.png" alt="image-20220410162246197"></p><p>这里的0E8h是对应的call，很显然是个垃圾数据</p><p>我们先把unk_40102F这一部分转换成有效代码（按C）</p><p>然后得到</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410170211299.png" alt="image-20220410170211299"></p><p>这是有效代码了，jnz也正常了，但是我们还是不可以F5，然后我们去上面的主函数部分，声明（按P）一下主函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410170416065.png" alt="image-20220410170416065"></p><p>然后得到了可F5的函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410170502039.png" alt="image-20220410170502039"></p><p>F5进去之后，看到’a’,’w’,’d’,’s’能很容易推断出这是一个迷宫题</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410171920906.png" alt="image-20220410171920906"></p><p>然后我们看到这两个数据，判断出最开始的初始位置（0,7）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410170650035.png" alt="image-20220410170650035"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410171846319.png" alt="image-20220410171846319"></p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>然后我们shift+12去看看迷宫长什么样</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410172834791.png" alt="image-20220410172834791"></p><p>然后很容易发现它是10*7的迷宫（画得丑了些）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220410172904592.png" alt="image-20220410172904592"></p><p>然后我们就走迷宫</p><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ssaaasaassdddw&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019华南师大CTF新生赛maze</title>
      <link href="/2022/10/08/7/"/>
      <url>/2022/10/08/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2019华南师大CTF新生赛maze"><a href="#2019华南师大CTF新生赛maze" class="headerlink" title="2019华南师大CTF新生赛maze"></a>2019华南师大CTF新生赛maze</h4><p>链接：<a href="https://pan.baidu.com/s/1oCQGIbbtCk0RfrrORiE21g">https://pan.baidu.com/s/1oCQGIbbtCk0RfrrORiE21g</a><br>提取码：tuyt </p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>1.首先查壳发现无壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220408205024140.png" alt="image-20220408205024140"></p><p>然后用IDA打开，去查找有用的东西</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220408205149940.png" alt="image-20220408205149940"></p><p>能发现这个flag是与if的那个语句有关，于是去看看check函数在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220408205322287.png" alt="image-20220408205322287"></p><p>然后我们去maze这个地方，看看是些什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220408205428826.png" alt="image-20220408205428826"></p><p>找到地址后，去另一个窗口看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220408205504002.png"></p><p>然后就能知道这是一个13*13的迷宫</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>于是我们可以画出列出迷宫形式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************</span><br><span class="line">*@***********</span><br><span class="line">*-***********</span><br><span class="line">*-***-**-****</span><br><span class="line">*--*****-****</span><br><span class="line">*-***#**-****</span><br><span class="line">*--**----****</span><br><span class="line">**-*****-****</span><br><span class="line">**-****--****</span><br><span class="line">**---**-*****</span><br><span class="line">**-*-----****</span><br><span class="line">**-------****</span><br><span class="line">*************</span><br></pre></td></tr></table></figure><p>这样很容易得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;sssssdsssddsdddwwdwwaaaw&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF xxor</title>
      <link href="/2022/10/08/6/"/>
      <url>/2022/10/08/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="题解BUUCTF-xxor"><a href="#题解BUUCTF-xxor" class="headerlink" title="题解BUUCTF xxor"></a>题解BUUCTF xxor</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先用exe查壳，发现它是64位，于是用IDA打开看看，按F5去看反汇编代码</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164420387.png" alt="image-20220406164420387"></p><p>发现它要输入6次，然后看到下面的for循环，这个上面是把v6的东西都放在dword_601078里头，然后进行sub_400686，于是我们点进去，看看这个函数要干嘛。</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164610798.png" alt="image-20220406164610798"></p><p>然后可以发现这是个魔改的tea加密，然后返回，看最外面怎样得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164704117.png" alt="image-20220406164704117"></p><p>说明要得到flag一定要使这个函数正确，才可以得到flag，那么我们点进去看这个函数在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164743451.png" alt="image-20220406164743451"></p><p>发现他这里刚好给出了我们6个a数组的值，与上面的tea加密的函数里头的v3和v4需要的值相对应，于是就能够知道这个会是一个明文</p><p>那么现在就需要找到密匙就能解出来了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164826272.png" alt="image-20220406164826272"></p><p>在前面可以看到这个a2于是我们点进去，看看它是个什么东西</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220406164919949.png" alt="image-20220406164919949"></p><p>于是我们很容易得到密匙是2 2 3 4</p><p>那么就可以写脚本了</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">6</span>] = &#123; <span class="number">3746099070</span>, <span class="number">550153460</span>, <span class="number">3774025685</span>, <span class="number">1548802262</span>, <span class="number">2652626477</span>, <span class="number">2230518816</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a2[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v3, v4;</span><br><span class="line">    <span class="keyword">int</span> v5;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">        v3 = a[j];</span><br><span class="line">        v4 = a[j + <span class="number">1</span>];</span><br><span class="line">        v5 = <span class="number">1166789954</span>*<span class="number">0x40</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; ++i) &#123;</span><br><span class="line">            v4 -= (v3 + v5 + <span class="number">20</span>) ^ ((v3 &lt;&lt; <span class="number">6</span>) + a2[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">            v3 -= (v4 + v5 + <span class="number">11</span>) ^ ((v4 &lt;&lt; <span class="number">6</span>) + *a2) ^ ((v4 &gt;&gt; <span class="number">9</span>) + a2[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">            v5 -= <span class="number">1166789954</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = v3;</span><br><span class="line">        a[j + <span class="number">1</span>] = v4;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *((<span class="keyword">char</span>*)&amp;a[i]+<span class="number">2</span>) &lt;&lt; *((<span class="keyword">char</span>*)&amp;a[i] +<span class="number">1</span>) &lt;&lt; * ((<span class="keyword">char</span>*)&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始我是用C去输出的，发现会出现乱码，于是去看看别人写的脚本，发现这里涉及到了大小端的输出，这里使用的小端序输出，因为之前的是方便于人去看的大端序输出，所以输出的时候需要反过来，因为这里是64位所以需要输出三次，如果这里是32位就是+1 和a[i]本身。</p><p>最后得到flag</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag&#123;re_is_great!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4</title>
      <link href="/2022/10/08/5/"/>
      <url>/2022/10/08/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h4><h5 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h5><p>RC4是对称加密算法，通过密钥key和S盒生成密钥流，明文逐字节异或S盒，同时S盒也会发生改变。所以加密与解密使用了相同的函数和密钥K。RC4加密的强度主要来源于密钥的安全性，如果密钥泄露，则能直接解密出明文。</p><h5 id="0x02-RC4算法分析"><a href="#0x02-RC4算法分析" class="headerlink" title="0x02 RC4算法分析"></a>0x02 RC4算法分析</h5><p>第一步：初始化s盒然后得到新的s盒（密匙流）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 得到S-box */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i]=i;<span class="comment">//初始化s盒</span></span><br><span class="line">        k[i]=key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[i]和s[j]得到新的s盒</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：用新的s盒去处理后与明文异或得到密文</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 加密与解密*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*Data,<span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t];<span class="comment">//密文=明文^密匙流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h5><p>RC4算法比较简单，主要的3个for循环，前两个256循环为S盒初始化，最后一个循环异或生成密文。可以通过调试初始化代码找到每次RC4的密钥key。</p><p><a href="https://ctttttttt.github.io/2022/04/04/2/">RC4的实战题解</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界mfc逆向-200</title>
      <link href="/2022/10/08/46/"/>
      <url>/2022/10/08/46/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界mfc逆向-200"><a href="#攻防世界mfc逆向-200" class="headerlink" title="攻防世界mfc逆向-200"></a>攻防世界mfc逆向-200</h1><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008162605173.png" alt="image-20221008162605173"></p><p>32位有VM的壳，那就先不用IDA，这是一个exe的程序，点开之后是这个样子</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008162722249.png" alt="image-20221008162722249"></p><p>然后结合题目所给的提示mfc，然后就想到mfc逆向且出来就是一个窗口，然后就用spy++（窗口专用工具）去看一下</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008163600740.png" alt="image-20221008163600740"></p><p>然后拖动这个到程序中的地方</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008163626932.png" alt="image-20221008163626932"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008163709714.png" alt="image-20221008163709714"></p><p>这里的类没有东西，然后换一个地方查找</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008164240495.png" alt="image-20221008164240495"></p><p>这里出现了类，然后打开xspy（mfc逆向工具去）去看看</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008164428080.png" alt="image-20221008164428080"></p><p>同样是使用这个东西去查找</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008164518375.png" alt="image-20221008164518375"></p><p>然后对下面的东西去分析</p><p>WM_SYSCOMMAND(0112)：当用户从 <strong>“窗口</strong> ”菜单中选择命令时，窗口会收到此消息， (以前称为系统或控件菜单) ，或者当用户选择最大化按钮、最小化按钮、还原按钮或关闭按钮时</p><p>WM_PAINT(000f)：当系统或其他应用程序发出绘制应用程序窗口部分的请求时，将发送 <strong>WM_PAINT</strong> 消息</p><p>WM_QUERYDRAGICON(0037)：发送到最小化的 (标志性的) 窗口。 窗口将由用户拖动，但没有为其类定义的图标。 应用程序可以将句柄返回到图标或游标。 当用户拖动图标时，系统会显示此光标或图标</p><p>然后那个0464并没有被定义，那就给它发消息，看看它会给个什么回复</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HWND h = ::FindWindow(<span class="literal">NULL</span>, <span class="string">&quot;Flag就在控件里&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (h)</span><br><span class="line">    &#123;</span><br><span class="line">        SendMessage(h, <span class="number">0x464</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);<span class="comment">//这个0x464是特殊的常量别的没有</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关与如何写这个脚本</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008165952619.png" alt="image-20221008165952619"></p><p>这个是查找窗口</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008170117948.png" alt="image-20221008170117948"></p><p>这个是发送消息</p><p>运行完之后就会有这个结果</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008170329299.png" alt="image-20221008170329299"></p><p>然后知道这个是Des加密还知道了密匙，然后之前它的类应该就是密文了，开始解密</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20221008170541115.png" alt="image-20221008170541115"></p><p>得到flag：thIs_Is_real_kEy_hahaaa</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去花指南</title>
      <link href="/2022/10/08/45/"/>
      <url>/2022/10/08/45/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="去花指南"><a href="#去花指南" class="headerlink" title="去花指南"></a>去花指南</h1><p>首先，关于花指令的问题我在做题中有自己的一些看法与解题的方法，然后最近一直有朋友问我如何去花，这里就给大家分享一下我的经验吧！</p><p>这里我用一个花指令比较多的题目边讲解，边教大家（也许有的地方也不对，我太菜了）</p><p>2022长城杯 <a href="C:\Users\政政真厉害\Desktop\Revers\rabbit_hole_29a852aae142e5f92a2c2ee595f4fabc\rabbit_hole_release.exe">rabbit_hole_release.exe</a> </p><p>一般我做题都是从main函数开始的</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220923213054307.png" alt="image-20220923213054307"></p><p>这里如果看到了这个报红的地方就双击它，然后就会带你到那个错误的地方，接着你看到一些跳转指令比如JZ JNZ之类的，这里是jmp也是跳转指令，后面有一个ptr loc_401709+1，一般情况下就直接nop掉它</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220923213329005.png" alt="image-20220923213329005"></p><p>然后这个题目的主函数部分有很多数据没有变成汇编的形式</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924010826918.png" alt="image-20220924010826918"></p><p>遇到这种情况一般都是按C去强制转换成汇编代码，这题我是将整个main函数的内容全选然后按C去转换</p><p>然后就会出现新的花指令，你就重复之前的步骤一个个nop掉，然后选中整个main函数按P进行声明再F5看一下伪C代码</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924011455853.png" alt="image-20220924011455853"></p><p>这里有报红，你就单击爆红的地方然后按Tap键去找到它的汇编代码</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924011557397.png" alt="image-20220924011557397"></p><p>这是0x401783处的报错，首先看到这个不要直接nop，先按C看能否转换</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924011700612.png" alt="image-20220924011700612"></p><p>这里发现是可以进行转换的，然后再按F5返回伪C代码</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924011733155.png" alt="image-20220924011733155"></p><p>这里就会出现新的地方，然后一直重复刚刚的步骤。当遇到不能按C的时候就可以考虑去nop掉了</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924011947563.png" alt="image-20220924011947563"></p><p>把这些基本处理好之后就是这样</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924012159876.png" alt="image-20220924012159876"></p><p>但是，要注意刚刚弄的还只是主函数部分，现在去看看其他的函数是否存在花，如果遇到花就改掉</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924012326751.png" alt="image-20220924012326751"></p><p>这里发现一个部分，前面有一个retn表示结束，后面的又是数据，这里就将又retn的函数进行声明，先不要管那些数据，你会有意想不到的收获</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924013502227.png" alt="image-20220924013502227"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924013512699.png" alt="image-20220924013512699"></p><p>用同样的方法能够把其他的函数也复原，这题我的博客有具体做法，感兴趣的朋友可以去看看。这些是一些大概的去花，当然这里我没去的很好，不过还是能做出题来的，有太久没做了，有的地方忘了</p><p>在一些特定的情况下会出现另一种错误，就是字节码的掩盖，具体可以看我博客中[SCTF2019]babyre的题解，这时候就不能Assemble直接改指令了，而是用</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220924014306269.png" alt="image-20220924014306269"></p><p>里的change byte进行修改</p><p>文章比较减短，也不晓得说明白没（表达能力就这样），如果有什么疑问可以发邮箱给我<a href="mailto:&#x31;&#51;&#x31;&#53;&#55;&#x31;&#x39;&#x35;&#x36;&#x33;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x31;&#51;&#x31;&#53;&#55;&#x31;&#x39;&#x35;&#x36;&#x33;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 美团MTCTF初赛 small</title>
      <link href="/2022/10/08/44/"/>
      <url>/2022/10/08/44/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022-美团MTCTF初赛-small"><a href="#2022-美团MTCTF初赛-small" class="headerlink" title="2022 美团MTCTF初赛 small"></a>2022 美团MTCTF初赛 small</h1><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，知道是64为无壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220921202048519.png" alt="image-20220921202048519"></p><p>然后放入相对应的IDA，但是这里要注意一下要以Binary的方式打开，我之前用7.7版本尝试直接打开文件，发现解析不出来，这里建议用二进制方式打开</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220921202232501.png" alt="image-20220921202232501"></p><p>然后就会看到一堆数据</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220921202310150.png" alt="image-20220921202310150"></p><p>这里我有直接全选然后按C转换为汇编代码过，但是发现会出错，并且找不到我想要的，然后去观察</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220921202451223.png" alt="image-20220921202451223"></p><p>这个0C3代表的是ret也就是一个结束，然后就从6A开始选中去按C</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220921202552503.png" alt="image-20220921202552503"></p><p>发现这个unk_64函数有点点不对，然后就选中68，69这两行然后强行转换为汇编代码就成了一个对的函数</p><p>然后进行分析一下这个函数在干嘛</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220922193113882.png" alt="image-20220922193113882"></p><p>这里的shl的移位和4，5的出现，能联想到这是一个tea的魔改，然后这里循环是23次，我写脚本发现不对，然后就声明了一下函数才知道是循环了35次（可能前面按C变成汇编代码的时候弄错了才导致循环次数不对，但也不怎么影响）</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220922193305357.png" alt="image-20220922193305357"></p><p>接着就是去找密文</p><p>这里找密文其实挺艰难的（对我来说），首先在魔改tea函数的后面还有几个函数</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220922211350452.png" alt="image-20220922211350452"></p><p>这个sub_C0函数有一个跳转与loc_EA函数有关，这两个函数好像没什么多大用，然后F1行这里有一个endp代表结束了。这里F3行开始后面的汇编代码都很不常见，还有很多花，我就把它们全选按U转换成了数据</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220922211703336.png" alt="image-20220922211703336"></p><p>然后有一个good，那么就猜测good后面的应该是所需要的密文了，然后就是写脚本了</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], i;</span><br><span class="line"><span class="keyword">uint32_t</span> delta = <span class="number">0x67452301</span>,sum = delta*num_rounds; <span class="comment">//sum是之前加了n次的所以这里是乘以n </span></span><br><span class="line"><span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;num_rounds; i++) </span><br><span class="line">&#123;</span><br><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0; </span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_data</span><span class="params">(<span class="keyword">uint32_t</span> * v,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v[i] &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> v[] = &#123;<span class="number">0xde087143</span>,<span class="number">0xc4f91bd2</span>,<span class="number">0xdaf6dadc</span>,<span class="number">0x6d9ed54c</span>,<span class="number">0x75eb4ee7</span>,<span class="number">0x5d1ddc04</span>,<span class="number">0x511b0fd9</span>,<span class="number">0x51dc88fb</span>&#125;;<span class="comment">//密文 (必须是8字节的倍数，且这里要注意大小端序)</span></span><br><span class="line"><span class="keyword">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">0x01</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,<span class="number">0x67</span>&#125;;<span class="comment">//4个32位无符号整数，密钥长度为128组成key </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(v) / <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);<span class="comment">//循环四次 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">decrypt(r,&amp;v[i*<span class="number">2</span>],k);<span class="comment">//一次两个 v[i]和v[i+1]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解密后明文字符：&quot;</span>);</span><br><span class="line">dump_data(v,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;327a6c4304ad5938eaf0efb6cc3e53dc&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>比赛的时候是全部按C没有去想那么多，如果有去想字节码估计还是能做出来的。还有就是密文的找到方式我也不知道还有没有其他更好的方法，希望有大佬指点！！！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Windows_Reverse1</title>
      <link href="/2022/10/08/43/"/>
      <url>/2022/10/08/43/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="攻防世界Windows-Reverse1"><a href="#攻防世界Windows-Reverse1" class="headerlink" title="攻防世界Windows_Reverse1"></a>攻防世界Windows_Reverse1</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先去查壳，32位的UPX壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916200028169.png" alt="image-20220916200028169"></p><p>然后脱壳</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916200122181.png" alt="image-20220916200122181"></p><p>接着放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916200207806.png" alt="image-20220916200207806"></p><p>这里的if语句是与v4进行比较，并且发现只有14行是函数，进去看看v6在函数中会与v4有什么关系</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916200247043.png" alt="image-20220916200247043"></p><p>看到12行能知道v4的地址是由a1和v1的地址相减得到的，15行这里的v1[v4]相当于是v1+v4也就是a1，对byte_402FF8进行索引，然后去看看byte_402FF8里的东西</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916203322452.png" alt="image-20220916203322452"></p><p>发现是？，里头的东西没有出现</p><p>然后去看了别人的WP知道了ASCII编码表里的可视字符就得是32往后的，所以32以前的都不会被索引到，往下数32的地址</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916203607151.png" alt="image-20220916203607151"></p><p>这里就是内容了，然后写脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [ <span class="number">0x7E</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x7B</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x71</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x63</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, </span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x5F</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x5A</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x51</span>, </span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x46</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x43</span>, <span class="number">0x42</span>, <span class="number">0x41</span>, </span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>, <span class="number">0x3D</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0x3A</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x31</span>, </span><br><span class="line">    <span class="number">0x30</span>, <span class="number">0x2F</span>, <span class="number">0x2E</span>, <span class="number">0x2D</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x27</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, </span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">b=<span class="string">&#x27;DDCTF&#123;reverseME&#125;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(a.index(<span class="built_in">ord</span>(b[i]))+<span class="number">32</span>)<span class="comment">#将b数组里头的转为十进制与a数组里头的内容进行比较，相等就加32位成新的字符</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;ZZ[JX#,9(9,+9QY!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><p>这题不是很难，最重要的是这里有新的知识了！</p><p>这题我看见别人能用OD进行动调，我本来想着先用IDA看看动调怎么样，结果直接给我报错<img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220916210622569.png" alt="image-20220916210622569"></p><p>然后我才晓得了程序开启了ASLR(, 出题人又在程序中采用了绝对地址的方式，所以看不到程序的正常运行，所以要关掉它</p><p>这里用的是StudyPE</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220917105316951.png" alt="image-20220917105316951"></p><p>将这里的8140改成8100即可，这相当于是将这个PE文件的IMAGE_OPTIONAL_HEADER DllCharacteristics中的IMAGE_DLLCHARACTERIS TICS_DYNAMIC_BASE标志去掉</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220917112541098.png" alt="image-20220917112541098"></p><p>然后我用的IDA测试的，发现能调试了。用OD调试也能找到a数组中的东西</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220917112528061.png" alt="image-20220917112528061"></p><p>大佬们tql</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界BABYRE</title>
      <link href="/2022/10/08/42/"/>
      <url>/2022/10/08/42/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="攻防世界BABYRE"><a href="#攻防世界BABYRE" class="headerlink" title="攻防世界BABYRE"></a>攻防世界BABYRE</h3><p>分析</p><p>首先查壳，64位无壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913143752820.png" alt="image-20220913143752820"></p><p>然后放入IDA分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913143844320.png" alt="image-20220913143844320"></p><p>这里的逻辑很简单，大概就是一个简单的异或再去if语句进行判断得出是否正确，但是我发现第12行这里的(*(unsigned int (__fastcall **)(char *))judge)(s)很奇怪，但我也没多去管了就去直接写脚本了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913144510624.png" alt="image-20220913144510624"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913144520967.png" alt="image-20220913144520967"></p><p>发现不对，再回去看看那个奇怪的地方所以这里(*(unsigned int (__fastcall **)(char *))judge)(s)应该这样分析，unsigned int 是judge函数的返回类型（无符号整型），(fastcall )是函数的调用约定，(char *)这个是提取judge的数组头的一连串字符串做函数名。也就是说这不是真正的judge，judge应该是个函数而不是数组，那么我们要去把真正的judge弄出来</p><p>函数调用约定具体可以去看这个：<a href="https://blog.csdn.net/binnygoal/article/details/8592573">(46条消息) __fastcall具体含义_阿齐兹的博客-CSDN博客__fastcall</a></p><p>这里就直接用ida python弄（这也是我初次使用这个东西）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913151109878.png" alt="image-20220913151109878"></p><p>已经改好了，发现还是数组然后就按c转换成数据再按p声明一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913151218385.png" alt="image-20220913151218385"></p><p>这里v3是接在v2后面的，因为都是传到一个寄存器中的</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220913151412550.png" alt="image-20220913151412550"></p><p>接着就能写真正的脚本了</p><p>脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v2[]=<span class="string">&quot;fmcd\x7Fk7d;V`;np&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">14</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v2[i] ^= i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,v2[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;n1c3_j0b&#125;</span></span><br></pre></td></tr></table></figure><p>总结</p><p>对花指令不是很熟悉，没有第一眼认出来，要多练多看。第一次用ida python不熟练，大家可以去看看这个</p><p><a href="https://www.cnblogs.com/iBinary/p/14642662.html">IDAPython入门教程 基于IDA7.5_Python3 第一讲 简介与地址获取 - iBinary - 博客园 (cnblogs.com)</a></p><p>但这都是基础的，还应该多加练习！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022长城杯 rabbit_hole</title>
      <link href="/2022/10/08/41/"/>
      <url>/2022/10/08/41/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2022长城杯-rabbit-hole"><a href="#2022长城杯-rabbit-hole" class="headerlink" title="2022长城杯 rabbit_hole"></a>2022长城杯 rabbit_hole</h2><p>分析</p><p>首先查壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909213320146.png" alt="image-20220909213320146"></p><p>32位无壳，放入IDA中看</p><p>一开始里头好多花指令，直接手动patch掉然后去看主函数（这里去花就不演示了，真的很多，后序有空会发去花的教程）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909220130369.png" alt="image-20220909220130369"></p><p>首先可以看到四个函数，前面两个点进去都很复杂然后就直接去看它的汇编代码</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909213703465.png" alt="image-20220909213703465"></p><p>发现没什么用，然后看到v6和v7是进行长度约束的，得到长度后方便后面动调，接着来算一下长度为多少</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = BitVec(<span class="string">&quot;a&quot;</span>, <span class="number">32</span>)</span><br><span class="line">v6 = ZeroExt(<span class="number">24</span>, Extract(<span class="number">23</span>, <span class="number">16</span>, a)) ^ (</span><br><span class="line">        <span class="number">0x1000193</span> * (ZeroExt(<span class="number">24</span>, Extract(<span class="number">15</span>, <span class="number">8</span>, a)) ^ (<span class="number">0x1000193</span> * (a ^ <span class="number">0x50C5D1F</span>))))</span><br><span class="line">v7 = ZeroExt(<span class="number">24</span>, Extract(<span class="number">31</span>, <span class="number">24</span>, a)) ^ (<span class="number">0x1000193</span> * v6)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(v7 == <span class="number">0x458766D3</span>)</span><br><span class="line">s.add(a != <span class="number">3255316991</span>)</span><br><span class="line"><span class="built_in">print</span>(s.check(), s.model())</span><br><span class="line"><span class="comment">#这里浅用了一下别人的脚本，最近python被我玩坏了装不上z3包，课比较多没时间弄</span></span><br></pre></td></tr></table></figure><p>然后能得出134的字符长度，接着我就下断点在了 sub_1F1000函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909220540336.png" alt="image-20220909220540336"></p><p>发现它会直接跳转到loc_1F14E0这里，然后我就进去loc_1F14E0中看了看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909220759058.png" alt="image-20220909220759058"></p><p>很像一个迷宫图，“h”代表上一移行；“j”代表下移一行；“k”代表左移一位；“l”代表右移一位，然后就写个脚本试试看</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = [<span class="number">0x00000044</span>, <span class="number">0x00000124</span>, <span class="number">0x000002BD</span>, <span class="number">0x0000033E</span>, <span class="number">0x00000432</span>, <span class="number">0x0000059D</span>, <span class="number">0x0000068F</span>, <span class="number">0x00000753</span>, <span class="number">0x000008CC</span>,</span><br><span class="line">             <span class="number">0x0000094F</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2C</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DF2</span>, <span class="number">0x00000EBA</span>, <span class="number">0x00000F30</span>, <span class="number">0x0000100D</span>, <span class="number">0x000011C7</span>,</span><br><span class="line">             <span class="number">0x00001257</span>, <span class="number">0x00001319</span>, <span class="number">0x00001491</span>, <span class="number">0x000000F4</span>, <span class="number">0x000001E7</span>, <span class="number">0x00000229</span>, <span class="number">0x0000034F</span>, <span class="number">0x000004EE</span>, <span class="number">0x00000547</span>,</span><br><span class="line">             <span class="number">0x0000067C</span>, <span class="number">0x000007D8</span>, <span class="number">0x000008F8</span>, <span class="number">0x000009D8</span>, <span class="number">0x00000A79</span>, <span class="number">0x00000BD1</span>, <span class="number">0x00000C7A</span>, <span class="number">0x00000D32</span>, <span class="number">0x00000E82</span>,</span><br><span class="line">             <span class="number">0x00000FD9</span>, <span class="number">0x000010DF</span>, <span class="number">0x00001120</span>, <span class="number">0x000012D6</span>, <span class="number">0x000013EE</span>, <span class="number">0x0000145F</span>, <span class="number">0x00000027</span>, <span class="number">0x0000016C</span>, <span class="number">0x00000265</span>,</span><br><span class="line">             <span class="number">0x000003B7</span>, <span class="number">0x0000049F</span>, <span class="number">0x0000054B</span>, <span class="number">0x000006C8</span>, <span class="number">0x000007DF</span>, <span class="number">0x00000866</span>, <span class="number">0x0000099F</span>, <span class="number">0x00000A0C</span>, <span class="number">0x00000B2D</span>,</span><br><span class="line">             <span class="number">0x00000C0C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000E19</span>, <span class="number">0x00000F83</span>, <span class="number">0x000010F1</span>, <span class="number">0x00001169</span>, <span class="number">0x0000125C</span>, <span class="number">0x000013A3</span>, <span class="number">0x000014AE</span>,</span><br><span class="line">             <span class="number">0x0000000C</span>, <span class="number">0x00000164</span>, <span class="number">0x00000274</span>, <span class="number">0x0000033D</span>, <span class="number">0x000004BD</span>, <span class="number">0x00000582</span>, <span class="number">0x00000696</span>, <span class="number">0x00000784</span>, <span class="number">0x00000846</span>,</span><br><span class="line">             <span class="number">0x000009AB</span>, <span class="number">0x00000ABA</span>, <span class="number">0x00000BBA</span>, <span class="number">0x00000CFC</span>, <span class="number">0x00000DB7</span>, <span class="number">0x00000E18</span>, <span class="number">0x00000F96</span>, <span class="number">0x0000106C</span>, <span class="number">0x00001138</span>,</span><br><span class="line">             <span class="number">0x00001267</span>, <span class="number">0x000013F5</span>, <span class="number">0x00001481</span>, <span class="number">0x00000072</span>, <span class="number">0x0000010E</span>, <span class="number">0x0000022C</span>, <span class="number">0x000003AF</span>, <span class="number">0x00000489</span>, <span class="number">0x000005B3</span>,</span><br><span class="line">             <span class="number">0x000006B3</span>, <span class="number">0x000007C5</span>, <span class="number">0x0000080B</span>, <span class="number">0x0000091E</span>, <span class="number">0x00000A3E</span>, <span class="number">0x00000BF8</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EE2</span>,</span><br><span class="line">             <span class="number">0x00000F5A</span>, <span class="number">0x00001038</span>, <span class="number">0x0000119A</span>, <span class="number">0x000012E9</span>, <span class="number">0x0000133F</span>, <span class="number">0x00001487</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000137</span>, <span class="number">0x00000298</span>,</span><br><span class="line">             <span class="number">0x00000346</span>, <span class="number">0x000004D3</span>, <span class="number">0x000005D5</span>, <span class="number">0x0000069E</span>, <span class="number">0x00000711</span>, <span class="number">0x000008B8</span>, <span class="number">0x0000097D</span>, <span class="number">0x00000AD9</span>, <span class="number">0x00000BD3</span>,</span><br><span class="line">             <span class="number">0x00000CC7</span>, <span class="number">0x00000D18</span>, <span class="number">0x00000E51</span>, <span class="number">0x00000FB7</span>, <span class="number">0x000010CB</span>, <span class="number">0x000011FC</span>, <span class="number">0x00001274</span>, <span class="number">0x00001396</span>, <span class="number">0x00001441</span>,</span><br><span class="line">             <span class="number">0x00000082</span>, <span class="number">0x000001A5</span>, <span class="number">0x0000025F</span>, <span class="number">0x000003E8</span>, <span class="number">0x00000487</span>, <span class="number">0x00000528</span>, <span class="number">0x000006F7</span>, <span class="number">0x00000797</span>, <span class="number">0x000008F3</span>,</span><br><span class="line">             <span class="number">0x000009AC</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000DE6</span>, <span class="number">0x00000EBC</span>, <span class="number">0x00000FCD</span>, <span class="number">0x000010C3</span>, <span class="number">0x000011AB</span>,</span><br><span class="line">             <span class="number">0x0000123F</span>, <span class="number">0x000013A0</span>, <span class="number">0x00001450</span>, <span class="number">0x00000043</span>, <span class="number">0x00000122</span>, <span class="number">0x000002AD</span>, <span class="number">0x000003CD</span>, <span class="number">0x0000042D</span>, <span class="number">0x00000537</span>,</span><br><span class="line">             <span class="number">0x00000692</span>, <span class="number">0x000007DB</span>, <span class="number">0x00000810</span>, <span class="number">0x00000936</span>, <span class="number">0x00000A49</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C3E</span>, <span class="number">0x00000DA3</span>, <span class="number">0x00000E1B</span>,</span><br><span class="line">             <span class="number">0x00000F95</span>, <span class="number">0x000010E6</span>, <span class="number">0x000011AF</span>, <span class="number">0x00001228</span>, <span class="number">0x000013B5</span>, <span class="number">0x00001448</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000015B</span>, <span class="number">0x0000024E</span>,</span><br><span class="line">             <span class="number">0x0000032A</span>, <span class="number">0x000004D2</span>, <span class="number">0x0000053C</span>, <span class="number">0x000006D6</span>, <span class="number">0x000007C9</span>, <span class="number">0x0000082F</span>, <span class="number">0x00000957</span>, <span class="number">0x00000AE2</span>, <span class="number">0x00000B26</span>,</span><br><span class="line">             <span class="number">0x00000C98</span>, <span class="number">0x00000D57</span>, <span class="number">0x00000EC3</span>, <span class="number">0x00000FC2</span>, <span class="number">0x000010DE</span>, <span class="number">0x00001118</span>, <span class="number">0x000012AB</span>, <span class="number">0x00001386</span>, <span class="number">0x0000144F</span>,</span><br><span class="line">             <span class="number">0x000000D5</span>, <span class="number">0x000001C9</span>, <span class="number">0x000002F3</span>, <span class="number">0x000003E7</span>, <span class="number">0x000004C6</span>, <span class="number">0x000005C0</span>, <span class="number">0x000006C2</span>, <span class="number">0x000007D1</span>, <span class="number">0x000008F0</span>,</span><br><span class="line">             <span class="number">0x000009B0</span>, <span class="number">0x00000A1D</span>, <span class="number">0x00000B3D</span>, <span class="number">0x00000C2A</span>, <span class="number">0x00000D62</span>, <span class="number">0x00000E64</span>, <span class="number">0x00000F20</span>, <span class="number">0x000010FF</span>, <span class="number">0x000011EA</span>,</span><br><span class="line">             <span class="number">0x00001217</span>, <span class="number">0x000013F0</span>, <span class="number">0x000014F6</span>, <span class="number">0x000000E0</span>, <span class="number">0x000001F0</span>, <span class="number">0x000002E2</span>, <span class="number">0x0000037B</span>, <span class="number">0x00000456</span>, <span class="number">0x000005DE</span>,</span><br><span class="line">             <span class="number">0x000006E6</span>, <span class="number">0x00000772</span>, <span class="number">0x000008DF</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A29</span>, <span class="number">0x00000B16</span>, <span class="number">0x00000C62</span>, <span class="number">0x00000DFB</span>, <span class="number">0x00000E33</span>,</span><br><span class="line">             <span class="number">0x00000F6A</span>, <span class="number">0x000010C8</span>, <span class="number">0x000011B2</span>, <span class="number">0x00001271</span>, <span class="number">0x000013F8</span>, <span class="number">0x000014C8</span>, <span class="number">0x000000A9</span>, <span class="number">0x00000192</span>, <span class="number">0x0000026F</span>,</span><br><span class="line">             <span class="number">0x00000342</span>, <span class="number">0x000004A7</span>, <span class="number">0x00000533</span>, <span class="number">0x0000065F</span>, <span class="number">0x00000707</span>, <span class="number">0x000008B9</span>, <span class="number">0x00000900</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B90</span>,</span><br><span class="line">             <span class="number">0x00000C4C</span>, <span class="number">0x00000D7B</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FC7</span>, <span class="number">0x00001004</span>, <span class="number">0x0000118D</span>, <span class="number">0x000012C0</span>, <span class="number">0x00001375</span>, <span class="number">0x000014EB</span>,</span><br><span class="line">             <span class="number">0x000000A7</span>, <span class="number">0x00000147</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000374</span>, <span class="number">0x0000044F</span>, <span class="number">0x000005EE</span>, <span class="number">0x0000066D</span>, <span class="number">0x00000719</span>, <span class="number">0x00000807</span>,</span><br><span class="line">             <span class="number">0x00000970</span>, <span class="number">0x00000A07</span>, <span class="number">0x00000BD5</span>, <span class="number">0x00000C18</span>, <span class="number">0x00000D4D</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F20</span>, <span class="number">0x00001021</span>, <span class="number">0x0000116C</span>,</span><br><span class="line">             <span class="number">0x00001218</span>, <span class="number">0x000013CC</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000117</span>, <span class="number">0x000002CA</span>, <span class="number">0x0000033F</span>, <span class="number">0x000004C5</span>, <span class="number">0x00000585</span>,</span><br><span class="line">             <span class="number">0x000006BB</span>, <span class="number">0x0000073A</span>, <span class="number">0x000008C8</span>, <span class="number">0x0000095A</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2F</span>, <span class="number">0x00000CC6</span>, <span class="number">0x00000DD8</span>, <span class="number">0x00000EFD</span>,</span><br><span class="line">             <span class="number">0x00000F73</span>, <span class="number">0x000010F8</span>, <span class="number">0x00001168</span>, <span class="number">0x00001280</span>, <span class="number">0x0000137E</span>, <span class="number">0x00001466</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000194</span>, <span class="number">0x000002E0</span>,</span><br><span class="line">             <span class="number">0x000003A2</span>, <span class="number">0x000004B4</span>, <span class="number">0x0000057F</span>, <span class="number">0x00000640</span>, <span class="number">0x000007D0</span>, <span class="number">0x00000865</span>, <span class="number">0x00000986</span>, <span class="number">0x00000A38</span>, <span class="number">0x00000B13</span>,</span><br><span class="line">             <span class="number">0x00000C7C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F95</span>, <span class="number">0x00001066</span>, <span class="number">0x00001117</span>, <span class="number">0x000012BE</span>, <span class="number">0x00001373</span>, <span class="number">0x000014E4</span>,</span><br><span class="line">             <span class="number">0x000000F9</span>, <span class="number">0x0000015F</span>, <span class="number">0x0000026C</span>, <span class="number">0x000003DF</span>, <span class="number">0x00000434</span>, <span class="number">0x00000569</span>, <span class="number">0x00000658</span>, <span class="number">0x00000768</span>, <span class="number">0x000008B4</span>,</span><br><span class="line">             <span class="number">0x00000976</span>, <span class="number">0x00000A56</span>, <span class="number">0x00000B68</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DCB</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FE7</span>, <span class="number">0x00001062</span>, <span class="number">0x00001196</span>,</span><br><span class="line">             <span class="number">0x00001233</span>, <span class="number">0x000013FE</span>, <span class="number">0x00001486</span>, <span class="number">0x000000E7</span>, <span class="number">0x000001AF</span>, <span class="number">0x00000205</span>, <span class="number">0x00000371</span>, <span class="number">0x00000482</span>, <span class="number">0x000005F0</span>,</span><br><span class="line">             <span class="number">0x00000670</span>, <span class="number">0x0000072E</span>, <span class="number">0x00000849</span>, <span class="number">0x00000925</span>, <span class="number">0x00000A5B</span>, <span class="number">0x00000B0E</span>, <span class="number">0x00000C7F</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EF4</span>,</span><br><span class="line">             <span class="number">0x00000F61</span>, <span class="number">0x0000101D</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000127E</span>, <span class="number">0x00001382</span>, <span class="number">0x00001404</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000015C</span>, <span class="number">0x0000027F</span>,</span><br><span class="line">             <span class="number">0x0000033F</span>, <span class="number">0x00000442</span>, <span class="number">0x000005B6</span>, <span class="number">0x0000064D</span>, <span class="number">0x00000780</span>, <span class="number">0x0000086B</span>, <span class="number">0x000009DC</span>, <span class="number">0x00000AF1</span>, <span class="number">0x00000B79</span>,</span><br><span class="line">             <span class="number">0x00000C66</span>, <span class="number">0x00000D6E</span>, <span class="number">0x00000E9D</span>, <span class="number">0x00000F23</span>, <span class="number">0x0000107B</span>, <span class="number">0x00001126</span>, <span class="number">0x000012D5</span>, <span class="number">0x0000133F</span>, <span class="number">0x000014AE</span>,</span><br><span class="line">             <span class="number">0x0000007D</span>, <span class="number">0x000001AD</span>, <span class="number">0x000002BB</span>, <span class="number">0x000003A1</span>, <span class="number">0x00000473</span>, <span class="number">0x0000054E</span>, <span class="number">0x000006C0</span>, <span class="number">0x000007D0</span>, <span class="number">0x0000083F</span>,</span><br><span class="line">             <span class="number">0x000009DA</span>, <span class="number">0x00000AE6</span>, <span class="number">0x00000BA9</span>, <span class="number">0x00000CA0</span>, <span class="number">0x00000DC3</span>, <span class="number">0x00000E30</span>, <span class="number">0x00000F8E</span>, <span class="number">0x00001066</span>, <span class="number">0x000011CD</span>,</span><br><span class="line">             <span class="number">0x0000124B</span>, <span class="number">0x00001361</span>, <span class="number">0x000014B8</span>, <span class="number">0x000000EE</span>, <span class="number">0x0000016D</span>, <span class="number">0x00000275</span>, <span class="number">0x0000033C</span>, <span class="number">0x00000473</span>, <span class="number">0x000005A8</span>,</span><br><span class="line">             <span class="number">0x00000679</span>, <span class="number">0x00000759</span>, <span class="number">0x0000080B</span>, <span class="number">0x000009B4</span>, <span class="number">0x00000AC7</span>, <span class="number">0x00000B03</span>, <span class="number">0x00000C07</span>, <span class="number">0x00000DAE</span>, <span class="number">0x00000E82</span>,</span><br><span class="line">             <span class="number">0x00000FF8</span>, <span class="number">0x00001050</span>, <span class="number">0x000011DF</span>, <span class="number">0x00001261</span>, <span class="number">0x000013A0</span>, <span class="number">0x000014D5</span>, <span class="number">0x00000053</span>, <span class="number">0x000001B7</span>, <span class="number">0x000002D8</span>,</span><br><span class="line">             <span class="number">0x000003B8</span>, <span class="number">0x00000478</span>, <span class="number">0x000005BC</span>, <span class="number">0x000006CC</span>, <span class="number">0x000007DE</span>, <span class="number">0x000008C6</span>, <span class="number">0x00000990</span>, <span class="number">0x00000A3F</span>, <span class="number">0x00000B21</span>,</span><br><span class="line">             <span class="number">0x00000CBF</span>, <span class="number">0x00000DBB</span>, <span class="number">0x00000EDC</span>, <span class="number">0x00000FB1</span>, <span class="number">0x0000103B</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000126B</span>, <span class="number">0x000013E0</span>, <span class="number">0x00001434</span>]</span><br><span class="line">x2 = [<span class="number">0x45</span>, <span class="number">0x24</span>, <span class="number">0xBD</span>, <span class="number">0x3E</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x53</span>, <span class="number">0xCC</span>, <span class="number">0x4F</span>, <span class="number">0x8D</span>, <span class="number">0x2C</span>, <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0xBA</span>, <span class="number">0x30</span>, <span class="number">0x0D</span>, <span class="number">0xC7</span>,</span><br><span class="line">             <span class="number">0x57</span>, <span class="number">0x19</span>, <span class="number">0x91</span>, <span class="number">0xF4</span>, <span class="number">0xE6</span>, <span class="number">0x28</span>, <span class="number">0x4F</span>, <span class="number">0xEE</span>, <span class="number">0x47</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xF8</span>, <span class="number">0xD8</span>, <span class="number">0x79</span>, <span class="number">0xD1</span>, <span class="number">0x7A</span>, <span class="number">0x32</span>, <span class="number">0x82</span>,</span><br><span class="line">             <span class="number">0xD9</span>, <span class="number">0xDF</span>, <span class="number">0x20</span>, <span class="number">0xD6</span>, <span class="number">0xEF</span>, <span class="number">0x5E</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0x49</span>, <span class="number">0xCA</span>, <span class="number">0xDD</span>, <span class="number">0x64</span>, <span class="number">0x9D</span>, <span class="number">0x0E</span>, <span class="number">0x2F</span>,</span><br><span class="line">             <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0x1B</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0xA1</span>, <span class="number">0xAC</span>, <span class="number">0x0E</span>, <span class="number">0x66</span>, <span class="number">0x76</span>, <span class="number">0x3F</span>, <span class="number">0xBF</span>, <span class="number">0x80</span>, <span class="number">0x94</span>, <span class="number">0x86</span>, <span class="number">0x44</span>,</span><br><span class="line">             <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xFE</span>, <span class="number">0xB5</span>, <span class="number">0x1A</span>, <span class="number">0x94</span>, <span class="number">0x6F</span>, <span class="number">0x3B</span>, <span class="number">0x64</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0x76</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0xAB</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>,</span><br><span class="line">             <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x3A</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x83</span>, <span class="number">0xAF</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>,</span><br><span class="line">             <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0x9B</span>, <span class="number">0x14</span>, <span class="number">0xBD</span>, <span class="number">0x78</span>, <span class="number">0xDC</span>, <span class="number">0xD6</span>, <span class="number">0xC2</span>, <span class="number">0x1D</span>, <span class="number">0x54</span>, <span class="number">0xB3</span>, <span class="number">0xCE</span>, <span class="number">0xF8</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x44</span>,</span><br><span class="line">             <span class="number">0x85</span>, <span class="number">0xA2</span>, <span class="number">0x58</span>, <span class="number">0xEF</span>, <span class="number">0x80</span>, <span class="number">0x2F</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0xF4</span>, <span class="number">0xAB</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0xE1</span>, <span class="number">0xBB</span>, <span class="number">0xCA</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>,</span><br><span class="line">             <span class="number">0x39</span>, <span class="number">0xA7</span>, <span class="number">0x56</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0xCA</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x95</span>, <span class="number">0xDC</span>, <span class="number">0x17</span>, <span class="number">0x31</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x39</span>, <span class="number">0xA4</span>, <span class="number">0x1C</span>,</span><br><span class="line">             <span class="number">0x93</span>, <span class="number">0xE1</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0xB3</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x23</span>, <span class="number">0xDB</span>, <span class="number">0x34</span>, <span class="number">0xDE</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0x5F</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>,</span><br><span class="line">             <span class="number">0x91</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0x11</span>, <span class="number">0xA3</span>, <span class="number">0x8F</span>, <span class="number">0x47</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0xEE</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0xCA</span>, <span class="number">0xD9</span>, <span class="number">0xF8</span>,</span><br><span class="line">             <span class="number">0xB9</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x6B</span>, <span class="number">0x6D</span>, <span class="number">0x28</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x1E</span>, <span class="number">0xF8</span>, <span class="number">0xFF</span>, <span class="number">0xEB</span>, <span class="number">0xFB</span>, <span class="number">0xE9</span>, <span class="number">0x70</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>,</span><br><span class="line">             <span class="number">0xED</span>, <span class="number">0x78</span>, <span class="number">0xD4</span>, <span class="number">0x7A</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x69</span>, <span class="number">0xF1</span>, <span class="number">0x39</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0xB9</span>, <span class="number">0x7B</span>, <span class="number">0xF3</span>, <span class="number">0xC2</span>, <span class="number">0xA2</span>, <span class="number">0x99</span>, <span class="number">0x64</span>,</span><br><span class="line">             <span class="number">0x48</span>, <span class="number">0xAC</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x0C</span>, <span class="number">0xB3</span>, <span class="number">0x0B</span>, <span class="number">0xD6</span>, <span class="number">0x9B</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x8B</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x7F</span>, <span class="number">0xE0</span>,</span><br><span class="line">             <span class="number">0xAB</span>, <span class="number">0x4A</span>, <span class="number">0xCB</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0x0A</span>, <span class="number">0x7C</span>, <span class="number">0x0A</span>, <span class="number">0xD9</span>, <span class="number">0x15</span>, <span class="number">0x41</span>, <span class="number">0xF3</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x61</span>,</span><br><span class="line">             <span class="number">0x14</span>, <span class="number">0xC1</span>, <span class="number">0x43</span>, <span class="number">0xA5</span>, <span class="number">0x1A</span>, <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC9</span>, <span class="number">0x89</span>, <span class="number">0xB7</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x57</span>, <span class="number">0x81</span>, <span class="number">0x23</span>, <span class="number">0xCA</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>,</span><br><span class="line">             <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0x65</span>, <span class="number">0x8D</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>, <span class="number">0xA4</span>, <span class="number">0x9A</span>, <span class="number">0xEE</span>, <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x71</span>, <span class="number">0x4E</span>, <span class="number">0xDE</span>, <span class="number">0x6A</span>, <span class="number">0x88</span>, <span class="number">0x36</span>, <span class="number">0x1D</span>,</span><br><span class="line">             <span class="number">0x72</span>, <span class="number">0xB1</span>, <span class="number">0xF0</span>, <span class="number">0x9B</span>, <span class="number">0x69</span>, <span class="number">0x19</span>, <span class="number">0xB0</span>, <span class="number">0x7C</span>, <span class="number">0xEA</span>, <span class="number">0xF7</span>, <span class="number">0x51</span>, <span class="number">0x62</span>, <span class="number">0xD1</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0x56</span>, <span class="number">0x66</span>, <span class="number">0xBA</span>,</span><br><span class="line">             <span class="number">0x79</span>, <span class="number">0x59</span>, <span class="number">0x66</span>, <span class="number">0xB1</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>, <span class="number">0x99</span>, <span class="number">0x3C</span>, <span class="number">0xF0</span>, <span class="number">0x89</span>, <span class="number">0xF6</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0x92</span>, <span class="number">0xE0</span>,</span><br><span class="line">             <span class="number">0x60</span>, <span class="number">0x3E</span>, <span class="number">0x59</span>, <span class="number">0x35</span>, <span class="number">0x4B</span>, <span class="number">0x1F</span>, <span class="number">0x6F</span>, <span class="number">0x65</span>, <span class="number">0xE4</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x7B</span>, <span class="number">0x6E</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x5D</span>, <span class="number">0x4C</span>, <span class="number">0x6F</span>,</span><br><span class="line">             <span class="number">0x2F</span>, <span class="number">0x52</span>, <span class="number">0xA6</span>, <span class="number">0x5D</span>, <span class="number">0x90</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x8D</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0xBF</span>,</span><br><span class="line">             <span class="number">0x6F</span>, <span class="number">0xBF</span>, <span class="number">0xA8</span>, <span class="number">0xB3</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xD2</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0xC8</span>, <span class="number">0xF4</span>, <span class="number">0xBB</span>, <span class="number">0xB2</span>, <span class="number">0xD0</span>, <span class="number">0x22</span>, <span class="number">0x9C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>,</span><br><span class="line">             <span class="number">0x59</span>, <span class="number">0x72</span>, <span class="number">0xAA</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x67</span>, <span class="number">0x2E</span>, <span class="number">0x61</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x19</span>, <span class="number">0xA6</span>, <span class="number">0xD5</span>, <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0xBC</span>, <span class="number">0x91</span>,</span><br><span class="line">             <span class="number">0xEB</span>, <span class="number">0x42</span>, <span class="number">0xCC</span>, <span class="number">0x72</span>, <span class="number">0xB2</span>, <span class="number">0xC6</span>, <span class="number">0x47</span>, <span class="number">0xA3</span>, <span class="number">0xCC</span>, <span class="number">0xAC</span>, <span class="number">0x6C</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0xD2</span>, <span class="number">0x84</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>,</span><br><span class="line">             <span class="number">0xAB</span>, <span class="number">0xAF</span>, <span class="number">0xC8</span>, <span class="number">0xA5</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0xF5</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">x3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        x3.append(x1[i*<span class="number">0x15</span>+j]^x2[i*<span class="number">0x15</span>+j]^i^(j&lt;&lt;<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">441</span>,<span class="number">21</span>):<span class="comment">#进行制表</span></span><br><span class="line">    <span class="built_in">print</span>(x3[i:i+<span class="number">21</span>])<span class="comment">#输出表</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909221031716.png" alt="image-20220909221031716"></p><p>这是迷宫图从左上角第一个1开始走，只能走1，然后得到</p><p>jjjllllllllllllllljjjjjjjjkjjkkkkhhhhhhhkkkkkkkkkkjjjjllljjjlllhhhhlljjjjjjkkkkkkkkjjlllllllllllhhlllllhhhlhhhhhhhhlljjjjjjjjjjjjjjjjl</p><p>最后根据提示将得到的md5一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220909222738609.png" alt="image-20220909222738609"></p><p>得到flag{54735c379e641a51ffac016a263bf6be}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2022青龙组 re694</title>
      <link href="/2022/10/08/40/"/>
      <url>/2022/10/08/40/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网鼎杯2022青龙组-re694"><a href="#网鼎杯2022青龙组-re694" class="headerlink" title="网鼎杯2022青龙组 re694"></a>网鼎杯2022青龙组 re694</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902211629733.png" alt="image-20220902211629733"></p><p>这里提示不能直接去upx的壳，先放入winhex中看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902213624082.png" alt="image-20220902213624082"></p><p>发现这里是FUK，这里将特征码给改了，所以要将FUK改为UPX然后保存</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902213922052.png" alt="image-20220902213922052"></p><p>然后常规UPX的脱壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214056554.png" alt="image-20220902214056554"></p><p>然后放入IDA分析，找到关键语句进行交叉引用</p><p><img src="/.io//Users\政政真厉害\AppData\Roaming\Typora\typora-user-images\image-20220902214149673.png" alt="image-20220902214149673"></p><p>发现关键的函数只有这两个</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214301189.png" alt="image-20220902214301189"></p><p>然后跟进这个函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214358615.png" alt="image-20220902214358615"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214610034.png" alt="image-20220902214610034"></p><p>然后去外面sub_1400111E5函数中看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214704242.png" alt="image-20220902214704242"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214838882.png" alt="image-20220902214838882"></p><p>这一部分是加密，然后进去sub_140011276函数中看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902214924593.png" alt="image-20220902214924593"></p><p>这里是进行判断的，可以从这里提取到关键字符</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220902215024131.png" alt="image-20220902215024131"></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> d[] = &#123;</span><br><span class="line"> <span class="number">0x4B</span>,<span class="number">0x48</span>,<span class="number">0x79</span>,<span class="number">0x13</span>,<span class="number">0x45</span>,<span class="number">0x30</span>,<span class="number">0x5C</span>,<span class="number">0x49</span>,<span class="number">0x5A</span>,<span class="number">0x79</span>,</span><br><span class="line"> <span class="number">0x13</span>,<span class="number">0x70</span>,<span class="number">0x6D</span>,<span class="number">0x78</span>,<span class="number">0x13</span>,<span class="number">0x6F</span>,<span class="number">0x48</span>,<span class="number">0x5D</span>,<span class="number">0x64</span>,<span class="number">0x64</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">d[i] = (d[i] ^ <span class="number">0x50</span>) - <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">d[j] = d[j] ^ <span class="number">0x66</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>还是要去看看关于壳和免杀的内容以及PE结构，太重要了/(ㄒoㄒ)/~~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解HGAME2022 creakme</title>
      <link href="/2022/10/08/4/"/>
      <url>/2022/10/08/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>链接：<a href="https://pan.baidu.com/s/1_BHVmOej_oIT3kp5A8Zu9Q">https://pan.baidu.com/s/1_BHVmOej_oIT3kp5A8Zu9Q</a><br>提取码：tuyt </p><h4 id="题解HGAME2022-creakme"><a href="#题解HGAME2022-creakme" class="headerlink" title="题解HGAME2022 creakme"></a>题解HGAME2022 creakme</h4><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405164603007.png" alt="image-20220405164603007"></p><p>发现这种格式，就想起tea加密，但是很容易发现，这里的sum值改了，而且在v0和v1这里多加了一个异或，得知这是一个魔改的tea</p><p>做tea的题目我们需要去寻找key和明文</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405164658645.png" alt="image-20220405164658645"></p><p>这里的while语句就知道我们的明文是跟这个v11(这里是拿输入的东西与v11+sum进行比较如果一样就是正确的)有关的于是我们去看v11是什么</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405164753479.png" alt="image-20220405164753479"></p><p>发现是这个，明文找到了，但还要确定这个明文是怎样进去tea解密的循环的</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405164904857.png" alt="image-20220405164904857"></p><p>我们可以从这里发现它这是是相当于v0为前四个字节，v1为后四个字节进行输入，然后循环了四次(i=v8+8），然后我们就知道v[8]={0X48D93488,0X030C144C,0X52EB78C2,0XED9CE5ED,0XAE1FEDE6,0XBA5A126D,0XCF9284AA,0X65E0F2E3}（两组两组一取，总共分成了八个小段，因为这个v0和v1是char类型四个字节，先从后面取，按顺序！）</p><p>然后我们去找密匙key，</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405165015779.png" alt="image-20220405165015779"></p><p>因为tea加密的原理，我们只需要取四组为key就行所以key为k[4]={0X44434241,0X48474645,0X4C4B4A49,0X504F4E4D}（key长度为128位）</p><p>然后我们开始写写脚本</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220405165118499.png" alt="image-20220405165118499"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> delta=<span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=delta&lt;&lt;<span class="number">5</span>, i;</span><br><span class="line"><span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= sum^((v0&lt;&lt;<span class="number">4</span>) + k0) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">v0 -= sum^((v1&lt;&lt;<span class="number">4</span>) + k2) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> v[<span class="number">8</span>]=&#123;<span class="number">0X48D93488</span>,<span class="number">0X030C144C</span>,<span class="number">0X52EB78C2</span>,<span class="number">0XED9CE5ED</span>,<span class="number">0XAE1FEDE6</span>,<span class="number">0XBA5A126D</span>,<span class="number">0XCF9284AA</span>,<span class="number">0X65E0F2E3</span>&#125;, k[<span class="number">4</span>]=&#123;<span class="number">0X44434241</span>,<span class="number">0X48474645</span>,<span class="number">0X4C4B4A49</span>,<span class="number">0X504F4E4D</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">decrypt(v+i,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hgame&#123;H4ppy_v4c4ti0n!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow七夕杯2022easy_magic</title>
      <link href="/2022/10/08/39/"/>
      <url>/2022/10/08/39/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ctfshow七夕杯2022easy-magic"><a href="#ctfshow七夕杯2022easy-magic" class="headerlink" title="ctfshow七夕杯2022easy_magic"></a>ctfshow七夕杯2022easy_magic</h2><p>分析</p><p>首先查壳，64位无壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811232926186.png" alt="image-20220811232926186"></p><p>然后放入IDA中分析，先去字符串那里查找关键词</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233006978.png" alt="image-20220811233006978"></p><p>然后交叉引用进去就能够看到了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233120222.png" alt="image-20220811233120222"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233137201.png" alt="image-20220811233137201"></p><p>首先可以看到43行有一个累加的过程，然后下面有一个sub_219B函数不知道是什么，然后点进去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233244373.png" alt="image-20220811233244373"></p><p>这里有三个函数分别点进去看一下第一个sub_AB6</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233315269.png" alt="image-20220811233315269"></p><p>没发现什么去下一个看一下sub_1F7D</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233400827.png" alt="image-20220811233400827"></p><p>又有一个函数，进去看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233427853.png" alt="image-20220811233427853"></p><p>看到这里的时候就联想到之前做的题目，知道这是md5的加密，那么sub_219B这一整个大的函数就是将v10 md5进行加密然后给s1，最后通过if语句与s2进行md5值比较来判断输出是否正确</p><p>那么解题的思路应该就是直接将s2去md5解密就可以得到v10也就是flag了，去网站看一下能否解出</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220811233934218.png" alt="image-20220811233934218"></p><p>可惜网站破不出，那么只能写脚本来还原v10数组了</p><p>逻辑很简单，就是将v5的值累加给v10，但是这个累加过程没有v10[0]，而v10[0] = v4;由于这是ctfshow比赛，那么猜一下v4=v5=v10[0]=’c’，然后就开始写脚本</p><p>脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v4;</span><br><span class="line"><span class="keyword">char</span> v7[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">char</span> v10[<span class="number">104</span>];</span><br><span class="line"><span class="keyword">char</span> v5;</span><br><span class="line">v7[<span class="number">0</span>] = <span class="number">17</span>;</span><br><span class="line">    v7[<span class="number">1</span>] = <span class="number">-14</span>;</span><br><span class="line">    v7[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">    v7[<span class="number">3</span>] = <span class="number">-11</span>;</span><br><span class="line">    v7[<span class="number">4</span>] = <span class="number">7</span>;</span><br><span class="line">    v7[<span class="number">5</span>] = <span class="number">8</span>;</span><br><span class="line">    v7[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">    v7[<span class="number">7</span>] = <span class="number">-68</span>;</span><br><span class="line">    v7[<span class="number">8</span>] = <span class="number">65</span>;</span><br><span class="line">    v7[<span class="number">9</span>] = <span class="number">-25</span>;</span><br><span class="line">    v7[<span class="number">10</span>] = <span class="number">7</span>;</span><br><span class="line">    v7[<span class="number">11</span>] = <span class="number">6</span>;</span><br><span class="line">    v7[<span class="number">12</span>] = <span class="number">-11</span>;</span><br><span class="line">    v7[<span class="number">13</span>] = <span class="number">6</span>;</span><br><span class="line">    v7[<span class="number">14</span>] = <span class="number">-8</span>;</span><br><span class="line">    v7[<span class="number">15</span>] = <span class="number">10</span>;</span><br><span class="line">    v7[<span class="number">16</span>] = <span class="number">10</span>;</span><br><span class="line">    v7[<span class="number">17</span>] = <span class="number">-20</span>;</span><br><span class="line">    v7[<span class="number">18</span>] = <span class="number">9</span>;</span><br><span class="line">    v7[<span class="number">19</span>] = <span class="number">-3</span>;</span><br><span class="line">    v7[<span class="number">20</span>] = <span class="number">13</span>;</span><br><span class="line">    v7[<span class="number">21</span>] = <span class="number">-13</span>;</span><br><span class="line">    v7[<span class="number">22</span>] = <span class="number">24</span>;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    v5 = v4 ;</span><br><span class="line">    v10[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">23</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    v5 += v7[i];</span><br><span class="line">    v10[i+<span class="number">1</span>] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="built_in">strlen</span>(v10);j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,v10[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//ctfshow&#123;7x_flag_is_here&#125;</span></span><br></pre></td></tr></table></figure><p>总结</p><p>这道题虽然逻辑简单，但是我想说的是这次终于看到了学以致用的题目，之前就看到过_ROL4_ 的md5，很激动❤</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯[GameMaster]</title>
      <link href="/2022/10/08/38/"/>
      <url>/2022/10/08/38/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="强网杯-GameMaster"><a href="#强网杯-GameMaster" class="headerlink" title="强网杯[GameMaster]"></a>强网杯[GameMaster]</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，C#，NET的，直接放入ILSpy去分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804161945177.png" alt="image-20220804161945177"></p><p>然后去goldfunc函数中找到加密信息，这里是第一个加密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804162709634.png" alt="image-20220804162709634"></p><p>第二个加密看见了key为16位，然后ECB，就想到了AES-ECB</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804162757941.png" alt="image-20220804162757941"></p><p>然后去破解</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804163115941.png" alt="image-20220804163115941"></p><p>这里的Brainstorming!!!就是key的ASCII码，解出来之后将它保存成EXE文件，转成之后要去掉前面多余部分一直到MZ(是exe文件的标志)</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804163536414.png" alt="image-20220804163536414"></p><p>改成这样保存即可，然后再一次放入ILSpy</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804163623984.png" alt="image-20220804163623984"></p><p>这里有两个加密函数，一个是Check1另一个是ParseKey，看到最后一个for循环，可以知道要得到flag就是要用array4^array5，array5已知，求array4用到ParseKey函数，但是不知道array的值，就要用到Chek1函数，看到if (first.SequenceEqual(array2))就能知道first的值就是array2的值，然后进去Check1函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804170229995.png" alt="image-20220804170229995"></p><p>很容易知道是用z3求解，求出array之后去看一下ParseKey函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220804170338095.png" alt="image-20220804170338095"></p><p>逻辑很清楚了，直接写脚本</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sol = Solver()</span><br><span class="line">xorkey = [<span class="number">60</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">245</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">40</span>, <span class="number">103</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">22</span>, <span class="number">251</span>, <span class="number">227</span>]</span><br><span class="line">cmp = [<span class="number">101</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">213</span>, <span class="number">163</span>, <span class="number">26</span>, <span class="number">59</span>, <span class="number">38</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">166</span>, <span class="number">140</span>, <span class="number">183</span>, <span class="number">42</span>, <span class="number">247</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">20</span>, <span class="number">145</span>, <span class="number">37</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">191</span>, <span class="number">110</span>, <span class="number">179</span>, <span class="number">227</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">5</span>]</span><br><span class="line">x = BitVec(<span class="string">&quot;x&quot;</span>, <span class="number">63</span>)</span><br><span class="line">y = BitVec(<span class="string">&quot;y&quot;</span>, <span class="number">63</span>)</span><br><span class="line">z = BitVec(<span class="string">&quot;z&quot;</span>, <span class="number">63</span>)</span><br><span class="line">dup = [x, y, z]</span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line">arr = [BitVecVal(<span class="number">0</span>, <span class="number">63</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">    x = (((x &gt;&gt; <span class="number">29</span> ^ x &gt;&gt; <span class="number">28</span> ^ x &gt;&gt; <span class="number">25</span> ^ x &gt;&gt; <span class="number">23</span>) &amp; <span class="number">1</span>) | x &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    y = (((y &gt;&gt; <span class="number">30</span> ^ y &gt;&gt; <span class="number">27</span>) &amp; <span class="number">1</span>) | y &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    z = (((z &gt;&gt; <span class="number">31</span> ^ z &gt;&gt; <span class="number">30</span> ^ z &gt;&gt; <span class="number">29</span> ^ z &gt;&gt; <span class="number">28</span> ^ z &gt;&gt; <span class="number">26</span> ^ z &gt;&gt; <span class="number">24</span>) &amp; <span class="number">1</span>) | z &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">       num += <span class="number">1</span></span><br><span class="line">    arr[num] = ((arr[num] &lt;&lt; <span class="number">1</span>) | (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span> &amp; (x &gt;&gt; <span class="number">30</span> &amp; <span class="number">1</span>)) ^ (((z</span><br><span class="line">                                                                   &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span>) ^ <span class="number">1</span>) &amp; (</span><br><span class="line">                                                                             y &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>))) &amp; <span class="number">0xffffffff</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp)):</span><br><span class="line">       sol.add(cmp[i] == arr[i])</span><br><span class="line"><span class="keyword">assert</span> sol.check() == sat</span><br><span class="line">sol = sol.model()</span><br><span class="line">fake = [sol.<span class="built_in">eval</span>(i).as_long() &amp; <span class="number">0xffffffff</span> <span class="keyword">for</span> i <span class="keyword">in</span> dup]</span><br><span class="line">Key = [<span class="number">0</span>] * <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">       <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">              Key[i * <span class="number">4</span> + j] = fake[i] &gt;&gt; j * <span class="number">8</span> &amp; <span class="number">255</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytearray</span>([(xorkey[i] ^ Key[i % <span class="built_in">len</span>(Key)]) &amp; <span class="number">255</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xorkey))]))</span><br></pre></td></tr></table></figure><p>flag{Y0u_@re_G3meM3s7er!}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>了解到了AES-ECB和CBC等这一系列高级加密和一些工具的使用，tql</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2019 babyre</title>
      <link href="/2022/10/08/37/"/>
      <url>/2022/10/08/37/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SCTF2019-babyre"><a href="#SCTF2019-babyre" class="headerlink" title="[SCTF2019]babyre"></a>[SCTF2019]babyre</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，64位无壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802153223797.png" alt="image-20220802153223797"></p><p>放入对应的IDA中看，直接进入字符串去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802153318143.png" alt="image-20220802153318143"></p><p>看到关键句子直接索引</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802153351840.png" alt="image-20220802153351840"></p><p>这里发现jb和jnb都是跳转重复后面的loop语句也是个错的，直接将他们全部nop掉（后面还有几个类似的都是一样的操作）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802153539528.png" alt="image-20220802153539528"></p><p>到后面的时候发现了奇怪的东西</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802153705814.png" alt="image-20220802153705814"></p><p>因为没见过这个in就觉得很奇怪而且后面还跟着一大段为编译成功的内容</p><p><img src="/.io//Users\政政真厉害\AppData\Roaming\Typora\typora-user-images\image-20220802153923957.png" alt="image-20220802153923957"></p><p>然后就去看一下in的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802155317345.png" alt="image-20220802155317345"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802155356133.png" alt="image-20220802155356133"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802155410736.png" alt="image-20220802155410736"></p><p>一下是in指令接着又是mov指令，这里就知道这是花指令，直接将E4改为90（nop）然后选中这一段主函数按P申明一下，接着反编译</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802155716698.png" alt="image-20220802155716698"></p><p>这里发现有个地方不对是C22这个函数引用出了错，接着去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802155810739.png" alt="image-20220802155810739"></p><p>发现这一段没有申明函数，要给他变成函数，重新进去这个程序，按之前步骤来，在按P之前先将其申明</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802160059488.png" alt="image-20220802160059488"></p><p>按Y键进行修改类型，将它变成独立的函数，然后再最后的那个test按D将其变为数据，那么C22就会变成一个独立函数，接着选中前面一部分按P申明一下main，再反编译</p><h4 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802161544325.png" alt="image-20220802161544325"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802161607170.png" alt="image-20220802161607170"></p><p>可以看出来这里是一个迷宫，但是不止上下左右四个键它还有25步的加键，然后我们还知道它的迷宫图，按照上下左右的排布我们可以知道它是5个5*5的迷宫</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802162511640.png" alt="image-20220802162511640"></p><p>可以知道是从S开始，#结束，不能走*</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802162744013.png" alt="image-20220802162744013"></p><p>x表示去下面那个5*5迷宫，y相反，那么第一个解出来是ddwwxxssxaxwwaasasyywwdd</p><h4 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802163006643.png" alt="image-20220802163006643"></p><p>这里可以知道sub_C22是加密函数，进去看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802163114555.png" alt="image-20220802163114555"></p><p>base64特征怀疑是base64，然后看一下具体的意思，v6左移6位，空缺部分由v14[*13]的低6位来补足，if语句表示每次存4位进去改为3位赋值给v1数组，基本就是base64的操作</p><p>（这里BYTEn是看别人的博客晓得的）</p><p><img src="/.io//Users\政政真厉害\AppData\Roaming\Typora\typora-user-images\image-20220802163756387.png" alt="image-20220802163756387"></p><p>然后去看一下base64操作完的结果在哪，然后进行base64的加密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802164036188.png" alt="image-20220802164036188"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802164043594.png" alt="image-20220802164043594"></p><p>第二段的结果c2N0Zl85MTAy</p><h4 id="第三段"><a href="#第三段" class="headerlink" title="第三段"></a>第三段</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802164236418.png" alt="image-20220802164236418"></p><p>进入加密函数看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802164358782.png" alt="image-20220802164358782"></p><p>看到sub_143B点进去看一下这个函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220802164438438.png" alt="image-20220802164438438"></p><p>然后到外面，看到v9的一系列数组可以知道v8数组等于v9数组，然后根据BYTEn把v11~v14弄出来0xBE040680，0xC5AF7647，0x9FCC401F，0xD8BF92EF</p><p>因为这一段的编码是可逆的，直接在IDA中的基础上改一点点就行了</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;defs.h&quot;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data1[<span class="number">288</span>] = &#123;</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>,</span><br><span class="line">    <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>,</span><br><span class="line">    <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xBA</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>,</span><br><span class="line">    <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>,</span><br><span class="line">    <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>,</span><br><span class="line">    <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>,</span><br><span class="line">    <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0xBA</span>, <span class="number">0xB1</span>, <span class="number">0xA3</span>, <span class="number">0x50</span>, <span class="number">0x33</span>, <span class="number">0xAA</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x91</span>, <span class="number">0x7D</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x70</span>, <span class="number">0xB2</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_143B</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span><span class="comment">//加密部分</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v1;</span><br><span class="line">        v1 = (data1[<span class="built_in">BYTE2</span>(a1)] &lt;&lt; <span class="number">16</span>) | data1[(<span class="keyword">unsigned</span> __int8)a1] | (data1[<span class="built_in">BYTE1</span>(a1)] &lt;&lt; <span class="number">8</span>) | (data1[a1 &gt;&gt; <span class="number">24</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        <span class="keyword">return</span> __ROL4__(v1, <span class="number">12</span>) ^ (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(__ROL4__(v1, <span class="number">8</span>) ^ __ROR4__(v1, <span class="number">2</span>)) ^ __ROR4__(v1, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    data[<span class="number">26</span>] = <span class="number">0xBE040680</span>;</span><br><span class="line">    data[<span class="number">27</span>] = <span class="number">0xC5AF7647</span>;</span><br><span class="line">    data[<span class="number">28</span>] = <span class="number">0x9FCC401F</span>;</span><br><span class="line">    data[<span class="number">29</span>] = <span class="number">0xD8BF92EF</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">25</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">data[i] = <span class="built_in">sub_143B</span>(data[i+<span class="number">1</span>] ^ data[i+<span class="number">2</span>] ^ data[i+<span class="number">3</span>]) ^ data[i+<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, ((<span class="keyword">char</span>*)&amp;data[i])[<span class="number">0</span>], ((<span class="keyword">char</span>*)&amp;data[i])[<span class="number">1</span>], ((<span class="keyword">char</span>*)&amp;data[i])[<span class="number">2</span>], ((<span class="keyword">char</span>*)&amp;data[i])[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fl4g_is_s0_ug1y!</span></span><br></pre></td></tr></table></figure><p>让将程序放入kali跑，分别把结果输入得到flag</p><p>flag{ddwwxxssxaxwwaasasyywwdd-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>题目难度有点点大，但基本都是在考基本功，同时也学到了关与BYTEn的用法</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF we_can_go</title>
      <link href="/2022/10/08/36/"/>
      <url>/2022/10/08/36/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="NepCTF-we-can-go"><a href="#NepCTF-we-can-go" class="headerlink" title="NepCTF we_can_go"></a>NepCTF we_can_go</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，32位无壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230327494.png" alt="image-20220720230327494"></p><p>然后直接去运行一下看看，随便输入点什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230532023.png" alt="image-20220720230532023"></p><p>这里弹出了false，然后去IDA字符串中去找到false</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230637521.png" alt="image-20220720230637521"></p><p>然后交叉引用它，去找到突破口</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230756747.png" alt="image-20220720230756747"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230851416.png" alt="image-20220720230851416"></p><p>然后进去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720230958286.png" alt="image-20220720230958286"></p><p>这里的23告诉我们flag总共是23个字符，出去NepCTF{}就还剩15个，然后这里的+7应该表示的是”NepCTF{“，所以我就觉得flag应该会在dword_10DB6E0函数中，于是进去看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720231355432.png" alt="image-20220720231355432"></p><p>我在这第12行result = v1;这里下了断点，去动调一下，看看会不会有什么东西</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720231510074.png" alt="image-20220720231510074"></p><p>看见这里有东西传进去这些寄存器中，然后按F8走一下，去看一下寄存器里的是什么东西</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220720231808203.png" alt="image-20220720231808203"></p><p>然后就出flag了</p><p>NepCTF{U9eT_t0_th3TRUE}</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这题其实就是考你会不会动态调试，以及去别开不必要的调试找到有用的，以及观察能力</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEPCTF 快来签到</title>
      <link href="/2022/10/08/35/"/>
      <url>/2022/10/08/35/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="NEPCTF-快来签到"><a href="#NEPCTF-快来签到" class="headerlink" title="NEPCTF 快来签到"></a>NEPCTF 快来签到</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，无壳32位，然后放入IDA分析，这里我直接F5去看然后就出现了这种情况</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220719164444157.png" alt="image-20220719164444157"></p><p>接着我就去网上搜怎么改大小</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220719164523795.png" alt="image-20220719164523795"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220719164538347.png" alt="image-20220719164538347"></p><p>接着改完大小后F5然后缩小就出flag了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220719164626413.png" alt="image-20220719164626413"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU [CISCN2018]2ex</title>
      <link href="/2022/10/08/34/"/>
      <url>/2022/10/08/34/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-CISCN2018-2ex"><a href="#BUU-CISCN2018-2ex" class="headerlink" title="BUU [CISCN2018]2ex"></a>BUU [CISCN2018]2ex</h2><p>分析</p><p>首先查壳，无壳32位，放入IDA</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220714123648770.png" alt="image-20220714123648770"></p><p>一个一个点，看看有没有什么有用的，发现第三个是base64的加密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220714124539528.png" alt="image-20220714124539528"></p><p>base64特征</p><p>去找一下字符串</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220714130534986.png" alt="image-20220714130534986"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220714130547289.png" alt="image-20220714130547289"></p><p>这里没有看到密文，然后想到给到的第二个txt的文本，里面刚好有密文，然后解密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220714131758681.png" alt="image-20220714131758681"></p><p>得到flag{change53233}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU [NPUCTF2020]你好sao啊</title>
      <link href="/2022/10/08/33/"/>
      <url>/2022/10/08/33/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-NPUCTF2020-你好sao啊"><a href="#BUU-NPUCTF2020-你好sao啊" class="headerlink" title="BUU [NPUCTF2020]你好sao啊"></a>BUU [NPUCTF2020]你好sao啊</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，64位无壳，放入IDA中</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145533217.png" alt="image-20220708145533217"></p><p>到RxEncode函数中去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145603480.png" alt="image-20220708145603480"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145640363.png" alt="image-20220708145640363"></p><p>那么这题就是去给字符串加密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145735716.png" alt="image-20220708145735716"></p><p>进去看一下，应该是字符串</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145754641.png" alt="image-20220708145754641"></p><p>然后到外面的主函数去，根据strcmp(s1, s2)，可以确定明文就是</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708145932145.png" alt="image-20220708145932145"></p><p>这里要注意大小端，直接用工具解</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708150014380.png" alt="image-20220708150014380"></p><p>这里的hex编码就是16进制编码，是字符的ASCII值的16进制表示</p><p>flag{w0w+y0U+cAn+r3lllY+dAnc3}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU [GKCTF 2021]QQQQT</title>
      <link href="/2022/10/08/32/"/>
      <url>/2022/10/08/32/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-GKCTF-2021-QQQQT"><a href="#BUU-GKCTF-2021-QQQQT" class="headerlink" title="BUU [GKCTF 2021]QQQQT"></a>BUU [GKCTF 2021]QQQQT</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134506677.png" alt="image-20220708134506677"></p><p>发现是Enigma Virtual Box打包的32位程序，然后就直接用解包的工具</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134559269.png" alt="image-20220708134559269"></p><p>解完包后，放入IDA中查看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134635820.png" alt="image-20220708134635820"></p><p>发现特殊字符串，交叉引用去看一下会不会是解题关键</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134724847.png" alt="image-20220708134724847"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134733891.png" alt="image-20220708134733891"></p><p>发现就是对”56fkoP8KhwCf3v7CEz”进行base58的加密，直接用网站去解密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220708134951816.png" alt="image-20220708134951816"></p><p>flag{12t4tww3r5e77}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次遇到Enigma Virtual Box打包的程序，也晓得了这些程序，还是要多拓宽眼界</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU [WUSTCTF2020]funnyre</title>
      <link href="/2022/10/08/31/"/>
      <url>/2022/10/08/31/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-WUSTCTF2020-funnyre"><a href="#BUU-WUSTCTF2020-funnyre" class="headerlink" title="BUU [WUSTCTF2020]funnyre"></a>BUU [WUSTCTF2020]funnyre</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，无壳64位，放入IDA看看</p><p>发现找不到主函数，然后往下找，看能不能找到函数的入口</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707155513056.png" alt="image-20220707155513056"></p><p>发现都在没声明函数，然后去找结束点，一直往下找，发现不对</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707155714465.png" alt="image-20220707155714465"></p><p>这里的指令很多有错误，在cmp后有一个jnz进行跳转了，后面的jz和jnz明显多余要去掉，然后后面的call也有问题，也nop掉jz也nop掉，弄好之后我试了试发现不对，然后往下看，发现要一直nop到xor eax,eax为止。后面还有几个一样的错误都需要改，然后一直到</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707160251727.png" alt="image-20220707160251727"> </p><p>按P进行声明函数，之后就可以F5了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707160415469.png" alt="image-20220707160415469"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707161107537.png" alt="image-20220707161107537"></p><p>最后就是比较unk_4025C0与(v5 + 5)是否一致，去看一下unk_4025C0</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220707161142206.png" alt="image-20220707161142206"></p><p>不难看出，前面是先进行异或处理，后面是累加的处理，脚本就先累加再异或进行爆破查找得到flag，这里直接用官方脚本</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dt = [<span class="number">0xd9</span>, <span class="number">0x2c</span>, <span class="number">0x27</span>, <span class="number">0xd6</span>, <span class="number">0xd8</span>, <span class="number">0x2a</span>, <span class="number">0xda</span>, <span class="number">0x2d</span>, <span class="number">0xd7</span>, <span class="number">0x2c</span>, <span class="number">0xdc</span>, <span class="number">0xe1</span>, <span class="number">0xdb</span>, <span class="number">0x2c</span>, <span class="number">0xd9</span>, <span class="number">0xdd</span>, <span class="number">0x27</span>, <span class="number">0x2d</span>, <span class="number">0x2a</span>, <span class="number">0xdc</span>, <span class="number">0xdb</span>, <span class="number">0x2c</span>, <span class="number">0xe1</span>, <span class="number">0x29</span>, <span class="number">0xda</span>, <span class="number">0xda</span>, <span class="number">0x2c</span>, <span class="number">0xda</span>, <span class="number">0x2a</span>, <span class="number">0xd9</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kaisa</span>(<span class="params">xx, kk</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [(x+kk) &amp; <span class="number">0xFF</span> <span class="keyword">for</span> x <span class="keyword">in</span> xx]<span class="comment">#&amp;0xff取低8位</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">xx, kk</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [x ^ kk <span class="keyword">for</span> x <span class="keyword">in</span> xx]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">xx</span>):</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xx:</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">or</span> (x &gt; <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) <span class="keyword">and</span> x &lt; <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">or</span> x &gt; <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> k1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        tt = kaisa(dt, k1)</span><br><span class="line">        <span class="keyword">for</span> k2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">            tt2 = xor(tt, k2)</span><br><span class="line">            <span class="keyword">if</span> check(tt2):</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">bytes</span>(tt2))</span><br><span class="line">                <span class="built_in">print</span>(k1, k2)</span><br><span class="line"><span class="comment">#flag&#123;1dc20f6e3d497d15cef47d9a66d6f1af&#125;               </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU CrackRTF</title>
      <link href="/2022/10/08/30/"/>
      <url>/2022/10/08/30/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-CrackRTF"><a href="#BUU-CrackRTF" class="headerlink" title="BUU CrackRTF"></a>BUU CrackRTF</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先去查壳，无壳32位，放入DIA中去分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706120536067.png" alt="image-20220706120536067"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706120552815.png" alt="image-20220706120552815"></p><p>逻辑很简单，唯一要怀疑的就两个函数sub_40100A函数和sub_401019函数，分别点进去看</p><h3 id="sub-40100A函数"><a href="#sub-40100A函数" class="headerlink" title="sub_40100A函数"></a>sub_40100A函数</h3><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706120739915.png" alt="image-20220706120739915"></p><p>这是一个哈希加密，去看一下它对应的加密是啥</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706120836046.png" alt="image-20220706120836046"></p><p>是Sha1的哈希加密，解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag2=<span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">999999</span>):<span class="comment">#前面提示位六位的数</span></span><br><span class="line">     h2 = hashlib.sha1((<span class="built_in">str</span>(i)+flag2).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">     flags = h2.hexdigest()</span><br><span class="line">     <span class="keyword">if</span> <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == flags:</span><br><span class="line">              <span class="built_in">print</span> (<span class="built_in">str</span>(i)+flag2)</span><br><span class="line">              <span class="built_in">print</span>(flags)</span><br><span class="line"><span class="comment">#123321@DBApp</span></span><br><span class="line"><span class="comment">#6e32d0943418c2c33385bc35a1470250dd8923a9</span></span><br></pre></td></tr></table></figure><p>那么第一段的输入就为123321</p><h3 id="sub-401019函数"><a href="#sub-401019函数" class="headerlink" title="sub_401019函数"></a>sub_401019函数</h3><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706121854555.png" alt="image-20220706121854555"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706121912842.png" alt="image-20220706121912842"></p><p>为md5加密，直接用网站解密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220706122004911.png" alt="image-20220706122004911"></p><p>那么第二段的输入为~!3a@0</p><p>打开程序分别输入两次内容然后生成了一个.rtf的文件打开就是flag了。</p><p>flag{N0_M0re_Free_Bugs}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>了解到了哈希加密有python有包能解出来，根据网上的格式能解出来，涨知识了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA加密</title>
      <link href="/2022/10/08/3/"/>
      <url>/2022/10/08/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="TEA加密"><a href="#TEA加密" class="headerlink" title="TEA加密"></a>TEA加密</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220405164026618.png" alt="image-20220405164026618"></p><p>在IDA中识别TEA加密：</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220405164158696.png" alt="image-20220405164158696"></p><p>其中可以发现TEA的显著特征0xC6EF3720，和 -0x61C88647(即0x9E3779B9)还有十六个字节的key</p><p>看到这种新式差不多都是TEA加密，上图是一个魔改TEA，更换的delta的值，并且多异或了一个sum</p><p>首先这个v3 +=xxxx这个就代表了v3是sum</p><p>然后这个v5和v6就是y和z</p><p>这个(v3+v6)和(v3+v5)是(z或y+sum)的意思</p><p>同理这个(v10[3或1]+(v5或6 &gt;&gt; 5)是((z或y&gt;&gt;5)+k[1或3])的意思</p><p>然后这个(16*xxx)这个表示的是左移</p><p><a href="https://ctttttttt.github.io/2022/04/05/4/">tea加密的例题</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习总结 </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[FlareOn5]Ultimate Minesweeper</title>
      <link href="/2022/10/08/29/"/>
      <url>/2022/10/08/29/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-FlareOn5-Ultimate-Minesweeper"><a href="#BUU-FlareOn5-Ultimate-Minesweeper" class="headerlink" title="BUU[FlareOn5]Ultimate Minesweeper"></a>BUU[FlareOn5]Ultimate Minesweeper</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先拿到文件后，去查壳发现是.net后缀文件是C#写的，然后就放入dnSpy中去分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705234937251.png" alt="image-20220705234937251"></p><p>这几个分别是分配内存，派生valloc类，初始化，第一次点击反馈，关键点，内存处理，方正显示反馈，时间暂停</p><p>很容易知道，如果要找到解题点，就要先看最后方正的反馈是什么，点进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705234118551.png" alt="image-20220705234118551"></p><p>简单的翻译一下，第一个failurepopup是失败，后面的successpopup是成功，这里直接把错误的判断去掉，那么就只剩下成功与非成功非失败状态了（鼠标右击编辑方法中进行编辑）</p><p>后面的successpopup引用了getkey，点进去看看</p><p><img src="/.io//Users\政政真厉害\AppData\Roaming\Typora\typora-user-images\image-20220705234625888.png" alt="image-20220705234625888"></p><p>发现了最后的3哥array值在做一些算法操作，也就是说最后的非地雷格子只有3个</p><p>编辑好后按 CTRL+shift+s另存，按右上角的启动</p><p>我这里用的是傻瓜发，一直到乱点试出了三个点记下来之后再一次点那三个非雷区就得到flag了</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705235332182.png" alt="image-20220705235332182"></p><p>flag{<a href="mailto:&#x43;&#x68;&#51;&#97;&#116;&#x65;&#x72;&#115;&#x5f;&#65;&#x6c;&#x77;&#52;&#x79;&#115;&#95;&#x57;&#49;&#110;&#x40;&#x66;&#108;&#97;&#114;&#x65;&#45;&#x6f;&#x6e;&#46;&#x63;&#111;&#x6d;">&#x43;&#x68;&#51;&#97;&#116;&#x65;&#x72;&#115;&#x5f;&#65;&#x6c;&#x77;&#52;&#x79;&#115;&#95;&#x57;&#49;&#110;&#x40;&#x66;&#108;&#97;&#114;&#x65;&#45;&#x6f;&#x6e;&#46;&#x63;&#111;&#x6d;</a>}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种类型的题目要多用翻译去做，英语不好真的吃亏</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[QCTF2018]Xman-babymips</title>
      <link href="/2022/10/08/28/"/>
      <url>/2022/10/08/28/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-QCTF2018-Xman-babymips"><a href="#BUU-QCTF2018-Xman-babymips" class="headerlink" title="BUU[QCTF2018]Xman-babymips"></a>BUU[QCTF2018]Xman-babymips</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，32位无壳，放入IDA分析。先shift+F12去看一下关键的string</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705141915441.png" alt="image-20220705141915441"></p><p>然后交叉引用去找到它在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705142038149.png" alt="image-20220705142038149"></p><p>去看一下fdata是什么<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705142112436.png" alt="image-20220705142112436"></p><p>不难猜出这个是用来弄flag前缀的，接着去看一下sub_4007F0函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705142241729.png" alt="image-20220705142241729"></p><p>其实就是简单的判断i是否为偶数（i&amp;1是用来判断奇偶的），这里for循环中i=5和后面strncmp函数中a1+5都是因为前面的前缀占了5个字节，然后看一下 off_410D04里面是什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220705142411408.png" alt="image-20220705142411408"></p><p>这些都知道后就开始写脚本（因为是BUU下载的题就直接舍弃第一个那个前缀，就不写那一部分脚本了）</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0xA4</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0x92</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0xA0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0x18</span>, <span class="number">0x81</span>, <span class="number">0xDE</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0xF0</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0x15</span>, <span class="number">0x5B</span>, <span class="number">0x75</span>, <span class="number">0x1F</span>]</span><br><span class="line">flag = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        a[i] = (a[i] &lt;&lt; <span class="number">2</span>) % <span class="number">0x100</span> | (a[i] &gt;&gt; <span class="number">6</span>)<span class="comment">#%0x100是为了防止爆破的时候溢出</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(a[i] ^ <span class="number">32</span>-i-<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a[i] = (a[i] &gt;&gt; <span class="number">2</span>) | (a[i] &lt;&lt; <span class="number">6</span>) % <span class="number">0x100</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(a[i] ^ <span class="number">32</span>-i-<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+flag)</span><br><span class="line"><span class="comment">#flag&#123;ReA11y_4_B@89_mlp5_4_XmAn_&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次知道有%0x100是用来防止溢出的，涨知识了，但还是不太懂原理/(ㄒoㄒ)/~~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[ACTF新生赛2020]rome</title>
      <link href="/2022/10/08/27/"/>
      <url>/2022/10/08/27/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-ACTF新生赛2020-rome"><a href="#BUU-ACTF新生赛2020-rome" class="headerlink" title="BUU[ACTF新生赛2020]rome"></a>BUU[ACTF新生赛2020]rome</h2><p>分析</p><p>首先查壳，无壳32位，放入IDA分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220704185946167.png" alt="image-20220704185946167"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220704190001224.png" alt="image-20220704190001224"></p><p>就是简单的分析，两个函数处理大小写字母和符号然后比较字符</p><p>脚本（这里用穷举法）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">16</span>] = &#123; <span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;l&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">127</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line">z=j;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">64</span>&amp;&amp;j&lt;=<span class="number">90</span>)</span><br><span class="line">j=(j<span class="number">-51</span>)%<span class="number">26</span>+<span class="number">65</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">96</span>&amp;&amp;j&lt;=<span class="number">122</span>)</span><br><span class="line">j=(j<span class="number">-79</span>)%<span class="number">26</span>+<span class="number">97</span>;</span><br><span class="line"><span class="keyword">if</span>(j==a[i])</span><br><span class="line">flag[i]=z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;Cae3ar_th4_Gre@t&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[FlareOn4]login</title>
      <link href="/2022/10/08/26/"/>
      <url>/2022/10/08/26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-FlareOn4-login"><a href="#BUU-FlareOn4-login" class="headerlink" title="BUU[FlareOn4]login"></a>BUU[FlareOn4]login</h2><p>分析</p><p>下载题后，是一个.html的后缀，直接用记事本打开</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220704100646382.png" alt="image-20220704100646382"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE Html /&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;FLARE On 2017&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;flag&quot; id=&quot;flag&quot; value=&quot;Enter the flag&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; id=&quot;prompt&quot; value=&quot;Click to check the flag&quot; /&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            document.getElementById(&quot;prompt&quot;).onclick = function () &#123;</span><br><span class="line">                var flag = document.getElementById(&quot;flag&quot;).value;</span><br><span class="line">                var rotFlag = flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;);//发现是右移13位的操作，想到了凯撒密码</span><br><span class="line">                if (&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot; == rotFlag) &#123;</span><br><span class="line">                    alert(&quot;Correct flag!&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    alert(&quot;Incorrect flag, rot again&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接着去在线解密凯撒密码</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220704101052517.png" alt="image-20220704101052517"></p><p>flag{<a href="mailto:&#67;&#108;&#x69;&#101;&#x6e;&#x74;&#83;&#x69;&#x64;&#x65;&#76;&#111;&#103;&#x69;&#110;&#115;&#65;&#114;&#x65;&#x45;&#x61;&#115;&#x79;&#64;&#x66;&#108;&#97;&#x72;&#x65;&#45;&#111;&#110;&#46;&#x63;&#111;&#109;">&#67;&#108;&#x69;&#101;&#x6e;&#x74;&#83;&#x69;&#x64;&#x65;&#76;&#111;&#103;&#x69;&#110;&#115;&#65;&#114;&#x65;&#x45;&#x61;&#115;&#x79;&#64;&#x66;&#108;&#97;&#x72;&#x65;&#45;&#111;&#110;&#46;&#x63;&#111;&#109;</a>}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[羊城杯 2020]login</title>
      <link href="/2022/10/08/25/"/>
      <url>/2022/10/08/25/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-羊城杯-2020-login"><a href="#BUU-羊城杯-2020-login" class="headerlink" title="BUU[羊城杯 2020]login"></a>BUU[羊城杯 2020]login</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先下载文件下来发现是一个py编译的exe，需要解包，然后反编译成py文件才能做</p><p>于是用cmd弄了一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220703143716673.png" alt="image-20220703143716673"></p><p>PS:把pyinstxtractor.py和6.exe（py文件名）文件放在同个目录下然后打开cmd，进入该目录，输入：python3（这个是你的python地址） pyinstxtractor.py 6.exe 这里我是把pyinstxtractor.py和6.exe都放在我的python地址python3里头了</p><p>然后它会生成一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220703144141678.png" alt="image-20220703144141678"></p><p>然后去里面找到struct和login这两个东西，然后分别放入winhex中去恢复数据，因为在将python文件打包成exe文件的过程中，会抹去pyc文件前面的部分信息，所以在反编译之前需要检查并添加上这部分信息，这部分信息可以通过struct文件获取</p><p>windex中打开struct文件后，把struct文件前几个字节插入login开头（插入的个数还是要看解包后的文件是从哪里开始丢失的数据）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220703144650657.png" alt="image-20220703144650657"></p><p>这就是丢失部分，然后去补充到login里头，也就是复制粘贴一下</p><p>即可，然后将login的后缀改成.pyc</p><p>接着用uncompyle6转换成python代码（<a href="https://www.cnblogs.com/pcat/p/11625300.html">uncompyle6安装使用方法 - pcat - 博客园 (cnblogs.com)</a>）PS:这里python要是2.6-3.8的版本</p><p>然后用python去美化一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input1 = <span class="built_in">input</span>(<span class="string">&#x27;input something:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input1) != <span class="number">14</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong length!&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    code = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        code.append(<span class="built_in">ord</span>(input1[i]) ^ <span class="built_in">ord</span>(input1[(i + <span class="number">1</span>)]))</span><br><span class="line">    code.append(<span class="built_in">ord</span>(input1[<span class="number">13</span>]))</span><br><span class="line">    a1 = code[<span class="number">2</span>]</span><br><span class="line">    a2 = code[<span class="number">1</span>]</span><br><span class="line">    a3 = code[<span class="number">0</span>]</span><br><span class="line">    a4 = code[<span class="number">3</span>]</span><br><span class="line">    a5 = code[<span class="number">4</span>]</span><br><span class="line">    a6 = code[<span class="number">5</span>]</span><br><span class="line">    a7 = code[<span class="number">6</span>]</span><br><span class="line">    a8 = code[<span class="number">7</span>]</span><br><span class="line">    a9 = code[<span class="number">9</span>]</span><br><span class="line">    a10 = code[<span class="number">8</span>]</span><br><span class="line">    a11 = code[<span class="number">10</span>]</span><br><span class="line">    a12 = code[<span class="number">11</span>]</span><br><span class="line">    a13 = code[<span class="number">12</span>]</span><br><span class="line">    a14 = code[<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">if</span> (a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>) &amp; (a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>) &amp; (a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>) &amp; (a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>) &amp; (a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>) &amp; (a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>) &amp; (a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>) &amp; (a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>) &amp; (a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>) &amp; (a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>) &amp; (a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>) &amp; (a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag is GWHT&#123;md5(your_input)&#125;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulations and have fun!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Sorry,plz try again...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s=Solver()</span><br><span class="line">    a1=Int(<span class="string">&#x27;a1&#x27;</span>)</span><br><span class="line">    a2=Int(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">    a3=Int(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">    a4=Int(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">    a5=Int(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">    a6=Int(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">    a7=Int(<span class="string">&#x27;a7&#x27;</span>)</span><br><span class="line">    a8=Int(<span class="string">&#x27;a8&#x27;</span>)</span><br><span class="line">    a9=Int(<span class="string">&#x27;a9&#x27;</span>)</span><br><span class="line">    a10=Int(<span class="string">&#x27;a10&#x27;</span>)</span><br><span class="line">    a11=Int(<span class="string">&#x27;a11&#x27;</span>)</span><br><span class="line">    a12=Int(<span class="string">&#x27;a12&#x27;</span>)</span><br><span class="line">    a13=Int(<span class="string">&#x27;a13&#x27;</span>)</span><br><span class="line">    a14=Int(<span class="string">&#x27;a14&#x27;</span>)</span><br><span class="line">    s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">    s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">    s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">    s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + a8*<span class="number">128</span>  - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">    s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">    s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">    s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">    s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">    s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">    s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">    s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">    s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">    s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">    s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line">    <span class="keyword">if</span> s.check()==sat:</span><br><span class="line">        <span class="built_in">print</span>(s.model())</span><br><span class="line">    code=[<span class="literal">None</span>]*<span class="number">14</span></span><br><span class="line">    code[<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line">    code[<span class="number">1</span>]=<span class="number">24</span></span><br><span class="line">    code[<span class="number">2</span>]=<span class="number">119</span></span><br><span class="line">    code[<span class="number">3</span>]=<span class="number">7</span></span><br><span class="line">    code[<span class="number">4</span>]=<span class="number">104</span></span><br><span class="line">    code[<span class="number">5</span>]=<span class="number">43</span></span><br><span class="line">    code[<span class="number">6</span>]=<span class="number">28</span></span><br><span class="line">    code[<span class="number">7</span>]=<span class="number">91</span></span><br><span class="line">    code[<span class="number">8</span>]=<span class="number">108</span></span><br><span class="line">    code[<span class="number">9</span>]=<span class="number">52</span></span><br><span class="line">    code[<span class="number">10</span>]=<span class="number">88</span></span><br><span class="line">    code[<span class="number">11</span>]=<span class="number">74</span></span><br><span class="line">    code[<span class="number">12</span>]=<span class="number">88</span></span><br><span class="line">    code[<span class="number">13</span>]=<span class="number">33</span></span><br><span class="line">    inputs=[<span class="literal">None</span>]*<span class="number">14</span></span><br><span class="line">    inputs[<span class="number">13</span>]=code[<span class="number">13</span>]</span><br><span class="line">    flag=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        inputs[i]=(code[i]^inputs[i+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(inputs[i])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment">#U_G07_th3_k3y!</span></span><br></pre></td></tr></table></figure><p>解出来之后直接去试flag发现不对，就考虑到是不是用了什么加密，试了一下md5加密，然后</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220703150219378.png" alt="image-20220703150219378"></p><p>flag{flag{58964088b637e50d3a22b9510c1d1ef8}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次做这种题没什么经验，都是看大佬写的来复现的，以后遇到这种题应该知道步骤了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[安洵杯 2019]crackMe</title>
      <link href="/2022/10/08/24/"/>
      <url>/2022/10/08/24/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-安洵杯-2019-crackMe"><a href="#BUU-安洵杯-2019-crackMe" class="headerlink" title="BUU[安洵杯 2019]crackMe"></a>BUU[安洵杯 2019]crackMe</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，无壳32位，放入IDA</p><p>先shift+F12找到关键string</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702110620018.png" alt="image-20220702110620018"></p><p>这里直接交叉引用它，去找到它</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702110827560.png" alt="image-20220702110827560"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702110847733.png" alt="image-20220702110847733"></p><p>那么新的表为abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/</p><p>接着去看一下Handler函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111036622.png" alt="image-20220702111036622"></p><p>接着去sub_411172函数看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111118261.png" alt="image-20220702111118261"></p><p>很容易知道v2就是SM4加密的密匙了，然后就这去看一下TopLevelExceptionFilter函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111325299.png" alt="image-20220702111325299"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111339600.png" alt="image-20220702111339600"></p><p>那么换位之后的Str2为”U1ATIOpkOyWSvGm/YOYFR4!!”</p><p>然后看一下sub_41126C函数，确定Str1</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111525453.png" alt="image-20220702111525453"></p><p>发现它是一个base64的加密，但是前面又有一个sub_4110FF函数，点进去看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111608106.png" alt="image-20220702111608106"></p><p>那么新表为”yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx”，然后去看一下sub_411136函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220702111653662.png" alt="image-20220702111653662"></p><p>发现只有Str1=Str2才正确</p><h3 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h3><p>1.因为最后Str1==Str2，所以首先是将Str2进行换表的base64解密</p><p>2.然后将解出来的内容再去进行SM4的解密</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64<span class="comment">#base64换表解密</span></span><br><span class="line">base = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">diy_base = <span class="string">&#x27;yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx&#x27;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;U1ATIOpkOyWSvGm/YOYFR4!!&#x27;</span></span><br><span class="line">ss = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">2</span>):</span><br><span class="line">ss += base[diy_base.find(s[i])]</span><br><span class="line">ss += <span class="string">&#x27;==&#x27;</span></span><br><span class="line">a = base64.b64decode(ss)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">hex</span>,a)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line">cipher_num = <span class="number">0x59d095290df2400614f48d276906874e</span><span class="comment">#box</span></span><br><span class="line">mk = <span class="number">0x77686572655f6172655f755f6e6f773f</span><span class="comment">#key</span></span><br><span class="line">clear_num = decrypt(cipher_num, mk) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(clear_num)[<span class="number">2</span>:]).decode()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;SM4foRExcepioN?!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一次见SM4的加密，是看别的大佬才知道有这种特征值。这也是第一次遇到base64中还存在其他函数进行换表，长见识了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CFI-CTF 2018 IntroToPE</title>
      <link href="/2022/10/08/23/"/>
      <url>/2022/10/08/23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CFI-CTF-2018-IntroToPE"><a href="#CFI-CTF-2018-IntroToPE" class="headerlink" title="[CFI-CTF 2018]IntroToPE"></a>[CFI-CTF 2018]IntroToPE</h2><p>分析</p><p>首先查壳发现是是一个net的文件然后运行一下看一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220630210732746.png" alt="image-20220630210732746"></p><p>这里直接用dnSpy打开，然后根据这个messagebox来，如果要正确的话，那么一定要按Validate，然后去dnSpy中搜索看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220630211254151.png" alt="image-20220630211254151"></p><p>可以看到这里是很典型的base64的加密，直接去解密看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220630211431399.png" alt="image-20220630211431399"></p><p>得到flag{.NetC#<em>1s</em>@w3s0m3}</p><p>总结</p><p>这是第一次做这种题，用C#写的，以后应该也会遇见吧，要多留意，一般C#的题都用dnSpy来解题</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019红帽杯 xx</title>
      <link href="/2022/10/08/22/"/>
      <url>/2022/10/08/22/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2019红帽杯-xx"><a href="#2019红帽杯-xx" class="headerlink" title="[2019红帽杯]xx"></a>[2019红帽杯]xx</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，发现是64位无壳的，然后分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220629213413601.png" alt="image-20220629213413601"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220629213439078.png" alt="image-20220629213439078"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220629213510929.png" alt="image-20220629213510929"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220629213530344.png" alt="image-20220629213530344"></p><h4 id="xxtea函数"><a href="#xxtea函数" class="headerlink" title="xxtea函数"></a>xxtea函数</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220629214544222.png" alt="image-20220629214544222"></p><p>首先这一部分就像是一个tea加密然后结合题目XX就在是可能是xxtea加密</p><h4 id="总的分析"><a href="#总的分析" class="headerlink" title="总的分析"></a>总的分析</h4><ol><li>判断输入的字符串的每个字符是否包含在”qwertyuiopasdfghjklzxcvbnm1234567890”中</li><li>取输入字符串的前4位字符，即”flag”，扩展为16位，作为xxtea加密的秘钥key</li><li>将输入的字符串使用key加密，加密后的字符保存在字符数组v19，共24位字符</li><li>打乱v19数组，保存到v20数组中</li><li>将24位字符，每3位为一组，每一组都进行异或，得到新的加密字符串</li><li>将新的加密字符串与已经存在的字符串比较，相同即正确</li></ol><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxtea</span><br><span class="line">result = <span class="string">&#x27;CE BC 40 6B 7C 3A 95 C0 EF 9B 20 20 91 F7 02 35 23 18 02 C8 E7 56 56 FA&#x27;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">res = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> result]<span class="comment">#小端序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i):</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            t = res[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t ^= res[n]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):<span class="comment">#三个一组</span></span><br><span class="line">        res[i*<span class="number">3</span>+j] ^= t</span><br><span class="line">box = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">22</span>]</span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(box)):<span class="comment">#改顺序</span></span><br><span class="line">    m.append(res[box[i]])</span><br><span class="line">key = <span class="string">&#x27;flag&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">12</span><span class="comment">#key转为16位</span></span><br><span class="line"><span class="built_in">print</span>(xxtea.decrypt(<span class="built_in">bytes</span>(m),key,padding=<span class="literal">False</span>))</span><br><span class="line"><span class="comment">#flag&#123;CXX_and_++tea&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>题目自己做的话还是有点难有些复杂，参杂了很多内容，综合水平比较高。自己的写脚本能力还是太弱了，只能看得懂大佬们写的脚本，自己还是不能独立写出脚本，还要多多加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[羊城杯 2020]easyre</title>
      <link href="/2022/10/08/21/"/>
      <url>/2022/10/08/21/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU-羊城杯-2020-easyre"><a href="#BUU-羊城杯-2020-easyre" class="headerlink" title="BUU[羊城杯 2020]easyre"></a>BUU[羊城杯 2020]easyre</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先查壳，发现是无壳64位的，放入对应的IDA分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220627164839521.png" alt="image-20220627164839521"></p><p>可以看到，这里是只有那个if语句不成立才能得到到flag，于是去看一下那三个encode函数</p><h4 id="第一个encode"><a href="#第一个encode" class="headerlink" title="第一个encode"></a>第一个encode</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220627165127302.png" alt="image-20220627165127302"></p><p>这里看到这些地方，猜测是base64，于是去一下alphabet函数看一下码表</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220627165217274.png" alt="image-20220627165217274"></p><p>就是普通的base64</p><h4 id="第二个encode"><a href="#第二个encode" class="headerlink" title="第二个encode"></a>第二个encode</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220627165243442.png" alt="image-20220627165243442"></p><p>发现是将编码后的字符串以13个一组的换位置</p><h4 id="第三个encode"><a href="#第三个encode" class="headerlink" title="第三个encode"></a>第三个encode</h4><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220627165625393.png" alt="image-20220627165625393"></p><p>这里看到先减去48(0) 97(a) 65(A)再位移三位然后除于再加到原来的大小写，很容易得出这是移三位的凯撒密码</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data=<span class="string">&#x27;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&#x27;</span></span><br><span class="line">data1=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:<span class="comment">#凯撒密码部分解密</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(i)&gt;=<span class="number">48</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">57</span>:</span><br><span class="line">data1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i)-<span class="number">3</span>-<span class="number">48</span>)%<span class="number">10</span>+<span class="number">48</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">ord</span>(i)&gt;=<span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">90</span>:</span><br><span class="line">data1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i)-<span class="number">3</span>-<span class="number">65</span>)%<span class="number">26</span>+<span class="number">65</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">ord</span>(i)&gt;=<span class="number">97</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">122</span>:</span><br><span class="line">data1 += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i)-<span class="number">3</span>-<span class="number">97</span>)%<span class="number">26</span>+<span class="number">97</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">data1 += i</span><br><span class="line">flag = data1[<span class="number">13</span>:<span class="number">26</span>] + data1[<span class="number">39</span>:] + data1[:<span class="number">13</span>] + data1[<span class="number">26</span>:<span class="number">39</span>]<span class="comment">#凯撒解码后的换位置</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))<span class="comment">#base64解密</span></span><br><span class="line"><span class="comment">#GWHT&#123;672cc4778a38e80cb362987341133ea2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要善于发现每个函数的特征部分，发现是什么加密原理，便于解密。还要加油锻炼自己写脚本的能力我的能力还是不太行/(ㄒoㄒ)/~~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF新生赛2020 easyre</title>
      <link href="/2022/10/08/20/"/>
      <url>/2022/10/08/20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>收先查壳，发现是32位的，然后放入对应的IDA去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220524212504694.png" alt="image-20220524212504694"></p><p>然后去看看_data_start_数组中的内容</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220524212744368.png" alt="image-20220524212744368"></p><p>整体逻辑十分简单，就相当于是在_data_start__数组中输入我们的数组-1，如果与v4数组相同就是正确的值。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v4[]=&#123;<span class="number">42</span>, <span class="number">70</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">78</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">40</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">43</span>, <span class="number">64</span>&#125; ;</span><br><span class="line"><span class="keyword">char</span> v5[]=&#123;</span><br><span class="line"> <span class="number">0x7e</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x7B</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, </span><br><span class="line">  <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x63</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x60</span>, </span><br><span class="line">  <span class="number">0x5F</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x5A</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, </span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, </span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x46</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x43</span>, <span class="number">0x42</span>, </span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>, <span class="number">0x3D</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0x3A</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, </span><br><span class="line">  <span class="number">0x37</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x31</span>, <span class="number">0x30</span>, <span class="number">0x2F</span>, <span class="number">0x2E</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x27</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x24</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(v5); j++ )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(v4[i]==v5[j])</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,j+<span class="number">1</span>);<span class="comment">//用的是-1去遍历的所以结果要+1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//U9X_1S_W6@T?</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU--BabyAlgorithm</title>
      <link href="/2022/10/08/2/"/>
      <url>/2022/10/08/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="BUU–BabyAlgorithm"><a href="#BUU–BabyAlgorithm" class="headerlink" title="BUU–BabyAlgorithm"></a>BUU–BabyAlgorithm</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先用工具查壳看是否有壳<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404205707257.png" alt="image-20220404205707257"></p><p>发现这是个64位无壳的文件，于是用IDA进行静态分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404205827920.png" alt="image-20220404205827920"></p><p>如果要得到flag就要是数组v7与数组v8相等</p><p>sub_400874函数调用了v7我们进入sub_400874函数看它在干嘛<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404210032697.png" alt="image-20220404210032697"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404210121959.png" alt="image-20220404210121959"></p><p>sub_40067A发现这是一个生产密匙流的函数，然后看看sub_400646函数在干嘛<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404210237569.png" alt="image-20220404210237569"></p><p>这里是交换的意思然后退出去看看sub_400753函数在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220404210322470.png" alt="image-20220404210322470"></p><p>这是进行了加密运算，也就是说我们可以从这里得到flag</p><p>flag也就是密文去异或密匙流得到的明文</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* s, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len_k)</span><span class="comment">//流密匙的生成 (也就是新的s盒生产，它由密钥和与原s盒生成) </span></span></span><br><span class="line"><span class="function"></span>&#123;                                                                       <span class="comment">//需要输入s表，密匙，密匙长度 </span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">s[i] = i;<span class="comment">//初始化s盒 </span></span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];                             </span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RC4加解密函数</span></span><br><span class="line"><span class="comment">unsigned char* Data     加解密的数据</span></span><br><span class="line"><span class="comment">unsigned long Len_D     明文的长度 </span></span><br><span class="line"><span class="comment">unsigned char* key      密钥</span></span><br><span class="line"><span class="comment">unsigned long Len_k     密钥长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len_D, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len_k)</span> <span class="comment">//加解密(由密匙流和明文异或而得到密文) </span></span></span><br><span class="line"><span class="function"></span>&#123;                                                                                                 <span class="comment">//需要输入密文，密文长度，（密匙，密匙长度用于密匙流生成) </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>];</span><br><span class="line">rc4_init(s, key, Len_k);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];<span class="comment">//Data[为输入的明文] (这里逆向过来是密文异或密匙流而得到明文) </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">&quot;Nu1Lctf233&quot;</span>;<span class="comment">//密匙 </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> key_len = <span class="keyword">sizeof</span>(key) - <span class="number">1</span>;<span class="comment">//密匙长度 </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data[] = &#123; </span><br><span class="line">        <span class="number">0xC6</span>, <span class="number">0x21</span>, <span class="number">0xCA</span>, <span class="number">0xBF</span>, <span class="number">0x51</span>, <span class="number">0x43</span>, <span class="number">0x37</span>, <span class="number">0x31</span>, <span class="number">0x75</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0xC0</span>, <span class="number">0x54</span>, <span class="number">0x6F</span>, <span class="number">0x8F</span>, <span class="number">0xEE</span>, <span class="number">0xF8</span>, <span class="number">0x5A</span>, <span class="number">0xA2</span>, <span class="number">0xC1</span>,</span><br><span class="line"><span class="number">0xEB</span>, <span class="number">0xA5</span>, <span class="number">0x34</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0xB2</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x2F</span>, <span class="number">0xF4</span>, <span class="number">0x51</span>, <span class="number">0x8E</span>, <span class="number">0x0C</span>, <span class="number">0xCC</span>, <span class="number">0x33</span>, <span class="number">0x53</span>, <span class="number">0x31</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0xD6</span>, <span class="number">0xCA</span>, <span class="number">0xEC</span>, <span class="number">0xD4</span> &#125;;<span class="comment">//密文 </span></span><br><span class="line">rc4_crypt(data, <span class="keyword">sizeof</span>(data), key, key_len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>RC4的算法的算法步骤：</p><p>1.先初始化s盒，也就是给出s[256]的初始化</p><p>2.初始化的s盒与密钥进行处理得到密匙流，处理方法</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i]=i;</span><br><span class="line">        k[i]=key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.然后用密匙流与明文去异或得到密文</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*Data,<span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];<span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU--findKey</title>
      <link href="/2022/10/08/19/"/>
      <url>/2022/10/08/19/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="BUU–findKey"><a href="#BUU–findKey" class="headerlink" title="BUU–findKey"></a>BUU–findKey</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，发现是32位无壳的，然后放入IDA中看看，直接shift+12去找关键点</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508170810194.png" alt="image-20220508170810194"></p><p>对它进行交叉引用，去看看这个程序要干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508170912439.png" alt="image-20220508170912439"></p><p>这里发现，它这里有两个一样的语句，直接nop掉一句，再声明一下就可以反汇编了</p><p>整个看起来很复杂，但是有用的也就那几个</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508171103534.png" alt="image-20220508171103534"></p><p>简单分析之后可以知道有用的部分只有sub_40101E函数和sub_401005这两个函数，其中sub_401005这个函数用了两次，首先去sub_40101E函数看看它在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508172505650.png" alt="image-20220508172505650"></p><p>再结合函数库</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508192202123.png" alt="image-20220508192202123"></p><p>能明白这里是一个哈希加密的东西。</p><p>然后去sub_401005函数看看在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220508192328110.png" alt="image-20220508192328110"></p><p>这是一个很简单的异或。整体的逻辑也就是要得到第二个消息盒所得到的值。首先要通过第一个异或得到第二个异或需要用的东西，再通过第二个异或得到flag。</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> Str[]=<span class="string">&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> v15[]=<span class="string">&quot;SS&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> v9=<span class="built_in">strlen</span>(Str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v9;i++)</span><br><span class="line">&#123;</span><br><span class="line">Str[i]^=v15[i%<span class="number">2</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,Str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c8837b23ff8aaa8a2dde915473ce0991</span><br></pre></td></tr></table></figure><p>然后知道得到的Str是通过哈希加密的，看这个结构为32位16进制，猜测是MD5的加密。接着进行第二个异或</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> String1[]=<span class="string">&quot;123321&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x69</span>, <span class="number">0x46</span>, <span class="number">0x02</span>, <span class="number">0x6E</span>, <span class="number">0x5F</span>, <span class="number">0x02</span>, <span class="number">0x6C</span>, <span class="number">0x57</span>, <span class="number">0x5B</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v10=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v10;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]^=String1[i%<span class="number">6</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;n0_Zu0_n0_die&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这道题涉及到了简单的花指令和哈希密码，本题的难点在于会忽视掉这个哈希密码，从而无法在第二个脚本中得到flag。</p><p>MD5的简单判别方法：</p><p>128 位的 MD5 散列在大多数情况下会被表示为 32 位十六进制数字。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020青龙组 singal</title>
      <link href="/2022/10/08/18/"/>
      <url>/2022/10/08/18/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="网鼎杯-2020-青龙组-singal"><a href="#网鼎杯-2020-青龙组-singal" class="headerlink" title="[网鼎杯 2020 青龙组]singal"></a>[网鼎杯 2020 青龙组]singal</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，发现32位无壳，进入IDA看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220507091053401.png" alt="image-20220507091053401"></p><p>看到vm_operad这个函数名字就明白它可能是一个vm逆向，接着很容易知道主要的内容是在vm_operad函数中。</p><p>然后点进去看看它在干嘛，一路看下来找到两个特殊的输出</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220507091331469.png" alt="image-20220507091331469"></p><p>点金read函数中看看是什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220507091409055.png" alt="image-20220507091409055"></p><p>这里很容易知道这个输入是15个字符</p><p>由前面的<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220507091601859.png" alt="image-20220507091601859"></p><p>这个函数，知道v4的取值在unk_403040中取456位。</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>然后我们将它跑一下，看看它的索引顺序和加密后的内容是什么</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> opcode[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> *a = (<span class="keyword">int</span> *)opcode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">vm_operad</span><span class="params">(<span class="keyword">int</span> *opcode, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> order[<span class="number">114</span>] = &#123;&#125;;<span class="comment">//执行顺序</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">100</span>]; </span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">200</span>]; <span class="comment">//Str[] </span></span><br><span class="line">  <span class="keyword">char</span> v5; </span><br><span class="line">  <span class="keyword">int</span> m; </span><br><span class="line">  <span class="keyword">int</span> z; </span><br><span class="line">  <span class="keyword">int</span> y; </span><br><span class="line">  <span class="keyword">int</span> x; </span><br><span class="line">  <span class="keyword">int</span> i; </span><br><span class="line">  <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">  z = <span class="number">0</span>;</span><br><span class="line">  m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )<span class="comment">//继续循环</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( opcode[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v4[z+<span class="number">100</span>] = v5;</span><br><span class="line">        ++i;</span><br><span class="line">        ++z;</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v5 = opcode[i + <span class="number">1</span>] + flag[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v5 = flag[x] - opcode[i + <span class="number">1</span>];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v5 = opcode[i + <span class="number">1</span>] ^ flag[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v5 = opcode[i + <span class="number">1</span>] * flag[x];</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        ++i;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        v4[y+<span class="number">100</span>] = opcode[i + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%#x, &quot;</span>,v4[y+<span class="number">100</span>]);<span class="comment">//打印比较的opcode,这里%#x是表示16进制输出时会带%号 </span></span><br><span class="line">        ++y;</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        flag[m] = v5;</span><br><span class="line">        ++i;</span><br><span class="line">        ++m;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,flag);<span class="comment">//输入点</span></span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v5 = flag[x] - <span class="number">1</span>;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v5 = flag[x] + <span class="number">1</span>;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,i);<span class="comment">//打印每次使用的索引</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vm_operad(a,<span class="number">114</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220507093313027.png" alt="image-20220507093313027"></p><p>知道了这些之后就进行解密处理了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逆向各个Handler得出flag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> opcode[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> *a = (<span class="keyword">int</span> *)opcode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">vm_decode</span><span class="params">(<span class="keyword">int</span> *opcode,<span class="keyword">int</span> len_114)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> order[<span class="number">100</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">96</span>, <span class="number">98</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">104</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">114</span>&#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> v4[] = &#123;<span class="number">0x22</span>, <span class="number">0x3f</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x18</span>, <span class="number">0xffffffa7</span>, <span class="number">0x31</span>, <span class="number">0xfffffff1</span>, <span class="number">0x28</span>, <span class="number">0xffffff84</span>, <span class="number">0xffffffc1</span>, <span class="number">0x1e</span>, <span class="number">0x7a</span>&#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;&#125;; <span class="comment">// [esp+13h] [ebp-E5h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+DBh] [ebp-1Dh]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [esp+DCh] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> z; <span class="comment">// [esp+E0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> x; <span class="comment">// [esp+E8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+ECh] [ebp-Ch]</span></span><br><span class="line">  x = <span class="number">15</span>;</span><br><span class="line">  z = <span class="number">15</span>;</span><br><span class="line">  m = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="built_in">strlen</span>(order) - <span class="number">1</span>;k&gt;=<span class="number">0</span>;k--)<span class="comment">//从后往前,这里把原来while循环直接换成了for循环，i就会改变，方便后面的写脚本 </span></span><br><span class="line">  &#123;</span><br><span class="line">i = order[k];</span><br><span class="line">    <span class="keyword">switch</span> ( opcode[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">--x;</span><br><span class="line">--z;</span><br><span class="line">        v5 = v4[z];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        flag[x] = v5 - opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        flag[x] = v5 + opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        flag[x] = v5 ^ opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        flag[x] = v5 / opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v5 = flag[--m];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        flag[x] = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        flag[x] = v5 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vm_decode(a,<span class="number">144</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跑一下就出flag了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;757515121f3d478&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这是第一次做vm逆向，有点不熟悉，是看了别的大佬的WP再自己重新分析的。<br>在比赛中，虚拟机题目常常有两种考法：</p><p>1.给可执行程序和opcode。去逆向emulator，结合opcode文件，推出flag</p><p>2.只给可执行程序。去逆向emulator，构造opcode，读取flag</p><p>拿到一个虚拟机之后，一般有以下几个逆向过程：</p><p>·  分析虚拟机入口，搞清虚拟机的输入，或者opcode位置</p><p>·  理清虚拟机结构，包括Dispatcher和各个Handler</p><p>·  逆向各个Handler，分析opcode的意义</p><p>本题属于第一种情况，以后还得多加油学！</p><p>文献：<a href="https://blog.csdn.net/weixin_43876357/article/details/108570305">(37条消息) 系统学习vm虚拟机逆向_43v3rY0unG的博客-CSDN博客_vm逆向</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[WUSTCTF2020]level4</title>
      <link href="/2022/10/08/17/"/>
      <url>/2022/10/08/17/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="BUU-WUSTCTF2020-level4"><a href="#BUU-WUSTCTF2020-level4" class="headerlink" title="BUU[WUSTCTF2020]level4"></a>BUU[WUSTCTF2020]level4</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先查壳，发现没有壳为64位，然后放入IDA分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220427205446998.png" alt="image-20220427205446998"></p><p>然后看英文提示数据结构和遍历，然后分别点进去第8行和第10行的函数看在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220427205605885.png" alt="image-20220427205605885"></p><p>这里分许出来为左根右（中序）</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220427205728866.png" alt="image-20220427205728866"></p><p>这里分析出来为左右跟为（后序）</p><p>然后去看看对应的序号的内容</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220427205911315.png" alt="image-20220427205911315"></p><p>已知了中序和后序很容易知道这里要求的是前序，开始写脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">char</span> mid[] = <span class="string">&quot;2f0t02T&#123;hcsiI_SwA__r7Ee&#125;&quot;</span>;  </span><br><span class="line"><span class="keyword">char</span> post[] = <span class="string">&quot;20f0Th&#123;2tsIS_icArE&#125;e7__w&quot;</span>;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(start &gt; end)   </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    <span class="keyword">int</span> i = start;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; end &amp;&amp; mid[i] != post[root]) i++;  <span class="comment">//定位根在中序的位置</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mid[i];  <span class="comment">//访问当前处理的树的根</span></span><br><span class="line">    pre(root<span class="number">-1</span>-(end-i), start, i - <span class="number">1</span>);  <span class="comment">//递归处理左子树</span></span><br><span class="line">    pre(root<span class="number">-1</span>, i + <span class="number">1</span>, end);  <span class="comment">//递归处理右子树  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;  </span><br><span class="line">    pre(<span class="number">23</span>, <span class="number">0</span>, <span class="number">23</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>得出flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wctf2020&#123;This_IS_A_7reE&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这是第一次做的二叉树的题目，了解了一些二叉树的规律</p><p>前序：根左右</p><p>中序：左根右</p><p>后序：左右根</p><p>脚本用本题的脚本稍作修改即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团CTF2021 高校安全挑战赛 Random</title>
      <link href="/2022/10/08/16/"/>
      <url>/2022/10/08/16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="美团CTF2021-高校安全挑战赛-Random"><a href="#美团CTF2021-高校安全挑战赛-Random" class="headerlink" title="美团CTF2021 高校安全挑战赛 Random"></a>美团CTF2021 高校安全挑战赛 Random</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳，发现没有壳32位exe，然后放入IDA中分析</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220426204932647.png" alt="image-20220426204932647"></p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220426204913349.png" alt="image-20220426204913349"></p><p>首先看到congratulation这里，就知道条件是要v7为42，然后发现v7是在上面的if( a == 43 )这个判断语句中，分析一下。得出b这个函数不断与 byte_502138这个函数去比较，每一位，也就是说能知道这个b函数是为42个成员在里面</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220426205346872.png" alt="image-20220426205346872"></p><p>然后也可以知道这个b函数就是找到flag的关键，看到最开头的部分</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220426205430567.png" alt="image-20220426205430567"></p><p>要有scanf的输出也就能知道a的初始值为0，再结合这个if的条件和它对应的else语句知道这里是不断的与随机数去异或能得到flag，然后我直接去动态调试去找第一个随机数的种子</p><p><img src="https://cdn.moran233.xyz/https://raw.githubusercontent.com/CTTTTTTTT/image/main/image-20220426205610063.png" alt="image-20220426205610063"></p><p>然后开始写脚本</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b[]=&#123;</span><br><span class="line">  <span class="number">0x3E</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x8E</span>, <span class="number">0x96</span>, <span class="number">0x1F</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0xDB</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0xF2</span>, <span class="number">0xA9</span>, <span class="number">0x9C</span>, <span class="number">0xC2</span>, <span class="number">0x8B</span>, <span class="number">0xF2</span>, <span class="number">0xFE</span>, <span class="number">0xAD</span>, <span class="number">0x8B</span>, </span><br><span class="line">  <span class="number">0x58</span>, <span class="number">0x7C</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0x31</span>, <span class="number">0x89</span>, <span class="number">0x76</span>, <span class="number">0x57</span>, </span><br><span class="line">  <span class="number">0x88</span>, <span class="number">0xDF</span>, <span class="number">0xB8</span>, <span class="number">0xE9</span>, <span class="number">0x01</span>, <span class="number">0xE9</span>, <span class="number">0xDE</span>, <span class="number">0xE5</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, </span><br><span class="line">  <span class="number">0x8F</span>, <span class="number">0x24</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0x29</span>;<span class="comment">//也是第一个随机数 </span></span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">42</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">42</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">srand(c);<span class="comment">//设置第一个随机数种子 </span></span><br><span class="line">srand(rand());<span class="comment">//拿第一个随机数作为第二个随机数的随机数种子 </span></span><br><span class="line">flag[i] = rand() ^ b[i];<span class="comment">//用第三个随机数去异或 </span></span><br><span class="line">c = rand();<span class="comment">//c放的是第四个随机数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;3e625fe0-fb18-4f87-93c1-1ec217f86796&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这里基本的分析还是能动的，如果实在是不知道可以去动态调试一下看看总体的过程。然后就是对srand和rand函数的了解要深刻，这里一开始自己写脚本的时候一直错在srand和rand函数这里，后来看了别人的WP才慢慢弄懂。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[Zer0pts2020]easy strcmp</title>
      <link href="/2022/10/08/15/"/>
      <url>/2022/10/08/15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="BUU-Zer0pts2020-easy-strcmp"><a href="#BUU-Zer0pts2020-easy-strcmp" class="headerlink" title="BUU[Zer0pts2020]easy strcmp"></a>BUU[Zer0pts2020]easy strcmp</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先将它查壳，发现为64位无壳，然后放入IDA分析，首先shift+F12去找找有什么关键的地方</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203042575.png" alt="image-20220425203042575"></p><p>然后交叉引用去找它</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203115808.png" alt="image-20220425203115808"></p><p>发现只要a2等于后面一串字符就可以了，于是去试flag发现错误，肯定没这么简单。于是我想起了之前做的题，可能藏在initr里，于是进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203254996.png" alt="image-20220425203254996"></p><p>然后去看看funcs_889的交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203340893.png" alt="image-20220425203340893"></p><p>果然是这里有东西被藏起来了，这里进去，发现并没有其他函数，而是一些代码，于是直接跟进funcs_889</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203647777.png" alt="image-20220425203647777"></p><p>看到sub_795是之前没有见过的，于是点进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425203739962.png" alt="image-20220425203739962"></p><p>看到 off_201028 = sub_6EA，说明off_201028这个函数被赋了新的函数在里面，于是点进去看看<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425204137015.png" alt="image-20220425204137015"></p><p>这里也就是说off_201028是直接用了strcmp这个函数的地址，而off_201028又被sub_6EA重新赋新的东西，所以说sub_6EA表示是strcmp的意思，于是点进sub_6EA去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425204342514.png" alt="image-20220425204342514"></p><p>于是开始写脚本</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;zer0pts&#123;********CENSORED********&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> b[]=&#123;<span class="number">0</span>, <span class="number">0x410A4335494A0942</span>, <span class="number">0x0B0EF2F50BE619F0</span>, <span class="number">0x4F0A3A064A35282B</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="keyword">uint64_t</span>*)&amp;(a[i*<span class="number">8</span>]))+=b[i];<span class="comment">//这里是小端序的输出，所以用这个格式 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zer0pts&#123;l3ts_m4k3_4_DETOUR_t0d4y&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>要善于去查找和交叉引用以及深入地跟踪，还有注意大小端的交换！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[ACTF新生赛2020]Oruga</title>
      <link href="/2022/10/08/14/"/>
      <url>/2022/10/08/14/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="BUU-ACTF新生赛2020-Oruga"><a href="#BUU-ACTF新生赛2020-Oruga" class="headerlink" title="BUU[ACTF新生赛2020]Oruga"></a>BUU[ACTF新生赛2020]Oruga</h3><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳，发现无壳是64位的文件，放入对应的IDA中</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425193130757.png" alt="image-20220425193130757"></p><p>看到这里，很容易知道解题关键在sub_78A函数里头，于是点进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425193341754.png" alt="image-20220425193341754"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425193413825.png" alt="image-20220425193413825"></p><p>也就是说这是不能碰壁的游戏，于是开始找到对应的map，也就是unk_201020，很容易知道这是个16*16的map然后去看看winhex下的样子</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425193610636.png" alt="image-20220425193610636"></p><h5 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h5><p>那么走的思路是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220425194054373.png" alt="image-20220425194054373"></p><p>得到flag{MEWEMEWJMEWJM}</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这是一种我做过的新的游戏题，类似于普通的迷宫，但是又有区别，还是要注意标题，才能便于分析！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[FlareOn6]Overlong</title>
      <link href="/2022/10/08/13/"/>
      <url>/2022/10/08/13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="BUU-FlareOn6-Overlong"><a href="#BUU-FlareOn6-Overlong" class="headerlink" title="BUU[FlareOn6]Overlong"></a>BUU[FlareOn6]Overlong</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>查壳，发现32位，然后去IDA去看看在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424194407971.png" alt="image-20220424194407971"></p><p>MessageBoxA看见之后就想到了OD，之前做creakeme的消息盒</p><p>然后去看一下unk_402008这个函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424194559284.png" alt="image-20220424194559284"></p><p>然后去看看sub_401160函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424194652105.png" alt="image-20220424194652105"></p><p>这里可以看到unk_402008这个数组的成员远远不止28位</p><p>但是这里再累加，就会发现这里会溢出来，于是就去OD看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424195054826.png" alt="image-20220424195054826"></p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>这个地方是设定2008这个数组的大小的，我们将它改成对应的位置，<img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424195227391.png" alt="image-20220424195227391"></p><p>（AF对应10进制数为175）</p><p>然后保存后去运行一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424195412478.png" alt="image-20220424195412478"></p><p>得到了flag</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>去看看sub_401000函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220424194723718.png" alt="image-20220424194723718"></p><p>然后发现，好像不缺什么只要把这个Text输出就OK了于是就写脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dword_402008[]=&#123;</span><br><span class="line"><span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x89</span>,<span class="number">0xC0</span>,<span class="number">0xA0</span>,<span class="number">0xC1</span>,<span class="number">0xAE</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA5</span>,</span><br><span class="line"><span class="number">0xC1</span>,<span class="number">0xB6</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA5</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xB2</span>,<span class="number">0xF0</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xA0</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA2</span>,<span class="number">0x72</span>,<span class="number">0x6F</span>,<span class="number">0xC1</span>,<span class="number">0xAB</span>,</span><br><span class="line"><span class="number">0x65</span>,<span class="number">0xE0</span>,<span class="number">0x80</span>,<span class="number">0xA0</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xB4</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0xC1</span>,<span class="number">0xA5</span>,<span class="number">0x20</span>,<span class="number">0xC1</span>,<span class="number">0xA5</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xAE</span>,<span class="number">0x63</span>,<span class="number">0xC1</span>,</span><br><span class="line"><span class="number">0xAF</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA4</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA9</span>,<span class="number">0x6E</span>,<span class="number">0xC1</span>,</span><br><span class="line"><span class="number">0xA7</span>,<span class="number">0xC0</span>,<span class="number">0xBA</span>,<span class="number">0x20</span>,<span class="number">0x49</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xC1</span>,</span><br><span class="line"><span class="number">0xA1</span>,<span class="number">0xC1</span>,<span class="number">0x9F</span>,<span class="number">0xC1</span>,<span class="number">0x8D</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xC1</span>,<span class="number">0xB4</span>,</span><br><span class="line"><span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA8</span>,<span class="number">0xC1</span>,<span class="number">0x9F</span>,</span><br><span class="line"><span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA5</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xC1</span>,<span class="number">0xA5</span>,<span class="number">0xE0</span>,</span><br><span class="line"><span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xAE</span>,<span class="number">0xC1</span>,<span class="number">0x9F</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x81</span>,<span class="number">0x83</span>,<span class="number">0xC1</span>,<span class="number">0x9F</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xAF</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,</span><br><span class="line"><span class="number">0xC1</span>,<span class="number">0x84</span>,<span class="number">0x5F</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA9</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,</span><br><span class="line"><span class="number">0x6E</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x9F</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0xA7</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA6</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xAC</span>,<span class="number">0xE0</span>,<span class="number">0x81</span>,</span><br><span class="line"><span class="number">0xA1</span>,<span class="number">0xC1</span>,<span class="number">0xB2</span>,<span class="number">0xC1</span>,<span class="number">0xA5</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xAD</span>,<span class="number">0xF0</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xAF</span>,<span class="number">0x6E</span>,<span class="number">0xC0</span>,<span class="number">0xAE</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xA3</span>,</span><br><span class="line"><span class="number">0x6F</span>,<span class="number">0xF0</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0xAD</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401000</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* a1, <span class="keyword">unsigned</span> <span class="keyword">char</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v3; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line"><span class="keyword">char</span> v4; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( *a2 &gt;&gt; <span class="number">3</span> == <span class="number">30</span> )</span><br><span class="line">&#123;</span><br><span class="line">v4 = a2[<span class="number">3</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | ((a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">12</span>) | ((*a2 &amp; <span class="number">7</span>) &lt;&lt; <span class="number">18</span>);</span><br><span class="line">v3 = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( *a2 &gt;&gt; <span class="number">4</span> == <span class="number">14</span> )</span><br><span class="line">&#123;</span><br><span class="line">v4 = a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | ((*a2 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">12</span>);</span><br><span class="line">v3 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( *a2 &gt;&gt; <span class="number">5</span> == <span class="number">6</span> )</span><br><span class="line">&#123;</span><br><span class="line">v4 = a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span> | ((*a2 &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">v3 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v4 = a2[<span class="number">0</span>];</span><br><span class="line">v3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v4;</span><br><span class="line"><span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401160</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *a1,<span class="keyword">unsigned</span> <span class="keyword">char</span> *a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v3; <span class="comment">// ST08_4</span></span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i )</span><br><span class="line">&#123;</span><br><span class="line">a2 += sub_401000(a1, a2);</span><br><span class="line">v3 = *a1++;</span><br><span class="line"><span class="keyword">if</span> ( !v3 )</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v4; </span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>((<span class="keyword">char</span> *)dword_402008);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Text[<span class="number">128</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *s=dword_402008;</span><br><span class="line">v4 = sub_401160(Text, s, len);</span><br><span class="line">Text[v4] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>,Text);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>题目做出来的方法有很多，善于观察，比如overlong就提示了这里是过长的意思，往题目方向去想。OD查找对应位置需要对应IDA一起来看。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyasm</title>
      <link href="/2022/10/08/123-1/"/>
      <url>/2022/10/08/123-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-easyasm"><a href="#1-easyasm" class="headerlink" title="(1):easyasm"></a>(1):easyasm</h4><p>​        题目： <a href="https://pan.baidu.com/s/1MA-OeBpQ2DNe1th9AfbWQQ">https://pan.baidu.com/s/1MA-OeBpQ2DNe1th9AfbWQQ</a></p><p>​        提取码：tuyt</p><p>题解：</p><p>1.首先用exe去看有没有壳，发现没壳用IDA打开，发现不可以F5看反编译，于是就开始看汇编代码，它在干嘛</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg001:0000 seg001          segment byte public &#x27;UNK&#x27; use16</span><br><span class="line">seg001:0000                 assume cs:seg001</span><br><span class="line">seg001:0000                 assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing</span><br><span class="line">seg001:0000                 db  91h</span><br><span class="line">seg001:0001                 db  61h ; a</span><br><span class="line">seg001:0002                 db    1</span><br><span class="line">seg001:0003                 db 0C1h</span><br><span class="line">seg001:0004                 db  41h ; A</span><br><span class="line">seg001:0005                 db 0A0h</span><br><span class="line">seg001:0006                 db  60h ; `</span><br><span class="line">seg001:0007                 db  41h ; A</span><br><span class="line">seg001:0008                 db 0D1h</span><br><span class="line">seg001:0009                 db  21h ; !</span><br><span class="line">seg001:000A                 db  14h</span><br><span class="line">seg001:000B                 db 0C1h</span><br><span class="line">seg001:000C                 db  41h ; A</span><br><span class="line">seg001:000D                 db 0E2h</span><br><span class="line">seg001:000E                 db  50h ; P</span><br><span class="line">seg001:000F                 db 0E1h</span><br><span class="line">seg001:0010                 db 0E2h</span><br><span class="line">seg001:0011                 db  54h ; T</span><br><span class="line">seg001:0012                 db  20h</span><br><span class="line">seg001:0013                 db 0C1h</span><br><span class="line">seg001:0014                 db 0E2h</span><br><span class="line">seg001:0015                 db  60h ; `</span><br><span class="line">seg001:0016                 db  14h</span><br><span class="line">seg001:0017                 db  30h ; 0</span><br><span class="line">seg001:0018                 db 0D1h</span><br><span class="line">seg001:0019                 db  51h ; Q</span><br><span class="line">seg001:001A                 db 0C0h</span><br><span class="line">seg001:001B                 db  17h</span><br><span class="line">seg001:001C                 db    0</span><br><span class="line">seg001:001D                 db    0</span><br><span class="line">seg001:001E                 db    0</span><br><span class="line">seg001:001F                 db    0</span><br><span class="line">seg001:001F seg001          ends</span><br><span class="line">seg001:001F</span><br><span class="line">seg002:0000 ; ===========================================================================</span><br><span class="line">seg002:0000</span><br><span class="line">seg002:0000 ; Segment type: Uninitialized</span><br><span class="line">seg002:0000 seg002          segment byte stack &#x27;STACK&#x27; use16</span><br><span class="line">seg002:0000                 assume cs:seg002</span><br><span class="line">seg002:0000                 assume es:nothing, ss:nothing, ds:dseg, fs:nothing, gs:nothing</span><br><span class="line">seg002:0000                 db 80h dup(0)</span><br><span class="line">seg002:0000 seg002          ends</span><br><span class="line">seg002:0000</span><br><span class="line">seg003:0000 ; ===========================================================================</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; Segment type: Pure code</span><br><span class="line">seg003:0000 seg003          segment byte public &#x27;CODE&#x27; use16</span><br><span class="line">seg003:0000                 assume cs:seg003</span><br><span class="line">seg003:0000                 assume es:nothing, ss:seg002, ds:nothing, fs:nothing, gs:nothing</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000 ; Attributes: noreturn</span><br><span class="line">seg003:0000</span><br><span class="line">seg003:0000                 public start            //开始程序</span><br><span class="line">seg003:0000 start           proc near</span><br><span class="line">seg003:0000                 mov     ax, seg dseg    </span><br><span class="line">seg003:0003                 mov     ds, ax</span><br><span class="line">seg003:0005                 assume ds:dseg</span><br><span class="line">seg003:0005                 mov     ax, seg seg001</span><br><span class="line">seg003:0008                 mov     es, ax          //ax的值传入es</span><br><span class="line">seg003:000A                 assume es:seg001   //引用seg001的东西给es</span><br><span class="line">seg003:000A                 mov     si, 0</span><br><span class="line">seg003:000D</span><br><span class="line">seg003:000D loc_100DD:                              ; CODE XREF: start+38↓j</span><br><span class="line">seg003:000D                 cmp     si, 1Ch                </span><br><span class="line">seg003:0010                 jz      short loc_10135     </span><br><span class="line">seg003:0012                 xor     ax, ax          //将ax寄存器清0</span><br><span class="line">seg003:0014                 mov     al, [si]        //al为低4位</span><br><span class="line">seg003:0016                 shl     al, 1</span><br><span class="line">seg003:0018                 shl     al, 1</span><br><span class="line">seg003:001A                 shl     al, 1</span><br><span class="line">seg003:001C                 shl     al, 1           //shl为左移指令 ，这里左移4次</span><br><span class="line">seg003:001E                 push    ax</span><br><span class="line">seg003:001F                 xor     ax, ax</span><br><span class="line">seg003:0021                 mov     al, [si]</span><br><span class="line">seg003:0023                 shr     al, 1</span><br><span class="line">seg003:0025                 shr     al, 1</span><br><span class="line">seg003:0027                 shr     al, 1</span><br><span class="line">seg003:0029                 shr     al, 1           //shr为右移指令 ， 这里右移4次</span><br><span class="line">seg003:002B                 pop     bx</span><br><span class="line">seg003:002C                 add     ax, bx</span><br><span class="line">seg003:002E                 xor     ax, 17h         //将ax与17h进行异或处理</span><br><span class="line">seg003:0031                 add     si, 1</span><br><span class="line">seg003:0034                 cmp     al, es:[si-1]</span><br><span class="line">seg003:0038                 jz      short loc_100DD</span><br><span class="line">seg003:003A                 mov     ax, 0B800h</span><br><span class="line">seg003:003D                 mov     es, ax</span><br><span class="line">seg003:003F                 assume es:nothing</span><br><span class="line">seg003:003F                 mov     byte ptr es:0, 77h ; &#x27;w&#x27;</span><br><span class="line">seg003:0045                 mov     byte ptr es:2, 72h ; &#x27;r&#x27;</span><br><span class="line">seg003:004B                 mov     byte ptr es:4, 6Fh ; &#x27;o&#x27;</span><br><span class="line">seg003:0051                 mov     byte ptr es:6, 6Eh ; &#x27;n&#x27;</span><br><span class="line">seg003:0057                 mov     byte ptr es:8, 67h ; &#x27;g&#x27;</span><br><span class="line">seg003:005D                 mov     byte ptr es:0Ah, 21h ; &#x27;!&#x27;</span><br><span class="line">seg003:0063</span><br><span class="line">seg003:0063 loc_10133:                              ; CODE XREF: start:loc_10133↓j</span><br><span class="line">seg003:0063                 jmp     short loc_10133</span><br><span class="line">seg003:0065 ; ---------------------------------------------------------------------------</span><br><span class="line">seg003:0065</span><br><span class="line">seg003:0065 loc_10135:                              ; CODE XREF: start+10↑j</span><br><span class="line">seg003:0065                 mov     ax, 0B800h</span><br><span class="line">seg003:0068                 mov     es, ax</span><br><span class="line">seg003:006A                 mov     byte ptr es:0, 72h ; &#x27;r&#x27;</span><br><span class="line">seg003:0070                 mov     byte ptr es:2, 69h ; &#x27;i&#x27;</span><br><span class="line">seg003:0076                 mov     byte ptr es:4, 67h ; &#x27;g&#x27;</span><br><span class="line">seg003:007C                 mov     byte ptr es:6, 68h ; &#x27;h&#x27;</span><br><span class="line">seg003:0082                 mov     byte ptr es:8, 74h ; &#x27;t&#x27;</span><br><span class="line">seg003:0088                 mov     byte ptr es:0Ah, 21h ; &#x27;!&#x27;</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E loc_1015E:                              ; CODE XREF: start:loc_1015E↓j</span><br><span class="line">seg003:008E                 jmp     short loc_1015E</span><br><span class="line">seg003:008E start           endp</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E seg003          ends</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E</span><br><span class="line">seg003:008E                 end start</span><br></pre></td></tr></table></figure><p>​        它的逻辑是将输入的字符左移四位再右移四位再相加，然后再将每一位与0x17异或运算，如果每一位结果都等于seg001中的值对应相等就输出right，那么我们就逆着来写个脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">28</span>] = &#123;<span class="number">0x91</span>,<span class="number">0x61</span>,<span class="number">0x1</span>,<span class="number">0xc1</span>,<span class="number">0x41</span>,<span class="number">0xa0</span>,<span class="number">0x60</span>,<span class="number">0x41</span>,<span class="number">0xd1</span>,<span class="number">0x21</span>,<span class="number">0x14</span>,<span class="number">0xc1</span>,<span class="number">0x41</span>,<span class="number">0xe2</span>,<span class="number">0x50</span>,<span class="number">0xe1</span>,<span class="number">0xe2</span>,<span class="number">0x54</span>,<span class="number">0x20</span>,<span class="number">0xc1</span>,<span class="number">0xe2</span>,<span class="number">0x60</span>,<span class="number">0x14</span>,<span class="number">0x30</span>,<span class="number">0xd1</span>,<span class="number">0x51</span>,<span class="number">0xc0</span>,<span class="number">0x17</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = a[i] ^ <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i]&gt;&gt;<span class="number">4</span>)+ (a[i]&lt;&lt;<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意一个细节，就是在程序中，我们的值是先进行左移再进行右移的，所以我们在写脚本的时候要注意，要先右移再左移，这样的结果才是对的.</p><p>最后得到flag：<strong>hgame{welc0me_to_4sm_w0rld}</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[FlareOn4]IgniteMe</title>
      <link href="/2022/10/08/12/"/>
      <url>/2022/10/08/12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="BUU-FlareOn4-IgniteMe"><a href="#BUU-FlareOn4-IgniteMe" class="headerlink" title="BUU[FlareOn4]IgniteMe"></a>BUU[FlareOn4]IgniteMe</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳，发现是32位的，然后放入IDA分析</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423212431488.png" alt="image-20220423212431488"></p><p>然后发现有用的好像只有sub_4010F0和sub_401050这两个函数，接着一个个点进去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423212538675.png" alt="image-20220423212538675"></p><p>这个函数其实作用并不大，接着去看看判断函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423212644900.png" alt="image-20220423212644900"></p><p>这里1020点进去很显然是个读取数组长度的</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423212807857.png" alt="image-20220423212807857"></p><p>1000点进去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423212851148.png" alt="image-20220423212851148"></p><p>看不懂在干嘛，先跳过。接着是两个for循环，可以看到第一个for循环在异或，第二个for循环有个if，看看那几个数组，发现这是个与最后flag进行的一个比较</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423213001253.png" alt="image-20220423213001253"></p><p>那么前面一个for循环时解题的关键，现在就差第一次for循环的v4值不知道了，于是下个断点去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423213218032.png" alt="image-20220423213218032"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220423213233636.png" alt="image-20220423213233636"></p><p>那么v4=4也出来了，开始写脚本</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="number">0x0D</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x6C</span>, </span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x45</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x44</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, </span><br><span class="line">    <span class="number">0x56</span>, <span class="number">0x09</span>, <span class="number">0x5F</span>, <span class="number">0x45</span>, <span class="number">0x47</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, </span><br><span class="line">        <span class="number">0x17</span>, <span class="number">0x48</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x69</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">int</span> v4=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=b<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=a[i]^v4;</span><br><span class="line">v4=a[i];</span><br><span class="line">&#125;    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这题就是简单的异或，主要是需要用到IDA的动态调试去找初始值v4</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU[WUSTCTF2020]level3</title>
      <link href="/2022/10/08/11/"/>
      <url>/2022/10/08/11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="关于base64换表及交叉引用"><a href="#关于base64换表及交叉引用" class="headerlink" title="关于base64换表及交叉引用"></a>关于base64换表及交叉引用</h4><h5 id="BUU-WUSTCTF2020-level3"><a href="#BUU-WUSTCTF2020-level3" class="headerlink" title="BUU[WUSTCTF2020]level3"></a>BUU[WUSTCTF2020]level3</h5><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>首先查壳，发现是64位的，就放入64位IDA，直接F5进入主函数看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419171400715.png" alt="image-20220419171400715"></p><p>看到了后面的一串需要base64解码的东西，然后前面还有一个base64encode的函数，这里应该就是base64的加密部分，点进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419171546318.png" alt="image-20220419171546318"></p><p>这里双击这个函数，看看他里面是些什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419171634282.png" alt="image-20220419171634282"></p><p>发现这就是常规的base64，没有什么不同，然后直接去解码</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419171813510.png" alt="image-20220419171813510"></p><p>一看就是错的，然后我又去外面看了看，发现只有这一个函数会有问题，于是想起交叉引用，这里对base64_table交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419172006865.png" alt="image-20220419172006865"></p><p>发现新的函数，然后点进去看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220419172031505.png" alt="image-20220419172031505"></p><p>发现他对表进行了改动，于是写脚本去弄到新的表</p><h6 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> v1=a[i];</span><br><span class="line">a[i]=a[<span class="number">19</span>-i];</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">19</span>-i;</span><br><span class="line">a[b]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br></pre></td></tr></table></figure><p>然后去用base64换表弄一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">str1 = <span class="string">&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wctf2020&#123;Base64_is_the_start_of_reverse&#125;</span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>init和start一样都是编译器加进去的，init函数主要负责设置包、初始化变量或其他要在程序运行前优先完成的引导工作。所以不一定所有东西都会在main函数中运行，一般情况找不到东西了，就想着去交叉引用去找找有没有其它的东西</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恒月杯18年9月NewDriver</title>
      <link href="/2022/10/08/10/"/>
      <url>/2022/10/08/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="恒月杯18年9月NewDriver"><a href="#恒月杯18年9月NewDriver" class="headerlink" title="恒月杯18年9月NewDriver"></a>恒月杯18年9月NewDriver</h4><p>链接：<a href="https://pan.baidu.com/s/1SsB2FBJr1qqSy-qzFlui_g">https://pan.baidu.com/s/1SsB2FBJr1qqSy-qzFlui_g</a><br>提取码：tuyt </p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先查壳，发现是32位的文件</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417162648201.png" alt="image-20220417162648201"></p><p>然后用IDA打开看看它在干什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417162724463.png" alt="image-20220417162724463"></p><p>点开第一个函数sub_D01160看看它在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417162833881.png" alt="image-20220417162833881"></p><p>再点进去byte_D02138确定一下，发现是一个base64的加密</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417162925009.png" alt="image-20220417162925009"></p><p>然后去看看第二个函数在干嘛</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417163031562.png" alt="image-20220417163031562"></p><p>有%256，猜的没错的话应该是RC4加密在获得新的S盒，接着去第三个函数确定一下</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417163121603.png" alt="image-20220417163121603"></p><p>能确定这个题目时base64+RC4的题了，接着去最外面</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417163322071.png" alt="image-20220417163322071"></p><p>这里知道最后得到的密文就是byte_D02104</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417165907084.png" alt="image-20220417165907084"></p><p>那么我们要得到明文（也就是新的S盒）就只差密匙了。</p><p>这里知道第三个函数是明文和密匙异或得到密文，这里用OD调试</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220417164757849.png" alt="image-20220417164757849"></p><p>根据汇编语言与伪C代码结合容易得出BL就是密匙，不断地调试容易得出完整的密匙</p><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>然后开始写脚本</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x7A</span>, <span class="number">0xA6</span>, <span class="number">0x6A</span>, <span class="number">0xDA</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0x16</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xBE</span>, <span class="number">0x29</span>, <span class="number">0x67</span>, <span class="number">0xAA</span>, <span class="number">0x79</span>, <span class="number">0x79</span>, <span class="number">0xB2</span>, <span class="number">0x42</span>, <span class="number">0x64</span>, <span class="number">0xB2</span>,</span><br><span class="line">     <span class="number">0x2C</span>, <span class="number">0xBc</span>, <span class="number">0x93</span>, <span class="number">0x18</span>, <span class="number">0x07</span>, <span class="number">0x19</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x64</span>, <span class="number">0xDF</span>, <span class="number">0x52</span>, <span class="number">0x59</span>, <span class="number">0x4F</span>, <span class="number">0x96</span>, <span class="number">0xEA</span>, <span class="number">0x49</span>, <span class="number">0x3c</span>, <span class="number">0x11</span>, <span class="number">0x89</span>,</span><br><span class="line">     <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x87</span>, <span class="number">0xD3</span>, <span class="number">0x59</span>, <span class="number">0x84</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">0x20</span>, <span class="number">0xC3</span>, <span class="number">0x1A</span>, <span class="number">0xAE</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x7A</span>, <span class="number">0x41</span>, <span class="number">0xDE</span>, <span class="number">0xF6</span>, <span class="number">0x78</span>, <span class="number">0x15</span>, <span class="number">0xCB</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0xDC</span>, <span class="number">0x26</span>, <span class="number">0x55</span>, <span class="number">0x8B</span>,</span><br><span class="line">     <span class="number">0x55</span>, <span class="number">0xE5</span>, <span class="number">0xE9</span>, <span class="number">0x55</span>, <span class="number">0x75</span>, <span class="number">0x40</span>, <span class="number">0x3D</span>, <span class="number">0x82</span>, <span class="number">0x13</span>, <span class="number">0xA5</span>, <span class="number">0x60</span>, <span class="number">0x13</span>, <span class="number">0x3B</span>, <span class="number">0xF5</span>, <span class="number">0xD8</span>, <span class="number">0x19</span>, <span class="number">0x0E</span>, <span class="number">0x47</span>, <span class="number">0xCF</span>,</span><br><span class="line">     <span class="number">0x5F</span>, <span class="number">0x5E</span>, <span class="number">0xDE</span>, <span class="number">0x9D</span>, <span class="number">0x14</span>, <span class="number">0xBD</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">44</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">44</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=a[i]^b[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到base前的东西</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ZeptZ3l5UHQra25nd19yYzMrYR5wz2Jtc2P2VF9gYNM9</span><br></pre></td></tr></table></figure><p>然后去网上找个base64脚本弄一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">str1 = <span class="string">&quot;ZeptZ3l5UHQra25nd19yYzMrYR5wz2Jtc2P2VF9gYNM9&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;ABCDEFGHIJSTUVWKLMNOPQRXYZabcdqrstuvwxefghijklmnopyz0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure><p>然后就得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;y0u_know_rc4_and\xcfbase64_ha$&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022DASCTF X SU 三月春季挑战赛   easyre题解</title>
      <link href="/2022/10/08/1/"/>
      <url>/2022/10/08/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2022DASCTF-X-SU-三月春季挑战赛-easyre"><a href="#2022DASCTF-X-SU-三月春季挑战赛-easyre" class="headerlink" title="2022DASCTF X SU 三月春季挑战赛   easyre"></a>2022DASCTF X SU 三月春季挑战赛   easyre</h4><p>链接：<a href="https://pan.baidu.com/s/1TMYsvwPn6SXt4NmE74N3Dg">https://pan.baidu.com/s/1TMYsvwPn6SXt4NmE74N3Dg</a><br>提取码：tuyt </p><p>首先拿到文件，用exe去看看有没有加壳</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211248926.png" alt="image-20220401211248926"></p><p>发现这是asp的壳，我们就用</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87.png" alt="未命名图片"></p><p>把它去壳，去壳之后放入IDA进行分析</p><p>首先shift+12去看有没有什么线索</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211510960.png" alt="image-20220401211510960"></p><p>发现这里有个right于是我们双击进去看看，然后Ctrl+x去看看它调用了些什么函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211614169.png" alt="image-20220401211614169"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211728152.png" alt="image-20220401211728152">我们一个个分析，sub_401500()这个函数里头</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211834242.png" alt="image-20220401211834242"></p><p>表示的是定义了b这个数组有256个元素</p><p>sub_40152B()这个函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401211943375.png" alt="image-20220401211943375"></p><p>这里的sub_41A038(v1)这个函数可以知道就是v3，从最后的for循环很容易得到v3=42</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401212023001.png" alt="image-20220401212023001"></p><p>所以result=42；</p><p>这里可以猜测v1是密匙，因为他是用的strcpy函数，我们就写一个脚本，看一下它这个ASCII码会转换成什么</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401212122903.png" alt="image-20220401212122903"></p><p>可以发现密匙为[49,50,51,52,53,54]</p><p>然后这里最后的*(dword_492440 + i) = result，*(dword_492440 + i)先放着，继续往下看</p><p>sub_401593()函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401212715832.png" alt="image-20220401212715832"></p><p>这里的交换，与256的循环以及前面的b[256]可以判断出来这是一个RC4的加密</p><p>sub_401619(a1, v3)函数</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401213146901.png" alt="image-20220401213146901"></p><p>这是一个加密的算法，画圈部分将它简化放入for循环中当条件为a–，这里dword_492940数组就是外面的for循环中的数组，于是我们去外面看看</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401213255132.png" alt="image-20220401213255132"></p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401213343871.png" alt="image-20220401213343871">这里的LOBYTE(dword_492940[i]表示的是这个数组的低八位</p><p><img src="https://cdn.jsdelivr.net/gh/CTTTTTTTT/image@main/image-20220401213429642.png" alt="image-20220401213429642"></p><p>然后这个*(dword_492A60 + i)就是v2数组</p><p>*(i + a1)这个表示的是a1[i]也是我们要求的，那么这个语句的逆向结果为</p><p>a[i]=(v2[i]-71)^(dword_492940[i] &amp; 0xff);</p><p>那我们开始写脚本</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> t[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> tmp;</span><br><span class="line"></span><br><span class="line">tmp = *a;</span><br><span class="line"></span><br><span class="line">*a = *b;</span><br><span class="line"></span><br><span class="line">*b = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rc4_Init</span><span class="params">(<span class="keyword">uint8_t</span>* key, <span class="keyword">uint32_t</span> klen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">s[i] = i;</span><br><span class="line"></span><br><span class="line">t[i] = key[i % klen];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">j = (j + s[i] + t[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(&amp;s[i], &amp;s[j]);</span><br><span class="line"></span><br><span class="line">&#125;                             <span class="comment">//交换的函数(可以套用这个模板)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">sub_401619</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v3; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v4; <span class="comment">// [esp+14h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v5; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; a2--; k[v4++] = s[(s[v5] + s[i]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">v5 = (v5 + s[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">v3 = s[i] + <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">s[i] = s[v5] - <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">s[i] ^= <span class="number">2u</span>;</span><br><span class="line"></span><br><span class="line">s[v5] = <span class="number">5</span> * v3;</span><br><span class="line"></span><br><span class="line">s[v5] = s[i] - <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">s[v5] += s[i];</span><br><span class="line"></span><br><span class="line">s[i] -= <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">&#125;                              <span class="comment">//加密部分的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> v2[<span class="number">42</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> ket[<span class="number">7</span>] = &#123;<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Rc4_Init</span>(ket, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sub_401619</span>();</span><br><span class="line"></span><br><span class="line">v2[<span class="number">0</span>] = <span class="number">-61</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">1</span>] = <span class="number">-128</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">2</span>] = <span class="number">-43</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">3</span>] = <span class="number">-14</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">4</span>] = <span class="number">-101</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">5</span>] = <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">6</span>] = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">7</span>] = <span class="number">-76</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">8</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">9</span>] = <span class="number">-34</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">10</span>] = <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">11</span>] = <span class="number">-125</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">12</span>] = <span class="number">47</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">13</span>] = <span class="number">-105</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">14</span>] = <span class="number">-72</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">15</span>] = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">16</span>] = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">17</span>] = <span class="number">116</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">18</span>] = <span class="number">-47</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">19</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">20</span>] = <span class="number">115</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">21</span>] = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">22</span>] = <span class="number">-78</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">23</span>] = <span class="number">-56</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">24</span>] = <span class="number">-59</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">25</span>] = <span class="number">116</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">26</span>] = <span class="number">-64</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">27</span>] = <span class="number">91</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">28</span>] = <span class="number">-9</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">29</span>] = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">30</span>] = <span class="number">-45</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">31</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">32</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">33</span>] = <span class="number">-78</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">34</span>] = <span class="number">-92</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">35</span>] = <span class="number">-82</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">36</span>] = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">37</span>] = <span class="number">-84</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">38</span>] = <span class="number">92</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">39</span>] = <span class="number">86</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">40</span>] = <span class="number">-68</span>;</span><br><span class="line"></span><br><span class="line">v2[<span class="number">41</span>] = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">v2[i] = ((v2[i] - <span class="number">71</span>) ^ (k[i] &amp; <span class="number">0xff</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v2);     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">得到flag：</span><br><span class="line"></span><br><span class="line">DASCTF&#123;Welc0me-t0-j01n-SU-l0ve-suyug1eg1e&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
